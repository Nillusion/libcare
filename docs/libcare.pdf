%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<<
/F1 2 0 R /F2 3 0 R /F3 6 0 R /F4 9 0 R /F5 10 0 R /F6 24 0 R
>>
endobj
2 0 obj
<<
/BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font
>>
endobj
3 0 obj
<<
/BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font
>>
endobj
4 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 21 0 R /XYZ 62.69291 132.6236 0 ] /Rect [ 113.9717 696.0236 177.4375 708.0236 ] /Subtype /Link /Type /Annot
>>
endobj
5 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://access.redhat.com/articles/1332213)
>> /Border [ 0 0 0 ] /Rect [ 216.9934 696.0236 252.5534 708.0236 ] /Subtype /Link /Type /Annot
>>
endobj
6 0 obj
<<
/BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font
>>
endobj
7 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 116 0 R /XYZ 62.69291 768.5236 0 ] /Rect [ 241.6529 684.0236 281.6729 696.0236 ] /Subtype /Link /Type /Annot
>>
endobj
8 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 62.69291 476.0236 0 ] /Rect [ 359.4929 684.0236 433.9729 696.0236 ] /Subtype /Link /Type /Annot
>>
endobj
9 0 obj
<<
/BaseFont /Courier-Oblique /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font
>>
endobj
10 0 obj
<<
/BaseFont /Courier-Bold /Encoding /WinAnsiEncoding /Name /F5 /Subtype /Type1 /Type /Font
>>
endobj
11 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 62.69291 476.0236 0 ] /Rect [ 330.6928 350.6236 377.9328 362.6236 ] /Subtype /Link /Type /Annot
>>
endobj
12 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://www.freebsd.org/cgi/man.cgi?query=nc&sektion=1)
>> /Border [ 0 0 0 ] /Rect [ 308.5629 146.2236 335.8029 158.2236 ] /Subtype /Link /Type /Annot
>>
endobj
13 0 obj
<<
/Annots [ 4 0 R 5 0 R 7 0 R 8 0 R 11 0 R 12 0 R ] /Contents 254 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
14 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://en.wikipedia.org/wiki/Return-to-libc_attack)
>> /Border [ 0 0 0 ] /Rect [ 395.5929 527.4236 481.1729 539.4236 ] /Subtype /Link /Type /Annot
>>
endobj
15 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 168 0 R /XYZ 62.69291 644.0236 0 ] /Rect [ 249.1029 506.4236 284.1129 518.4236 ] /Subtype /Link /Type /Annot
>>
endobj
16 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 352.6236 0 ] /Rect [ 270.7929 334.0236 325.2629 346.0236 ] /Subtype /Link /Type /Annot
>>
endobj
17 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 168 0 R /XYZ 62.69291 644.0236 0 ] /Rect [ 436.9115 190.6236 471.9215 202.6236 ] /Subtype /Link /Type /Annot
>>
endobj
18 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 638.0236 0 ] /Rect [ 162.6871 178.6236 252.3757 190.6236 ] /Subtype /Link /Type /Annot
>>
endobj
19 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 352.6236 0 ] /Rect [ 382.0184 178.6236 436.4884 190.6236 ] /Subtype /Link /Type /Annot
>>
endobj
20 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 602.0236 0 ] /Rect [ 62.69291 166.6236 124.3929 178.6236 ] /Subtype /Link /Type /Annot
>>
endobj
21 0 obj
<<
/Annots [ 14 0 R 15 0 R 16 0 R 17 0 R 18 0 R 19 0 R 20 0 R ] /Contents 255 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
22 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://access.redhat.com/articles/1332213)
>> /Border [ 0 0 0 ] /Rect [ 386.8427 753.0236 422.4027 765.0236 ] /Subtype /Link /Type /Annot
>>
endobj
23 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 746.0236 0 ] /Rect [ 239.3983 741.0236 308.3083 753.0236 ] /Subtype /Link /Type /Annot
>>
endobj
24 0 obj
<<
/BaseFont /Helvetica-BoldOblique /Encoding /WinAnsiEncoding /Name /F6 /Subtype /Type1 /Type /Font
>>
endobj
25 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://www.docker.com/)
>> /Border [ 0 0 0 ] /Rect [ 342.5129 684.0236 374.1829 696.0236 ] /Subtype /Link /Type /Annot
>>
endobj
26 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://access.redhat.com/articles/1332213)
>> /Border [ 0 0 0 ] /Rect [ 124.4941 404.4236 160.0541 416.4236 ] /Subtype /Link /Type /Annot
>>
endobj
27 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 62.69291 485.0236 0 ] /Rect [ 313.5828 228.2236 435.6627 240.2236 ] /Subtype /Link /Type /Annot
>>
endobj
28 0 obj
<<
/Annots [ 22 0 R 23 0 R 25 0 R 26 0 R 27 0 R ] /Contents 256 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
29 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://access.redhat.com/articles/1332213)
>> /Border [ 0 0 0 ] /Rect [ 191.0929 606.6236 226.6529 618.6236 ] /Subtype /Link /Type /Annot
>>
endobj
30 0 obj
<<
/Annots [ 29 0 R ] /Contents 257 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
31 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 13 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 62.69291 723.0236 99.92291 735.0236 ] /Subtype /Link /Type /Annot
>>
endobj
32 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 13 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 527.0227 723.7736 532.5827 735.7736 ] /Subtype /Link /Type /Annot
>>
endobj
33 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 13 0 R /XYZ 62.69291 672.0236 0 ] /Rect [ 82.69291 705.0236 116.5929 717.0236 ] /Subtype /Link /Type /Annot
>>
endobj
34 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 13 0 R /XYZ 62.69291 672.0236 0 ] /Rect [ 119.3729 705.0236 203.3729 717.0236 ] /Subtype /Link /Type /Annot
>>
endobj
35 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 13 0 R /XYZ 62.69291 672.0236 0 ] /Rect [ 527.0227 705.7736 532.5827 717.7736 ] /Subtype /Link /Type /Annot
>>
endobj
36 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 21 0 R /XYZ 62.69291 154.6236 0 ] /Rect [ 82.69291 687.0236 114.9229 699.0236 ] /Subtype /Link /Type /Annot
>>
endobj
37 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 21 0 R /XYZ 62.69291 154.6236 0 ] /Rect [ 117.7029 687.0236 147.7029 699.0236 ] /Subtype /Link /Type /Annot
>>
endobj
38 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 21 0 R /XYZ 62.69291 154.6236 0 ] /Rect [ 147.7029 687.0236 182.7129 699.0236 ] /Subtype /Link /Type /Annot
>>
endobj
39 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 21 0 R /XYZ 62.69291 154.6236 0 ] /Rect [ 527.0227 687.7736 532.5827 699.7736 ] /Subtype /Link /Type /Annot
>>
endobj
40 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 28 0 R /XYZ 62.69291 717.0236 0 ] /Rect [ 102.6929 669.0236 203.8429 681.0236 ] /Subtype /Link /Type /Annot
>>
endobj
41 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 28 0 R /XYZ 62.69291 717.0236 0 ] /Rect [ 527.0227 669.7736 532.5827 681.7736 ] /Subtype /Link /Type /Annot
>>
endobj
42 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 28 0 R /XYZ 62.69291 279.2236 0 ] /Rect [ 102.6929 651.0236 241.6629 663.0236 ] /Subtype /Link /Type /Annot
>>
endobj
43 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 28 0 R /XYZ 62.69291 279.2236 0 ] /Rect [ 527.0227 651.7736 532.5827 663.7736 ] /Subtype /Link /Type /Annot
>>
endobj
44 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 62.69291 501.0236 0 ] /Rect [ 62.69291 633.0236 205.5129 645.0236 ] /Subtype /Link /Type /Annot
>>
endobj
45 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 62.69291 501.0236 0 ] /Rect [ 527.0227 633.7736 532.5827 645.7736 ] /Subtype /Link /Type /Annot
>>
endobj
46 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 62.69291 432.0236 0 ] /Rect [ 82.69291 615.0236 146.6129 627.0236 ] /Subtype /Link /Type /Annot
>>
endobj
47 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 62.69291 432.0236 0 ] /Rect [ 527.0227 615.7736 532.5827 627.7736 ] /Subtype /Link /Type /Annot
>>
endobj
48 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 62.69291 297.6236 0 ] /Rect [ 82.69291 597.0236 118.2629 609.0236 ] /Subtype /Link /Type /Annot
>>
endobj
49 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 62.69291 297.6236 0 ] /Rect [ 121.0429 597.0236 163.0429 609.0236 ] /Subtype /Link /Type /Annot
>>
endobj
50 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 151 0 R /XYZ 62.69291 297.6236 0 ] /Rect [ 527.0227 597.7736 532.5827 609.7736 ] /Subtype /Link /Type /Annot
>>
endobj
51 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 62.69291 579.0236 107.1629 591.0236 ] /Subtype /Link /Type /Annot
>>
endobj
52 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 527.0227 579.7736 532.5827 591.7736 ] /Subtype /Link /Type /Annot
>>
endobj
53 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 62.69291 624.0236 0 ] /Rect [ 82.69291 561.7736 161.6229 573.7736 ] /Subtype /Link /Type /Annot
>>
endobj
54 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 62.69291 624.0236 0 ] /Rect [ 527.0227 561.7736 532.5827 573.7736 ] /Subtype /Link /Type /Annot
>>
endobj
55 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 62.69291 546.0236 0 ] /Rect [ 102.6929 543.0236 178.2729 555.0236 ] /Subtype /Link /Type /Annot
>>
endobj
56 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 62.69291 546.0236 0 ] /Rect [ 527.0227 543.7736 532.5827 555.7736 ] /Subtype /Link /Type /Annot
>>
endobj
57 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 62.69291 363.0236 0 ] /Rect [ 102.6929 525.0236 176.0629 537.0236 ] /Subtype /Link /Type /Annot
>>
endobj
58 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 62.69291 363.0236 0 ] /Rect [ 527.0227 525.7736 532.5827 537.7736 ] /Subtype /Link /Type /Annot
>>
endobj
59 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 168 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 82.69291 507.0236 178.2929 519.0236 ] /Subtype /Link /Type /Annot
>>
endobj
60 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 168 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 527.0227 507.7736 532.5827 519.7736 ] /Subtype /Link /Type /Annot
>>
endobj
61 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 168 0 R /XYZ 62.69291 663.0236 0 ] /Rect [ 102.6929 489.0236 128.2529 501.0236 ] /Subtype /Link /Type /Annot
>>
endobj
62 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 168 0 R /XYZ 62.69291 663.0236 0 ] /Rect [ 131.0329 489.0236 167.0329 501.0236 ] /Subtype /Link /Type /Annot
>>
endobj
63 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 168 0 R /XYZ 62.69291 663.0236 0 ] /Rect [ 527.0227 489.7736 532.5827 501.7736 ] /Subtype /Link /Type /Annot
>>
endobj
64 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 102.6929 471.0236 244.4329 483.0236 ] /Subtype /Link /Type /Annot
>>
endobj
65 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 247.2129 471.0236 343.2129 483.0236 ] /Subtype /Link /Type /Annot
>>
endobj
66 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 527.0227 471.7736 532.5827 483.7736 ] /Subtype /Link /Type /Annot
>>
endobj
67 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 480.0236 0 ] /Rect [ 82.69291 453.0236 134.9329 465.0236 ] /Subtype /Link /Type /Annot
>>
endobj
68 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 480.0236 0 ] /Rect [ 137.7129 453.0236 203.7129 465.0236 ] /Subtype /Link /Type /Annot
>>
endobj
69 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 480.0236 0 ] /Rect [ 527.0227 453.7736 532.5827 465.7736 ] /Subtype /Link /Type /Annot
>>
endobj
70 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 371.6236 0 ] /Rect [ 102.6929 435.0236 194.4029 447.0236 ] /Subtype /Link /Type /Annot
>>
endobj
71 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 371.6236 0 ] /Rect [ 197.1829 435.0236 227.1829 447.0236 ] /Subtype /Link /Type /Annot
>>
endobj
72 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 371.6236 0 ] /Rect [ 527.0227 435.7736 532.5827 447.7736 ] /Subtype /Link /Type /Annot
>>
endobj
73 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 165.4236 0 ] /Rect [ 102.6929 417.0236 202.7329 429.0236 ] /Subtype /Link /Type /Annot
>>
endobj
74 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 165.4236 0 ] /Rect [ 205.5129 417.0236 247.5129 429.0236 ] /Subtype /Link /Type /Annot
>>
endobj
75 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 165.4236 0 ] /Rect [ 527.0227 417.7736 532.5827 429.7736 ] /Subtype /Link /Type /Annot
>>
endobj
76 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 102.6929 399.0236 175.5029 411.0236 ] /Subtype /Link /Type /Annot
>>
endobj
77 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 178.2829 399.0236 202.2829 411.0236 ] /Subtype /Link /Type /Annot
>>
endobj
78 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 521.4627 399.7736 532.5827 411.7736 ] /Subtype /Link /Type /Annot
>>
endobj
79 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 708.0236 0 ] /Rect [ 102.6929 381.0236 184.9529 393.0236 ] /Subtype /Link /Type /Annot
>>
endobj
80 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 708.0236 0 ] /Rect [ 521.4627 381.7736 532.5827 393.7736 ] /Subtype /Link /Type /Annot
>>
endobj
81 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 627.0236 0 ] /Rect [ 62.69291 363.0236 175.4929 375.0236 ] /Subtype /Link /Type /Annot
>>
endobj
82 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 627.0236 0 ] /Rect [ 521.4627 363.7736 532.5827 375.7736 ] /Subtype /Link /Type /Annot
>>
endobj
83 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 564.0236 0 ] /Rect [ 82.69291 345.0236 154.9329 357.0236 ] /Subtype /Link /Type /Annot
>>
endobj
84 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 564.0236 0 ] /Rect [ 521.4627 345.7736 532.5827 357.7736 ] /Subtype /Link /Type /Annot
>>
endobj
85 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 343.6236 0 ] /Rect [ 102.6929 327.0236 183.2729 339.0236 ] /Subtype /Link /Type /Annot
>>
endobj
86 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 343.6236 0 ] /Rect [ 186.0529 327.0236 228.0529 339.0236 ] /Subtype /Link /Type /Annot
>>
endobj
87 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 343.6236 0 ] /Rect [ 521.4627 327.7736 532.5827 339.7736 ] /Subtype /Link /Type /Annot
>>
endobj
88 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 182 0 R /XYZ 62.69291 545.8236 0 ] /Rect [ 122.6929 309.0236 174.3729 321.0236 ] /Subtype /Link /Type /Annot
>>
endobj
89 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 182 0 R /XYZ 62.69291 545.8236 0 ] /Rect [ 521.4627 309.7736 532.5827 321.7736 ] /Subtype /Link /Type /Annot
>>
endobj
90 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 182 0 R /XYZ 62.69291 277.8236 0 ] /Rect [ 122.6929 291.0236 218.8529 303.0236 ] /Subtype /Link /Type /Annot
>>
endobj
91 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 182 0 R /XYZ 62.69291 277.8236 0 ] /Rect [ 521.4627 291.7736 532.5827 303.7736 ] /Subtype /Link /Type /Annot
>>
endobj
92 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 185 0 R /XYZ 62.69291 729.0236 0 ] /Rect [ 122.6929 273.0236 194.6929 285.0236 ] /Subtype /Link /Type /Annot
>>
endobj
93 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 185 0 R /XYZ 62.69291 729.0236 0 ] /Rect [ 521.4627 273.7736 532.5827 285.7736 ] /Subtype /Link /Type /Annot
>>
endobj
94 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 185 0 R /XYZ 62.69291 663.0236 0 ] /Rect [ 102.6929 255.0236 255.5429 267.0236 ] /Subtype /Link /Type /Annot
>>
endobj
95 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 185 0 R /XYZ 62.69291 663.0236 0 ] /Rect [ 258.3229 255.0236 306.3229 267.0236 ] /Subtype /Link /Type /Annot
>>
endobj
96 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 185 0 R /XYZ 62.69291 663.0236 0 ] /Rect [ 521.4627 255.7736 532.5827 267.7736 ] /Subtype /Link /Type /Annot
>>
endobj
97 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 185 0 R /XYZ 62.69291 318.0236 0 ] /Rect [ 82.69291 237.0236 155.4929 249.0236 ] /Subtype /Link /Type /Annot
>>
endobj
98 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 185 0 R /XYZ 62.69291 318.0236 0 ] /Rect [ 158.2729 237.0236 176.2729 249.0236 ] /Subtype /Link /Type /Annot
>>
endobj
99 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 185 0 R /XYZ 62.69291 318.0236 0 ] /Rect [ 521.4627 237.7736 532.5827 249.7736 ] /Subtype /Link /Type /Annot
>>
endobj
100 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 187 0 R /XYZ 62.69291 675.0236 0 ] /Rect [ 62.69291 219.0236 147.7029 231.0236 ] /Subtype /Link /Type /Annot
>>
endobj
101 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 187 0 R /XYZ 62.69291 675.0236 0 ] /Rect [ 521.4627 219.7736 532.5827 231.7736 ] /Subtype /Link /Type /Annot
>>
endobj
102 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 187 0 R /XYZ 62.69291 612.0236 0 ] /Rect [ 82.69291 201.0236 193.8629 213.0236 ] /Subtype /Link /Type /Annot
>>
endobj
103 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 187 0 R /XYZ 62.69291 612.0236 0 ] /Rect [ 521.4627 201.7736 532.5827 213.7736 ] /Subtype /Link /Type /Annot
>>
endobj
104 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 189 0 R /XYZ 62.69291 729.0236 0 ] /Rect [ 82.69291 183.0236 121.6029 195.0236 ] /Subtype /Link /Type /Annot
>>
endobj
105 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 189 0 R /XYZ 62.69291 729.0236 0 ] /Rect [ 521.4627 183.7736 532.5827 195.7736 ] /Subtype /Link /Type /Annot
>>
endobj
106 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 189 0 R /XYZ 62.69291 621.0236 0 ] /Rect [ 102.6929 165.0236 144.3829 177.0236 ] /Subtype /Link /Type /Annot
>>
endobj
107 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 189 0 R /XYZ 62.69291 621.0236 0 ] /Rect [ 521.4627 165.7736 532.5827 177.7736 ] /Subtype /Link /Type /Annot
>>
endobj
108 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 189 0 R /XYZ 62.69291 552.0236 0 ] /Rect [ 102.6929 147.0236 257.2029 159.0236 ] /Subtype /Link /Type /Annot
>>
endobj
109 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 189 0 R /XYZ 62.69291 552.0236 0 ] /Rect [ 521.4627 147.7736 532.5827 159.7736 ] /Subtype /Link /Type /Annot
>>
endobj
110 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 189 0 R /XYZ 62.69291 423.0236 0 ] /Rect [ 102.6929 129.0236 248.8529 141.0236 ] /Subtype /Link /Type /Annot
>>
endobj
111 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 189 0 R /XYZ 62.69291 423.0236 0 ] /Rect [ 521.4627 129.7736 532.5827 141.7736 ] /Subtype /Link /Type /Annot
>>
endobj
112 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 189 0 R /XYZ 62.69291 318.0236 0 ] /Rect [ 102.6929 111.0236 226.0829 123.0236 ] /Subtype /Link /Type /Annot
>>
endobj
113 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 189 0 R /XYZ 62.69291 318.0236 0 ] /Rect [ 521.4627 111.7736 532.5827 123.7736 ] /Subtype /Link /Type /Annot
>>
endobj
114 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 189 0 R /XYZ 62.69291 237.0236 0 ] /Rect [ 102.6929 93.02362 179.9529 105.0236 ] /Subtype /Link /Type /Annot
>>
endobj
115 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 189 0 R /XYZ 62.69291 237.0236 0 ] /Rect [ 521.4627 93.77362 532.5827 105.7736 ] /Subtype /Link /Type /Annot
>>
endobj
116 0 obj
<<
/Annots [ 31 0 R 32 0 R 33 0 R 34 0 R 35 0 R 36 0 R 37 0 R 38 0 R 39 0 R 40 0 R 
  41 0 R 42 0 R 43 0 R 44 0 R 45 0 R 46 0 R 47 0 R 48 0 R 49 0 R 50 0 R 
  51 0 R 52 0 R 53 0 R 54 0 R 55 0 R 56 0 R 57 0 R 58 0 R 59 0 R 60 0 R 
  61 0 R 62 0 R 63 0 R 64 0 R 65 0 R 66 0 R 67 0 R 68 0 R 69 0 R 70 0 R 
  71 0 R 72 0 R 73 0 R 74 0 R 75 0 R 76 0 R 77 0 R 78 0 R 79 0 R 80 0 R 
  81 0 R 82 0 R 83 0 R 84 0 R 85 0 R 86 0 R 87 0 R 88 0 R 89 0 R 90 0 R 
  91 0 R 92 0 R 93 0 R 94 0 R 95 0 R 96 0 R 97 0 R 98 0 R 99 0 R 100 0 R 
  101 0 R 102 0 R 103 0 R 104 0 R 105 0 R 106 0 R 107 0 R 108 0 R 109 0 R 110 0 R 
  111 0 R 112 0 R 113 0 R 114 0 R 115 0 R ] /Contents 258 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
117 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 190 0 R /XYZ 62.69291 657.0236 0 ] /Rect [ 102.6929 750.0236 196.0629 762.0236 ] /Subtype /Link /Type /Annot
>>
endobj
118 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 190 0 R /XYZ 62.69291 657.0236 0 ] /Rect [ 521.4627 750.7736 532.5827 762.7736 ] /Subtype /Link /Type /Annot
>>
endobj
119 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 190 0 R /XYZ 62.69291 630.0236 0 ] /Rect [ 122.6929 732.0236 206.0429 744.0236 ] /Subtype /Link /Type /Annot
>>
endobj
120 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 190 0 R /XYZ 62.69291 630.0236 0 ] /Rect [ 521.4627 732.7736 532.5827 744.7736 ] /Subtype /Link /Type /Annot
>>
endobj
121 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 190 0 R /XYZ 62.69291 378.0236 0 ] /Rect [ 122.6929 714.0236 199.9429 726.0236 ] /Subtype /Link /Type /Annot
>>
endobj
122 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 190 0 R /XYZ 62.69291 378.0236 0 ] /Rect [ 521.4627 714.7736 532.5827 726.7736 ] /Subtype /Link /Type /Annot
>>
endobj
123 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 190 0 R /XYZ 62.69291 234.0236 0 ] /Rect [ 102.6929 696.0236 207.1829 708.0236 ] /Subtype /Link /Type /Annot
>>
endobj
124 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 190 0 R /XYZ 62.69291 234.0236 0 ] /Rect [ 521.4627 696.7736 532.5827 708.7736 ] /Subtype /Link /Type /Annot
>>
endobj
125 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 717.0236 0 ] /Rect [ 102.6929 678.0236 155.4829 690.0236 ] /Subtype /Link /Type /Annot
>>
endobj
126 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 717.0236 0 ] /Rect [ 521.4627 678.7736 532.5827 690.7736 ] /Subtype /Link /Type /Annot
>>
endobj
127 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 660.0236 0 ] /Rect [ 82.69291 660.0236 184.4029 672.0236 ] /Subtype /Link /Type /Annot
>>
endobj
128 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 660.0236 0 ] /Rect [ 521.4627 660.7736 532.5827 672.7736 ] /Subtype /Link /Type /Annot
>>
endobj
129 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 554.8236 0 ] /Rect [ 102.6929 642.0236 270.5429 654.0236 ] /Subtype /Link /Type /Annot
>>
endobj
130 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 554.8236 0 ] /Rect [ 273.3229 642.0236 351.3229 654.0236 ] /Subtype /Link /Type /Annot
>>
endobj
131 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 554.8236 0 ] /Rect [ 521.4627 642.7736 532.5827 654.7736 ] /Subtype /Link /Type /Annot
>>
endobj
132 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 195 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 102.6929 624.0236 175.5029 636.0236 ] /Subtype /Link /Type /Annot
>>
endobj
133 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 195 0 R /XYZ 62.69291 765.0236 0 ] /Rect [ 521.4627 624.7736 532.5827 636.7736 ] /Subtype /Link /Type /Annot
>>
endobj
134 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 195 0 R /XYZ 62.69291 738.0236 0 ] /Rect [ 122.6929 606.0236 279.9729 618.0236 ] /Subtype /Link /Type /Annot
>>
endobj
135 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 195 0 R /XYZ 62.69291 738.0236 0 ] /Rect [ 282.7529 606.0236 402.7529 618.0236 ] /Subtype /Link /Type /Annot
>>
endobj
136 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 195 0 R /XYZ 62.69291 738.0236 0 ] /Rect [ 521.4627 606.7736 532.5827 618.7736 ] /Subtype /Link /Type /Annot
>>
endobj
137 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 195 0 R /XYZ 62.69291 361.6236 0 ] /Rect [ 122.6929 588.0236 201.0529 600.0236 ] /Subtype /Link /Type /Annot
>>
endobj
138 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 195 0 R /XYZ 62.69291 361.6236 0 ] /Rect [ 521.4627 588.7736 532.5827 600.7736 ] /Subtype /Link /Type /Annot
>>
endobj
139 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 196 0 R /XYZ 62.69291 352.6236 0 ] /Rect [ 122.6929 570.0236 254.9629 582.0236 ] /Subtype /Link /Type /Annot
>>
endobj
140 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 196 0 R /XYZ 62.69291 352.6236 0 ] /Rect [ 257.7429 570.0236 389.7429 582.0236 ] /Subtype /Link /Type /Annot
>>
endobj
141 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 196 0 R /XYZ 62.69291 352.6236 0 ] /Rect [ 521.4627 570.7736 532.5827 582.7736 ] /Subtype /Link /Type /Annot
>>
endobj
142 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 196 0 R /XYZ 62.69291 245.4236 0 ] /Rect [ 122.6929 552.0236 192.1729 564.0236 ] /Subtype /Link /Type /Annot
>>
endobj
143 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 196 0 R /XYZ 62.69291 245.4236 0 ] /Rect [ 194.9529 552.0236 338.9529 564.0236 ] /Subtype /Link /Type /Annot
>>
endobj
144 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 196 0 R /XYZ 62.69291 245.4236 0 ] /Rect [ 521.4627 552.7736 532.5827 564.7736 ] /Subtype /Link /Type /Annot
>>
endobj
145 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 197 0 R /XYZ 62.69291 177.4236 0 ] /Rect [ 122.6929 534.0236 252.1829 546.0236 ] /Subtype /Link /Type /Annot
>>
endobj
146 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 197 0 R /XYZ 62.69291 177.4236 0 ] /Rect [ 254.9629 534.0236 320.9629 546.0236 ] /Subtype /Link /Type /Annot
>>
endobj
147 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 197 0 R /XYZ 62.69291 177.4236 0 ] /Rect [ 521.4627 534.7736 532.5827 546.7736 ] /Subtype /Link /Type /Annot
>>
endobj
148 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 199 0 R /XYZ 62.69291 501.4236 0 ] /Rect [ 122.6929 516.0236 172.1529 528.0236 ] /Subtype /Link /Type /Annot
>>
endobj
149 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 199 0 R /XYZ 62.69291 501.4236 0 ] /Rect [ 521.4627 516.7736 532.5827 528.7736 ] /Subtype /Link /Type /Annot
>>
endobj
150 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 13 0 R /XYZ 62.69291 650.0236 0 ] /Rect [ 395.6229 77.22362 427.8529 89.22362 ] /Subtype /Link /Type /Annot
>>
endobj
151 0 obj
<<
/Annots [ 117 0 R 118 0 R 119 0 R 120 0 R 121 0 R 122 0 R 123 0 R 124 0 R 125 0 R 126 0 R 
  127 0 R 128 0 R 129 0 R 130 0 R 131 0 R 132 0 R 133 0 R 134 0 R 135 0 R 136 0 R 
  137 0 R 138 0 R 139 0 R 140 0 R 141 0 R 142 0 R 143 0 R 144 0 R 145 0 R 146 0 R 
  147 0 R 148 0 R 149 0 R 150 0 R ] /Contents 259 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
152 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 85.69291 683.0236 0 ] /Rect [ 107.4957 726.0236 206.2286 738.0236 ] /Subtype /Link /Type /Annot
>>
endobj
153 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 638.0236 0 ] /Rect [ 226.5914 726.0236 431.1584 738.0236 ] /Subtype /Link /Type /Annot
>>
endobj
154 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 85.69291 683.0236 0 ] /Rect [ 482.0934 714.0236 530.4534 726.0236 ] /Subtype /Link /Type /Annot
>>
endobj
155 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 85.69291 683.0236 0 ] /Rect [ 62.69291 702.0236 97.71291 714.0236 ] /Subtype /Link /Type /Annot
>>
endobj
156 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 85.69291 683.0236 0 ] /Rect [ 85.69291 669.0236 164.6229 681.0236 ] /Subtype /Link /Type /Annot
>>
endobj
157 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 168 0 R /XYZ 62.69291 768.0236 0 ] /Rect [ 85.69291 651.7736 181.2929 663.7736 ] /Subtype /Link /Type /Annot
>>
endobj
158 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 352.6236 0 ] /Rect [ 85.69291 633.7736 161.8429 645.7736 ] /Subtype /Link /Type /Annot
>>
endobj
159 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 663.0236 0 ] /Rect [ 311.7029 558.0236 413.4129 570.0236 ] /Subtype /Link /Type /Annot
>>
endobj
160 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 170 0 R /XYZ 62.69291 352.6236 0 ] /Rect [ 235.5429 210.0236 311.6929 222.0236 ] /Subtype /Link /Type /Annot
>>
endobj
161 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 195 0 R /XYZ 62.69291 767.5236 0 ] /Rect [ 500.3527 150.0236 532.6054 162.0236 ] /Subtype /Link /Type /Annot
>>
endobj
162 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 195 0 R /XYZ 62.69291 767.5236 0 ] /Rect [ 62.69291 138.0236 100.4929 150.0236 ] /Subtype /Link /Type /Annot
>>
endobj
163 0 obj
<<
/Annots [ 152 0 R 153 0 R 154 0 R 155 0 R 156 0 R 157 0 R 158 0 R 159 0 R 160 0 R 161 0 R 
  162 0 R ] /Contents 260 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
164 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 62.69291 527.0236 0 ] /Rect [ 136.4329 687.0236 181.4529 699.0236 ] /Subtype /Link /Type /Annot
>>
endobj
165 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 663.0236 0 ] /Rect [ 469.2827 687.0236 530.4227 699.0236 ] /Subtype /Link /Type /Annot
>>
endobj
166 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 663.0236 0 ] /Rect [ 62.69291 675.0236 100.4829 687.0236 ] /Subtype /Link /Type /Annot
>>
endobj
167 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 62.69291 527.0236 0 ] /Rect [ 360.6029 114.2236 405.6229 126.2236 ] /Subtype /Link /Type /Annot
>>
endobj
168 0 obj
<<
/Annots [ 164 0 R 165 0 R 166 0 R 167 0 R ] /Contents 261 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
169 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 189 0 R /XYZ 62.69291 732.0236 0 ] /Rect [ 222.7629 177.4236 261.6729 189.4236 ] /Subtype /Link /Type /Annot
>>
endobj
170 0 obj
<<
/Annots [ 169 0 R ] /Contents 262 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
171 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 324.6236 0 ] /Rect [ 85.69291 382.6236 106.8129 394.6236 ] /Subtype /Link /Type /Annot
>>
endobj
172 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 185 0 R /XYZ 62.69291 644.0236 0 ] /Rect [ 85.69291 364.6236 112.9229 376.6236 ] /Subtype /Link /Type /Annot
>>
endobj
173 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 663.0236 0 ] /Rect [ 363.3629 155.4236 465.0729 167.4236 ] /Subtype /Link /Type /Annot
>>
endobj
174 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 168 0 R /XYZ 62.69291 644.0236 0 ] /Rect [ 119.1618 125.4236 154.1718 137.4236 ] /Subtype /Link /Type /Annot
>>
endobj
175 0 obj
<<
/Annots [ 171 0 R 172 0 R 173 0 R 174 0 R ] /Contents 263 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
176 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 182 0 R /XYZ 62.69291 547.8236 0 ] /Rect [ 510.4627 681.0236 525.5171 693.0236 ] /Subtype /Link /Type /Annot
>>
endobj
177 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 182 0 R /XYZ 62.69291 547.8236 0 ] /Rect [ 303.6378 669.0236 333.0878 681.0236 ] /Subtype /Link /Type /Annot
>>
endobj
178 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 175 0 R /XYZ 62.69291 689.0236 0 ] /Rect [ 159.85 301.8236 204.87 313.8236 ] /Subtype /Link /Type /Annot
>>
endobj
179 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 168 0 R /XYZ 62.69291 644.0236 0 ] /Rect [ 205.3829 109.8236 240.3929 121.8236 ] /Subtype /Link /Type /Annot
>>
endobj
180 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 663.0236 0 ] /Rect [ 469.0827 109.8236 530.2227 121.8236 ] /Subtype /Link /Type /Annot
>>
endobj
181 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 191 0 R /XYZ 62.69291 663.0236 0 ] /Rect [ 62.69291 97.82362 100.4829 109.8236 ] /Subtype /Link /Type /Annot
>>
endobj
182 0 obj
<<
/Annots [ 176 0 R 177 0 R 178 0 R 179 0 R 180 0 R 181 0 R ] /Contents 264 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
183 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://directory.fsf.org/wiki/Libelf)
>> /Border [ 0 0 0 ] /Rect [ 459.2029 201.0236 479.7629 213.0236 ] /Subtype /Link /Type /Annot
>>
endobj
184 0 obj
<<
/A <<
/S /URI /Type /Action /URI (http://man7.org/linux/man-pages/man2/ptrace.2.html)
>> /Border [ 0 0 0 ] /Rect [ 258.1179 183.0236 298.1279 195.0236 ] /Subtype /Link /Type /Annot
>>
endobj
185 0 obj
<<
/Annots [ 183 0 R 184 0 R ] /Contents 265 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
186 0 obj
<<
/A <<
/S /URI /Type /Action /URI (http://refspecs.linuxbase.org/elf/elf.pdf)
>> /Border [ 0 0 0 ] /Rect [ 263.2452 576.0236 317.5804 588.0236 ] /Subtype /Link /Type /Annot
>>
endobj
187 0 obj
<<
/Annots [ 186 0 R ] /Contents 266 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
188 0 obj
<<
/A <<
/S /URI /Type /Action /URI (http://articles.manugarg.com/aboutelfauxiliaryvectors)
>> /Border [ 0 0 0 ] /Rect [ 147.0069 447.0236 220.6682 459.0236 ] /Subtype /Link /Type /Annot
>>
endobj
189 0 obj
<<
/Annots [ 188 0 R ] /Contents 267 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
190 0 obj
<<
/Contents 268 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
191 0 obj
<<
/Contents 269 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
192 0 obj
<<
/Contents 270 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
193 0 obj
<<
/Contents 271 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
194 0 obj
<<
/Contents 272 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
195 0 obj
<<
/Contents 273 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
196 0 obj
<<
/Contents 274 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
197 0 obj
<<
/Contents 275 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
198 0 obj
<<
/Border [ 0 0 0 ] /Contents () /Dest [ 163 0 R /XYZ 62.69291 527.0236 0 ] /Rect [ 276.2828 411.4236 321.3028 423.4236 ] /Subtype /Link /Type /Annot
>>
endobj
199 0 obj
<<
/Annots [ 198 0 R ] /Contents 276 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 253 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
200 0 obj
<<
/Outlines 202 0 R /PageLabels 277 0 R /PageMode /UseNone /Pages 253 0 R /Type /Catalog
>>
endobj
201 0 obj
<<
/Author () /CreationDate (D:20170616134800-02'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20170616134800-02'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title () /Trapped /False
>>
endobj
202 0 obj
<<
/Count 65 /First 203 0 R /Last 231 0 R /Type /Outlines
>>
endobj
203 0 obj
<<
/Count 4 /Dest [ 13 0 R /XYZ 62.69291 765.0236 0 ] /First 204 0 R /Last 205 0 R /Next 208 0 R /Parent 202 0 R 
  /Title (LibCare)
>>
endobj
204 0 obj
<<
/Dest [ 13 0 R /XYZ 62.69291 672.0236 0 ] /Next 205 0 R /Parent 203 0 R /Title (Sample samples/server)
>>
endobj
205 0 obj
<<
/Count 2 /Dest [ 21 0 R /XYZ 62.69291 154.6236 0 ] /First 206 0 R /Last 207 0 R /Parent 203 0 R /Prev 204 0 R 
  /Title (RHEL7 glibc sample)
>>
endobj
206 0 obj
<<
/Dest [ 28 0 R /XYZ 62.69291 717.0236 0 ] /Next 207 0 R /Parent 205 0 R /Title (Preparing environment)
>>
endobj
207 0 obj
<<
/Dest [ 28 0 R /XYZ 62.69291 279.2236 0 ] /Parent 205 0 R /Prev 206 0 R /Title (Building and applying the patch)
>>
endobj
208 0 obj
<<
/Count 2 /Dest [ 151 0 R /XYZ 62.69291 501.0236 0 ] /First 209 0 R /Last 210 0 R /Next 211 0 R /Parent 202 0 R 
  /Prev 203 0 R /Title (Installation and dependencies)
>>
endobj
209 0 obj
<<
/Dest [ 151 0 R /XYZ 62.69291 432.0236 0 ] /Next 210 0 R /Parent 208 0 R /Title (Dependencies)
>>
endobj
210 0 obj
<<
/Dest [ 151 0 R /XYZ 62.69291 297.6236 0 ] /Parent 208 0 R /Prev 209 0 R /Title (Building libcare)
>>
endobj
211 0 obj
<<
/Count 11 /Dest [ 163 0 R /XYZ 62.69291 765.0236 0 ] /First 212 0 R /Last 218 0 R /Next 223 0 R /Parent 202 0 R 
  /Prev 208 0 R /Title (Overview)
>>
endobj
212 0 obj
<<
/Count 2 /Dest [ 163 0 R /XYZ 62.69291 624.0236 0 ] /First 213 0 R /Last 214 0 R /Next 215 0 R /Parent 211 0 R 
  /Title (Patch preparation)
>>
endobj
213 0 obj
<<
/Dest [ 163 0 R /XYZ 62.69291 546.0236 0 ] /Next 214 0 R /Parent 212 0 R /Title (Building originals)
>>
endobj
214 0 obj
<<
/Dest [ 163 0 R /XYZ 62.69291 363.0236 0 ] /Parent 212 0 R /Prev 213 0 R /Title (Building patches)
>>
endobj
215 0 obj
<<
/Count 2 /Dest [ 168 0 R /XYZ 62.69291 765.0236 0 ] /First 216 0 R /Last 217 0 R /Next 218 0 R /Parent 211 0 R 
  /Prev 212 0 R /Title (Project patch building)
>>
endobj
216 0 obj
<<
/Dest [ 168 0 R /XYZ 62.69291 663.0236 0 ] /Next 217 0 R /Parent 215 0 R /Title (Using kpmake)
>>
endobj
217 0 obj
<<
/Dest [ 170 0 R /XYZ 62.69291 765.0236 0 ] /Parent 215 0 R /Prev 216 0 R /Title (Building patch for a package via scripts/pkgbuild)
>>
endobj
218 0 obj
<<
/Count 4 /Dest [ 170 0 R /XYZ 62.69291 480.0236 0 ] /First 219 0 R /Last 222 0 R /Parent 211 0 R /Prev 215 0 R 
  /Title (The Doctor: kpatch_user)
>>
endobj
219 0 obj
<<
/Dest [ 170 0 R /XYZ 62.69291 371.6236 0 ] /Next 220 0 R /Parent 218 0 R /Title (Applying patches via patch)
>>
endobj
220 0 obj
<<
/Dest [ 170 0 R /XYZ 62.69291 165.4236 0 ] /Next 221 0 R /Parent 218 0 R /Prev 219 0 R /Title (Cancelling patches via unpatch)
>>
endobj
221 0 obj
<<
/Dest [ 175 0 R /XYZ 62.69291 765.0236 0 ] /Next 222 0 R /Parent 218 0 R /Prev 220 0 R /Title (Showing info via info)
>>
endobj
222 0 obj
<<
/Dest [ 175 0 R /XYZ 62.69291 708.0236 0 ] /Parent 218 0 R /Prev 221 0 R /Title (Patchlevel support)
>>
endobj
223 0 obj
<<
/Count 7 /Dest [ 175 0 R /XYZ 62.69291 627.0236 0 ] /First 224 0 R /Last 230 0 R /Next 231 0 R /Parent 202 0 R 
  /Prev 211 0 R /Title (Where To Start Hacking)
>>
endobj
224 0 obj
<<
/Count 5 /Dest [ 175 0 R /XYZ 62.69291 564.0236 0 ] /First 225 0 R /Last 229 0 R /Next 230 0 R /Parent 223 0 R 
  /Title (Project directory)
>>
endobj
225 0 obj
<<
/Count 3 /Dest [ 175 0 R /XYZ 62.69291 343.6236 0 ] /First 226 0 R /Last 228 0 R /Next 229 0 R /Parent 224 0 R 
  /Title (Test infrastructure ./tests)
>>
endobj
226 0 obj
<<
/Dest [ 182 0 R /XYZ 62.69291 545.8236 0 ] /Next 227 0 R /Parent 225 0 R /Title (Test flavors)
>>
endobj
227 0 obj
<<
/Dest [ 182 0 R /XYZ 62.69291 277.8236 0 ] /Next 228 0 R /Parent 225 0 R /Prev 226 0 R /Title (Adding or fixing a test)
>>
endobj
228 0 obj
<<
/Dest [ 185 0 R /XYZ 62.69291 729.0236 0 ] /Parent 225 0 R /Prev 227 0 R /Title (fastsleep.so)
>>
endobj
229 0 obj
<<
/Dest [ 185 0 R /XYZ 62.69291 663.0236 0 ] /Parent 224 0 R /Prev 225 0 R /Title (Intercept start of a new process by ./binfmt)
>>
endobj
230 0 obj
<<
/Dest [ 185 0 R /XYZ 62.69291 318.0236 0 ] /Parent 223 0 R /Prev 224 0 R /Title (Source directory src)
>>
endobj
231 0 obj
<<
/Count 21 /Dest [ 187 0 R /XYZ 62.69291 675.0236 0 ] /First 232 0 R /Last 244 0 R /Parent 202 0 R /Prev 223 0 R 
  /Title (How Does It Work)
>>
endobj
232 0 obj
<<
/Dest [ 187 0 R /XYZ 62.69291 612.0236 0 ] /Next 233 0 R /Parent 231 0 R /Title (Short Introduction to ELF)
>>
endobj
233 0 obj
<<
/Count 10 /Dest [ 189 0 R /XYZ 62.69291 729.0236 0 ] /First 234 0 R /Last 243 0 R /Next 244 0 R /Parent 231 0 R 
  /Prev 232 0 R /Title (Patching)
>>
endobj
234 0 obj
<<
/Dest [ 189 0 R /XYZ 62.69291 621.0236 0 ] /Next 235 0 R /Parent 233 0 R /Title (Attaching)
>>
endobj
235 0 obj
<<
/Dest [ 189 0 R /XYZ 62.69291 552.0236 0 ] /Next 236 0 R /Parent 233 0 R /Prev 234 0 R /Title (Execute Until Libraries Are Loaded)
>>
endobj
236 0 obj
<<
/Dest [ 189 0 R /XYZ 62.69291 423.0236 0 ] /Next 237 0 R /Parent 233 0 R /Prev 235 0 R /Title (Examine Application Object Files)
>>
endobj
237 0 obj
<<
/Dest [ 189 0 R /XYZ 62.69291 318.0236 0 ] /Next 238 0 R /Parent 233 0 R /Prev 236 0 R /Title (Locate Patches For Objects)
>>
endobj
238 0 obj
<<
/Dest [ 189 0 R /XYZ 62.69291 237.0236 0 ] /Next 239 0 R /Parent 233 0 R /Prev 237 0 R /Title (Applying Patches)
>>
endobj
239 0 obj
<<
/Count 2 /Dest [ 190 0 R /XYZ 62.69291 657.0236 0 ] /First 240 0 R /Last 241 0 R /Next 242 0 R /Parent 233 0 R 
  /Prev 238 0 R /Title (Applying Relocations)
>>
endobj
240 0 obj
<<
/Dest [ 190 0 R /XYZ 62.69291 630.0236 0 ] /Next 241 0 R /Parent 239 0 R /Title (Resolving symbols)
>>
endobj
241 0 obj
<<
/Dest [ 190 0 R /XYZ 62.69291 378.0236 0 ] /Parent 239 0 R /Prev 240 0 R /Title (Doing relocations)
>>
endobj
242 0 obj
<<
/Dest [ 190 0 R /XYZ 62.69291 234.0236 0 ] /Next 243 0 R /Parent 233 0 R /Prev 239 0 R /Title (Doctor injects the patch)
>>
endobj
243 0 obj
<<
/Dest [ 191 0 R /XYZ 62.69291 717.0236 0 ] /Parent 233 0 R /Prev 242 0 R /Title (Doctor exits)
>>
endobj
244 0 obj
<<
/Count 8 /Dest [ 191 0 R /XYZ 62.69291 660.0236 0 ] /First 245 0 R /Last 246 0 R /Parent 231 0 R /Prev 233 0 R 
  /Title (Manual Patch Creation)
>>
endobj
245 0 obj
<<
/Dest [ 191 0 R /XYZ 62.69291 554.8236 0 ] /Next 246 0 R /Parent 244 0 R /Title (Generating the kpatch assembler with kpatch_gensrc)
>>
endobj
246 0 obj
<<
/Count 6 /Dest [ 195 0 R /XYZ 62.69291 765.0236 0 ] /First 247 0 R /Last 252 0 R /Parent 244 0 R /Prev 245 0 R 
  /Title (Making a kpatch)
>>
endobj
247 0 obj
<<
/Dest [ 195 0 R /XYZ 62.69291 738.0236 0 ] /Next 248 0 R /Parent 246 0 R /Title (Removing non-kpatch sections with kpatch_strip&nbsp;--strip)
>>
endobj
248 0 obj
<<
/Dest [ 195 0 R /XYZ 62.69291 361.6236 0 ] /Next 249 0 R /Parent 246 0 R /Prev 247 0 R /Title (Fix up relocations)
>>
endobj
249 0 obj
<<
/Dest [ 196 0 R /XYZ 62.69291 352.6236 0 ] /Next 250 0 R /Parent 246 0 R /Prev 248 0 R /Title (Stripping extra information via strip&nbsp;--strip-unneeded)
>>
endobj
250 0 obj
<<
/Dest [ 196 0 R /XYZ 62.69291 245.4236 0 ] /Next 251 0 R /Parent 246 0 R /Prev 249 0 R /Title (Undoing offsets kpatch_strip&nbsp;--undo-link)
>>
endobj
251 0 obj
<<
/Dest [ 197 0 R /XYZ 62.69291 177.4236 0 ] /Next 252 0 R /Parent 246 0 R /Prev 250 0 R /Title (Adding meta-information with kpatch_make)
>>
endobj
252 0 obj
<<
/Dest [ 199 0 R /XYZ 62.69291 501.4236 0 ] /Parent 246 0 R /Prev 251 0 R /Title (Conclusion)
>>
endobj
253 0 obj
<<
/Count 23 /Kids [ 13 0 R 21 0 R 28 0 R 30 0 R 116 0 R 151 0 R 163 0 R 168 0 R 170 0 R 175 0 R 
  182 0 R 185 0 R 187 0 R 189 0 R 190 0 R 191 0 R 192 0 R 193 0 R 194 0 R 195 0 R 
  196 0 R 197 0 R 199 0 R ] /Type /Pages
>>
endobj
254 0 obj
<<
/Length 10706
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (LibCare) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 714.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .290542 Tw (Welcome to the LibCare project documentation. Our aim is to be able to patch any of your executables or) Tj T* 0 Tw (libraries at the run, so you don't have to restart your servers whenever a new wild CVE appears.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 684.0236 cm
q
BT 1 0 0 1 0 14 Tm .602927 Tw 12 TL /F1 10 Tf 0 0 0 rg (See how it ) Tj 0 0 .501961 rg (helps to patch) Tj 0 0 0 rg ( famous ) Tj 0 0 .501961 rg (GHOST) Tj 0 0 0 rg ( vulnerability resulting in a buffer overflow in the domain name) Tj T* 0 Tw (resolution subroutines of ) Tj /F3 10 Tf 0 0 0 rg (glibc) Tj /F1 10 Tf 0 0 0 rg (, skip to ) Tj 0 0 .501961 rg (Contents) Tj 0 0 0 rg ( or straight to the ) Tj 0 0 .501961 rg (installation guide) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 654.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Sample ) Tj /F3 15 Tf 0 0 0 rg (samples/server) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 612.0236 cm
q
BT 1 0 0 1 0 26 Tm 1.405697 Tw 12 TL /F1 10 Tf 0 0 0 rg (For instance, your backend developer made a typo during server development. This typo introduced a) Tj T* 0 Tw .663059 Tw (stack overflow vulnerability exploitable from the client side. Common automatic checks were disabled for) Tj T* 0 Tw (the sake of performance and now your server is vulnerable to anyone who can find the vulnerability.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 582.0236 cm
q
BT 1 0 0 1 0 14 Tm 2.199974 Tw 12 TL /F1 10 Tf 0 0 0 rg (The sample code is in ) Tj /F3 10 Tf 0 0 0 rg (samples/server/server.c) Tj /F1 10 Tf 0 0 0 rg ( where function ) Tj /F3 10 Tf 0 0 0 rg (handle_connection) Tj /F1 10 Tf 0 0 0 rg ( supplies) Tj T* 0 Tw (wrong buffer size to the ) Tj /F3 10 Tf 0 0 0 rg (recv\(2\)) Tj /F1 10 Tf 0 0 0 rg ( at line 24:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 464.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 108 re B*
Q
q
.960784 .960784 .862745 rg
n 0 84 24 12 re f*
.960784 .960784 .862745 rg
n 30 84 102 12 re f*
.960784 .960784 .862745 rg
n 132 84 6 12 re f*
.960784 .960784 .862745 rg
n 138 84 18 12 re f*
.960784 .960784 .862745 rg
n 162 84 24 12 re f*
.960784 .960784 .862745 rg
n 186 84 6 12 re f*
.960784 .960784 .862745 rg
n 0 72 6 12 re f*
.960784 .960784 .862745 rg
n 48 60 24 12 re f*
.960784 .960784 .862745 rg
n 78 60 18 12 re f*
.960784 .960784 .862745 rg
n 96 60 6 12 re f*
.960784 .960784 .862745 rg
n 102 60 12 12 re f*
.960784 .960784 .862745 rg
n 114 60 12 12 re f*
.960784 .960784 .862745 rg
n 48 36 6 12 re f*
.960784 .960784 .862745 rg
n 54 36 24 12 re f*
.960784 .960784 .862745 rg
n 78 36 6 12 re f*
.960784 .960784 .862745 rg
n 90 36 24 12 re f*
.960784 .960784 .862745 rg
n 114 36 6 12 re f*
.960784 .960784 .862745 rg
n 120 36 24 12 re f*
.960784 .960784 .862745 rg
n 144 36 6 12 re f*
.960784 .960784 .862745 rg
n 156 36 18 12 re f*
.960784 .960784 .862745 rg
n 174 36 6 12 re f*
.960784 .960784 .862745 rg
n 186 36 18 12 re f*
.960784 .960784 .862745 rg
n 204 36 6 12 re f*
.960784 .960784 .862745 rg
n 216 36 6 12 re f*
.960784 .960784 .862745 rg
n 222 36 12 12 re f*
.960784 .960784 .862745 rg
n 240 36 84 12 re f*
.960784 .960784 .862745 rg
n 48 24 42 12 re f*
.960784 .960784 .862745 rg
n 90 24 6 12 re f*
.960784 .960784 .862745 rg
n 96 24 36 12 re f*
.960784 .960784 .862745 rg
n 132 24 6 12 re f*
.960784 .960784 .862745 rg
n 144 24 42 12 re f*
.960784 .960784 .862745 rg
n 186 24 12 12 re f*
.960784 .960784 .862745 rg
n 198 24 6 12 re f*
.960784 .960784 .862745 rg
n 204 24 6 12 re f*
.960784 .960784 .862745 rg
n 216 24 18 12 re f*
.960784 .960784 .862745 rg
n 234 24 12 12 re f*
.960784 .960784 .862745 rg
n 48 12 30 12 re f*
.960784 .960784 .862745 rg
n 78 12 6 12 re f*
.960784 .960784 .862745 rg
n 84 12 24 12 re f*
.960784 .960784 .862745 rg
n 108 12 12 12 re f*
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 86 Tm 12 TL /F3 10 Tf .690196 0 .25098 rg (void) Tj 0 0 0 rg ( ) Tj 0 0 1 rg (handle_connection) Tj 0 0 0 rg (\() Tj .690196 0 .25098 rg (int) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (sock) Tj 0 0 0 rg (\)) Tj 0 0 0 rg  T* 0 0 0 rg ({) Tj 0 0 0 rg  T* (        ) Tj .690196 0 .25098 rg (char) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (buf) Tj 0 0 0 rg ([) Tj .4 .4 .4 rg (16) Tj 0 0 0 rg (];) Tj 0 0 0 rg  T*  T* (        ) Tj 0 0 0 rg (\() Tj .690196 0 .25098 rg (void) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (recv) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sock) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (buf) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (128) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (0) Tj 0 0 0 rg (\);) Tj 0 0 0 rg ( ) Tj /F4 10 Tf .25098 .501961 .501961 rg (// bug is here) Tj T* /F3 10 Tf 0 0 0 rg (        ) Tj 0 0 0 rg (fprintf) Tj 0 0 0 rg (\() Tj 0 0 0 rg (stdout) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ("Got %s) Tj /F5 10 Tf .733333 .4 .133333 rg (\\n) Tj /F3 10 Tf .729412 .129412 .129412 rg (") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (buf) Tj 0 0 0 rg (\);) Tj 0 0 0 rg  T* (        ) Tj 0 0 0 rg (close) Tj 0 0 0 rg (\() Tj 0 0 0 rg (sock) Tj 0 0 0 rg (\);) Tj 0 0 0 rg  T* 0 0 0 rg (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 450.8236 cm
Q
q
1 0 0 1 62.69291 450.8236 cm
Q
q
1 0 0 1 62.69291 438.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Build the original server and run it:) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 438.8236 cm
Q
q
1 0 0 1 62.69291 432.8236 cm
Q
q
1 0 0 1 62.69291 371.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 60 re B*
Q
q
.960784 .960784 .862745 rg
n 0 36 6 12 re f*
.960784 .960784 .862745 rg
n 12 36 12 12 re f*
.960784 .960784 .862745 rg
n 0 24 6 12 re f*
.960784 .960784 .862745 rg
n 90 24 42 12 re f*
.960784 .960784 .862745 rg
n 132 24 6 12 re f*
.960784 .960784 .862745 rg
n 0 12 378 12 re f*
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( ) Tj 0 .501961 0 rg (cd) Tj 0 0 0 rg ( samples/server) Tj T* /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( make install ) Tj .098039 .090196 .486275 rg (DESTDIR) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg (vuln) Tj T* .501961 .501961 .501961 rg (cc -o server server.c -fno-stack-protector -fomit-frame-pointer) Tj T* /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( ./vuln/server) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 371.6236 cm
Q
q
1 0 0 1 62.69291 365.6236 cm
Q
q
1 0 0 1 62.69291 365.6236 cm
Q
q
1 0 0 1 62.69291 341.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .393318 Tw 12 TL /F1 10 Tf 0 0 0 rg (Now let's install dependencies and build utils. Refer to ) Tj 0 0 .501961 rg (installation) Tj 0 0 0 rg ( for more details on the installation) Tj T* 0 Tw (procedure and supported OSes.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 341.6236 cm
Q
q
1 0 0 1 62.69291 335.6236 cm
Q
q
1 0 0 1 62.69291 254.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 69.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For RHEL-based distros do:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 492 60 re B*
Q
q
.960784 .960784 .862745 rg
n 0 36 6 12 re f*
.960784 .960784 .862745 rg
n 0 24 18 12 re f*
.960784 .960784 .862745 rg
n 0 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 18 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( sudo yum install -y binutils elfutils elfutils-libelf-devel nc libunwind-devel) Tj T* .501961 .501961 .501961 rg (...) Tj T* /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( make -C ../../src) Tj T* .501961 .501961 .501961 rg (...) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 254.4236 cm
Q
q
1 0 0 1 62.69291 248.4236 cm
Q
q
1 0 0 1 62.69291 167.2236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 69.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (For Debian-based distros do:) Tj T* ET
Q
Q
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 510 60 re B*
Q
q
.960784 .960784 .862745 rg
n 0 36 6 12 re f*
.960784 .960784 .862745 rg
n 0 24 18 12 re f*
.960784 .960784 .862745 rg
n 0 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 18 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( sudo apt-get install -y binutils elfutils libelf-dev netcat-openbsd libunwind-dev) Tj T* .501961 .501961 .501961 rg (...) Tj T* /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( make -C ../../src) Tj T* .501961 .501961 .501961 rg (...) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 167.2236 cm
Q
q
1 0 0 1 62.69291 161.2236 cm
Q
q
1 0 0 1 62.69291 161.2236 cm
Q
q
1 0 0 1 62.69291 149.2236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Try to connect to the server using freshly installed ) Tj 0 0 .501961 rg (netcat) Tj 0 0 0 rg (:) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 149.2236 cm
Q
q
1 0 0 1 62.69291 143.2236 cm
Q
q
1 0 0 1 62.69291 106.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 36 re B*
Q
q
.960784 .960784 .862745 rg
n 0 12 6 12 re f*
.960784 .960784 .862745 rg
n 12 12 24 12 re f*
.960784 .960784 .862745 rg
n 42 12 30 12 re f*
.960784 .960784 .862745 rg
n 78 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 18 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( ) Tj 0 .501961 0 rg (echo) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ("Hi!") Tj 0 0 0 rg ( ) Tj 0 0 0 rg (|) Tj 0 0 0 rg ( nc localhost 3345) Tj T* .501961 .501961 .501961 rg (Hi!) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 106.0236 cm
Q
q
1 0 0 1 62.69291 100.0236 cm
Q
q
1 0 0 1 62.69291 88.02362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The server should print on its console:) Tj T* ET
Q
Q
q
Q
Q
 
endstream
endobj
255 0 obj
<<
/Length 8694
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 727.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 442.6898 36 re B*
Q
q
.960784 .960784 .862745 rg
n 0 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 42 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( ./vuln/server) Tj T* .501961 .501961 .501961 rg (Got Hi!) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 727.8236 cm
Q
q
1 0 0 1 62.69291 721.8236 cm
Q
q
1 0 0 1 62.69291 721.8236 cm
Q
q
1 0 0 1 62.69291 667.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 26 Tm 1.198735 Tw 12 TL /F1 10 Tf 0 0 0 rg (Now exploit the server via the ) Tj /F3 10 Tf 0 0 0 rg (hack.sh) Tj /F1 10 Tf 0 0 0 rg ( script. The script analyzes binary and builds a string that) Tj T* 0 Tw 1.246651 Tw (causes server's buffer to overflow. The string rewrites return address stored on the stack with the) Tj T* 0 Tw (address of ) Tj /F3 10 Tf 0 0 0 rg (you_hacked_me) Tj /F1 10 Tf 0 0 0 rg ( function, which prints "You hacked me!" as a server.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Open another console and run ) Tj /F3 10 Tf 0 0 0 rg (./hack.sh) Tj /F1 10 Tf 0 0 0 rg ( there:) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 667.8236 cm
Q
q
1 0 0 1 62.69291 661.8236 cm
Q
q
1 0 0 1 62.69291 527.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 109.2 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 24 re B*
Q
q
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( ./hack.sh) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 83.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Server console should print:) Tj T* ET
Q
Q
q
1 0 0 1 20 26 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 48 re B*
Q
q
.501961 .501961 .501961 rg
BT 1 0 0 1 0 26 Tm /F3 10 Tf 12 TL (Got 0123456789ABCDEF01234567@) Tj T* (You hacked me!) Tj T*  T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (This sample emulates a packaged binary network server vulnerable to ) Tj 0 0 .501961 rg (return-to-libc attack) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 527.4236 cm
Q
q
1 0 0 1 62.69291 521.4236 cm
Q
q
1 0 0 1 62.69291 521.4236 cm
Q
q
1 0 0 1 62.69291 509.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Now build the patch for this code via ) Tj 0 0 .501961 rg (kpmake) Tj 0 0 0 rg (:) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 509.4236 cm
Q
q
1 0 0 1 62.69291 503.4236 cm
Q
q
1 0 0 1 62.69291 416.2236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 38 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 48 re B*
Q
q
.960784 .960784 .862745 rg
n 0 24 6 12 re f*
.960784 .960784 .862745 rg
n 0 12 18 12 re f*
.960784 .960784 .862745 rg
n 0 0 372 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( ../../src/kpmake --clean server.patch) Tj T* .501961 .501961 .501961 rg (...) Tj T* (patch for $HOME/libcare/samples/server/kpmake/server is in ...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm .479983 Tw 12 TL /F1 10 Tf 0 0 0 rg (Please note that this overwrites ) Tj /F3 10 Tf 0 0 0 rg (./server) Tj /F1 10 Tf 0 0 0 rg ( binary file with a patch-containing file, storing the original) Tj T* 0 Tw (vulnerable server into ) Tj /F3 10 Tf 0 0 0 rg (./kpmake/server) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 416.2236 cm
Q
q
1 0 0 1 62.69291 410.2236 cm
Q
q
1 0 0 1 62.69291 410.2236 cm
Q
q
1 0 0 1 62.69291 398.2236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Examine ) Tj /F3 10 Tf 0 0 0 rg (patchroot) Tj /F1 10 Tf 0 0 0 rg ( directory and find patches there:) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 398.2236 cm
Q
q
1 0 0 1 62.69291 392.2236 cm
Q
q
1 0 0 1 62.69291 355.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 36 re B*
Q
q
.960784 .960784 .862745 rg
n 0 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 282 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( ls patchroot) Tj T* .501961 .501961 .501961 rg (2d0e03e41bd82ec8b840a973077932cb2856a5ec.kpatch) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 355.0236 cm
Q
q
1 0 0 1 62.69291 349.0236 cm
Q
q
1 0 0 1 62.69291 349.0236 cm
Q
q
1 0 0 1 62.69291 337.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Apply patch to the running application via ) Tj 0 0 .501961 rg (kpatch_user) Tj 0 0 0 rg (:) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 337.0236 cm
Q
q
1 0 0 1 62.69291 331.0236 cm
Q
q
1 0 0 1 62.69291 281.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 48 re B*
Q
q
.960784 .960784 .862745 rg
n 0 24 6 12 re f*
.960784 .960784 .862745 rg
n 216 24 12 12 re f*
.960784 .960784 .862745 rg
n 300 24 6 12 re f*
.960784 .960784 .862745 rg
n 0 12 18 12 re f*
.960784 .960784 .862745 rg
n 0 0 366 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( ../../src/kpatch_user -v patch -p ) Tj /F5 10 Tf 0 .501961 0 rg ($\() Tj /F3 10 Tf 0 0 0 rg (pidof server) Tj /F5 10 Tf 0 .501961 0 rg (\)) Tj /F3 10 Tf 0 0 0 rg ( patchroot) Tj T* .501961 .501961 .501961 rg (...) Tj T* (1 patch hunk\(s\) have been successfully applied to PID '31209') Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 281.8236 cm
Q
q
1 0 0 1 62.69291 275.8236 cm
Q
q
1 0 0 1 62.69291 275.8236 cm
Q
q
1 0 0 1 62.69291 263.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (8.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (And check the hack again, ) Tj /F3 10 Tf 0 0 0 rg (You) Tj ( ) Tj (hacked) Tj ( ) Tj (me!) Tj /F1 10 Tf 0 0 0 rg ( string should go away:) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 263.8236 cm
Q
q
1 0 0 1 62.69291 257.8236 cm
Q
q
1 0 0 1 62.69291 208.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 2 Tm  T* ET
q
1 0 0 1 20 0 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 448.6898 48 re B*
Q
q
.960784 .960784 .862745 rg
n 0 24 72 12 re f*
.960784 .960784 .862745 rg
n 0 12 72 12 re f*
.960784 .960784 .862745 rg
n 78 12 168 12 re f*
.960784 .960784 .862745 rg
n 0 0 126 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 .501961 rg (\(console2\) $) Tj /F3 10 Tf 0 0 0 rg ( ./hack.sh) Tj T* /F5 10 Tf 0 0 .501961 rg (\(console1\) $) Tj /F3 10 Tf 0 0 0 rg ( ) Tj /F4 10 Tf .25098 .501961 .501961 rg (# with running ./vuln/server) Tj T* /F3 10 Tf .501961 .501961 .501961 rg (Got 0123456789ABCDEF@) Tj T* ET
Q
Q
Q
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 208.6236 cm
Q
q
1 0 0 1 62.69291 166.6236 cm
q
BT 1 0 0 1 0 26 Tm 1.16061 Tw 12 TL /F1 10 Tf 0 0 0 rg (Congratulations on going through the sample! Go on and learn how the magic of ) Tj 0 0 .501961 rg (kpmake) Tj 0 0 0 rg ( script works,) Tj T* 0 Tw .432846 Tw (read how the patch is ) Tj 0 0 .501961 rg (built under the hood) Tj 0 0 0 rg ( and how it is applied by the ) Tj 0 0 .501961 rg (kpatch_user) Tj 0 0 0 rg (. Or even jump to our) Tj T* 0 Tw 0 0 .501961 rg (hacking guide) Tj 0 0 0 rg (!) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 136.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (RHEL7 ) Tj /F3 15 Tf 0 0 0 rg (glibc) Tj /F2 15 Tf 0 0 0 rg ( sample) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 106.6236 cm
q
BT 1 0 0 1 0 14 Tm .66881 Tw 12 TL /F1 10 Tf 0 0 0 rg (Most of the binaries in the system are coming from distribution packages so building patches for them is) Tj T* 0 Tw (different from the above. Here is how to do it.) Tj T* ET
Q
Q
 
endstream
endobj
256 0 obj
<<
/Length 7271
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
q
BT 1 0 0 1 0 26 Tm .789982 Tw 12 TL /F1 10 Tf 0 0 0 rg (This example builds ) Tj /F3 10 Tf 0 0 0 rg (glibc) Tj /F1 10 Tf 0 0 0 rg ( patch for an old fashioned CVE-2015-0235 ) Tj 0 0 .501961 rg (GHOST) Tj 0 0 0 rg ( vulnerability for RHEL7.) Tj T* 0 Tw 14.21907 Tw (The build is done using ) Tj 0 0 .501961 rg (scripts/pkgbuild) Tj 0 0 0 rg ( and package files are stored in) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (packages/rhel7/glibc/glibc-2.17-55.el7) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 702.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Preparing environment) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 684.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (First, we need the exact versions of tools and libs. Let's build a ) Tj 0 0 .501961 rg (Docker) Tj 0 0 0 rg ( image and a container for it:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 590.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
.960784 .960784 .862745 rg
n 0 60 6 12 re f*
.960784 .960784 .862745 rg
n 348 60 6 12 re f*
.960784 .960784 .862745 rg
n 0 48 276 12 re f*
.960784 .960784 .862745 rg
n 0 36 18 12 re f*
.960784 .960784 .862745 rg
n 0 24 6 12 re f*
.960784 .960784 .862745 rg
n 330 24 6 12 re f*
.960784 .960784 .862745 rg
n 0 12 318 12 re f*
.960784 .960784 .862745 rg
n 0 0 78 12 re f*
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( docker build docker/kernelcare/centos7/gcc-4.8.2-16.el7 ) Tj /F5 10 Tf .733333 .4 .133333 rg (\\) Tj T* /F3 10 Tf .501961 .501961 .501961 rg (        -t kernelcare/centos7:gcc-4.8.2-16.el7) Tj T* (...) Tj T* /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( docker run -v $PWD:/libcare --cap-add SYS_PTRACE -it ) Tj /F5 10 Tf .733333 .4 .133333 rg (\\) Tj T* /F3 10 Tf .501961 .501961 .501961 rg (        kernelcare/centos7:gcc-4.8.2-16.el7 /bin/bash) Tj T* /F5 10 Tf 0 0 .501961 rg ([root@... /]#) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 570.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now, from inside the container let's install vulnerable version of glibc:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 501.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
.960784 .960784 .862745 rg
n 0 36 78 12 re f*
.960784 .960784 .862745 rg
n 258 36 6 12 re f*
.960784 .960784 .862745 rg
n 354 36 6 12 re f*
.960784 .960784 .862745 rg
n 0 24 306 12 re f*
.960784 .960784 .862745 rg
n 0 12 348 12 re f*
.960784 .960784 .862745 rg
n 0 0 18 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ([root@... /]#) Tj /F3 10 Tf 0 0 0 rg ( yum downgrade -y --enablerepo) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg (C7.0.1406-base ) Tj /F5 10 Tf .733333 .4 .133333 rg (\\) Tj T* /F3 10 Tf .501961 .501961 .501961 rg (        glibc-2.17-55.el7 glibc-devel-2.17-55.el7 \\) Tj T* (        glibc-headers-2.17-55.el7 glibc-common-2.17-55.el7) Tj T* (...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 481.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Build the ) Tj /F3 10 Tf 0 0 0 rg (libcare) Tj /F1 10 Tf 0 0 0 rg ( tools:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 436.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
.960784 .960784 .862745 rg
n 0 12 78 12 re f*
.960784 .960784 .862745 rg
n 270 12 6 12 re f*
.960784 .960784 .862745 rg
n 276 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 18 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ([root@... /]#) Tj /F3 10 Tf 0 0 0 rg ( make -C /libcare/src clean all ) Tj .4 .4 .4 rg (&) Tj (&) Tj 0 0 0 rg ( make -C /libcare/execve) Tj T* .501961 .501961 .501961 rg (...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 392.4236 cm
q
BT 1 0 0 1 0 26 Tm .136654 Tw 12 TL /F1 10 Tf 0 0 0 rg (Now build and run the sample GHOST app that runs 16 threads to constantly check whether the ) Tj /F3 10 Tf 0 0 0 rg (glibc) Tj /F1 10 Tf 0 0 0 rg ( is) Tj T* 0 Tw .88561 Tw (vulnerable to ) Tj 0 0 .501961 rg (GHOST) Tj 0 0 0 rg ( and prints a dot every time it detects a buffer overflow in the ) Tj /F3 10 Tf 0 0 0 rg (gethostbyname_r) Tj /F1 10 Tf 0 0 0 rg  T* 0 Tw (function. The downgraded ) Tj /F3 10 Tf 0 0 0 rg (glibc) Tj /F1 10 Tf 0 0 0 rg ( is vulnerable:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 311.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
.960784 .960784 .862745 rg
n 0 48 78 12 re f*
.960784 .960784 .862745 rg
n 84 48 12 12 re f*
.960784 .960784 .862745 rg
n 0 36 102 12 re f*
.960784 .960784 .862745 rg
n 0 24 18 12 re f*
.960784 .960784 .862745 rg
n 0 12 102 12 re f*
.960784 .960784 .862745 rg
n 0 0 84 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ([root@... /]#) Tj /F3 10 Tf 0 0 0 rg ( ) Tj 0 .501961 0 rg (cd) Tj 0 0 0 rg ( /libcare/samples/ghost) Tj T* /F5 10 Tf 0 0 .501961 rg ([root@... ghost]#) Tj /F3 10 Tf 0 0 0 rg ( make) Tj T* .501961 .501961 .501961 rg (...) Tj T* /F5 10 Tf 0 0 .501961 rg ([root@... ghost]#) Tj /F3 10 Tf 0 0 0 rg ( ./GHOST) Tj T* .501961 .501961 .501961 rg (............^C) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 291.2236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Press Ctrl+C to get your console back and let's start building the patch for ) Tj /F3 10 Tf 0 0 0 rg (glibc) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 264.2236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Building and applying the patch) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 246.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The build is done in two stages.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 204.2236 cm
q
BT 1 0 0 1 0 26 Tm .744985 Tw 12 TL /F1 10 Tf 0 0 0 rg (First, the original package build is repeated with all the ) Tj 0 0 .501961 rg (intermediate assembly files) Tj 0 0 0 rg ( stored and saved for) Tj T* 0 Tw .197765 Tw (later. This greatly helps to speed up builds against the same base code. Run the following from inside our) Tj T* 0 Tw (docker container to pre-build ) Tj /F3 10 Tf 0 0 0 rg (glibc) Tj /F1 10 Tf 0 0 0 rg ( package:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 147.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 498 48 re B*
Q
q
.960784 .960784 .862745 rg
n 0 24 78 12 re f*
.960784 .960784 .862745 rg
n 84 24 12 12 re f*
.960784 .960784 .862745 rg
n 0 12 120 12 re f*
.960784 .960784 .862745 rg
n 0 0 18 12 re f*
BT 1 0 0 1 0 26 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ([root@... /]#) Tj /F3 10 Tf 0 0 0 rg ( ) Tj 0 .501961 0 rg (cd) Tj 0 0 0 rg ( /libcare/) Tj T* /F5 10 Tf 0 0 .501961 rg ([root@... /libcare]#) Tj /F3 10 Tf 0 0 0 rg ( ./scripts/pkgbuild -p packages/rhel7/glibc/glibc-2.17-55.el7) Tj T* .501961 .501961 .501961 rg (...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 115.0236 cm
q
BT 1 0 0 1 0 14 Tm .084651 Tw 12 TL /F1 10 Tf 0 0 0 rg (This should download the package, do a regular RPM build with ) Tj /F3 10 Tf 0 0 0 rg (kpatch_cc) Tj /F1 10 Tf 0 0 0 rg ( wrapper substituted for GCC) Tj T* 0 Tw (and store the pre-built data into the archive under ) Tj /F3 10 Tf 0 0 0 rg (/kcdata) Tj /F1 10 Tf 0 0 0 rg ( directory:) Tj T* ET
Q
Q
 
endstream
endobj
257 0 obj
<<
/Length 6005
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 727.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
.960784 .960784 .862745 rg
n 0 12 120 12 re f*
.960784 .960784 .862745 rg
n 0 0 420 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ([root@... /libcare]#) Tj /F3 10 Tf 0 0 0 rg ( ls /kcdata) Tj T* .501961 .501961 .501961 rg (build.orig-glibc-2.17-55.el7.x86_64.rpm.tgz  glibc-2.17-55.el7.src.rpm) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 695.8236 cm
q
BT 1 0 0 1 0 14 Tm 1.001163 Tw 12 TL /F1 10 Tf 0 0 0 rg (Now let's build the patch, the output will be verbose since it contains tests run by the ) Tj /F3 10 Tf 0 0 0 rg (kp_patch_test) Tj /F1 10 Tf 0 0 0 rg  T* 0 Tw (defined in ) Tj /F3 10 Tf 0 0 0 rg (packages/rhel7/glibc/glibc-2.17-55.el7/info) Tj /F1 10 Tf 0 0 0 rg (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 626.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 480 60 re B*
Q
q
.960784 .960784 .862745 rg
n 0 36 120 12 re f*
.960784 .960784 .862745 rg
n 0 24 18 12 re f*
.960784 .960784 .862745 rg
n 0 12 120 12 re f*
.960784 .960784 .862745 rg
n 0 0 258 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ([root@... /libcare]#) Tj /F3 10 Tf 0 0 0 rg ( ./scripts/pkgbuild packages/rhel7/glibc/glibc-2.17-55.el7) Tj T* .501961 .501961 .501961 rg (...) Tj T* /F5 10 Tf 0 0 .501961 rg ([root@... /libcare]#) Tj /F3 10 Tf 0 0 0 rg ( ls /kcdata/kpatch*) Tj T* .501961 .501961 .501961 rg (/kcdata/kpatch-glibc-2.17-55.el7.x86_64.tgz) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 606.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Unwrap patches and run the ) Tj 0 0 .501961 rg (GHOST) Tj 0 0 0 rg ( sample:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 537.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
.960784 .960784 .862745 rg
n 0 36 120 12 re f*
.960784 .960784 .862745 rg
n 126 36 12 12 re f*
.960784 .960784 .862745 rg
n 0 24 114 12 re f*
.960784 .960784 .862745 rg
n 0 12 114 12 re f*
.960784 .960784 .862745 rg
n 366 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 114 12 re f*
.960784 .960784 .862745 rg
n 120 0 66 12 re f*
.960784 .960784 .862745 rg
n 186 0 6 12 re f*
.960784 .960784 .862745 rg
n 192 0 12 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ([root@... /libcare]#) Tj /F3 10 Tf 0 0 0 rg ( ) Tj 0 .501961 0 rg (cd) Tj 0 0 0 rg ( /kcdata) Tj T* /F5 10 Tf 0 0 .501961 rg ([root@... /kcdata]#) Tj /F3 10 Tf 0 0 0 rg ( tar xf kpatch*) Tj T* /F5 10 Tf 0 0 .501961 rg ([root@... /kcdata]#) Tj /F3 10 Tf 0 0 0 rg ( /libcare/samples/ghost/GHOST 2) Tj (>) Tj (/dev/null ) Tj 0 0 0 rg (&) Tj 0 0 0 rg  T* /F5 10 Tf 0 0 .501961 rg ([root@... /kcdata]#) Tj /F3 10 Tf 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (patient_pid) Tj .4 .4 .4 rg (=) Tj .098039 .090196 .486275 rg ($!) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 517.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (And, finally, patch it. All the threads of the sample must stop when the GHOST vulnerability is patched:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 424.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
.960784 .960784 .862745 rg
n 0 60 114 12 re f*
.960784 .960784 .862745 rg
n 420 60 6 12 re f*
.960784 .960784 .862745 rg
n 0 48 312 12 re f*
.960784 .960784 .862745 rg
n 0 36 18 12 re f*
.960784 .960784 .862745 rg
n 0 24 354 12 re f*
.960784 .960784 .862745 rg
n 0 12 114 12 re f*
.960784 .960784 .862745 rg
n 0 0 360 12 re f*
.960784 .960784 .862745 rg
n 360 0 6 12 re f*
.960784 .960784 .862745 rg
n 366 0 60 12 re f*
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ([root@... /kcdata]#) Tj /F3 10 Tf 0 0 0 rg ( /libcare/src/kpatch_user -v patch -p $patient_pid ) Tj /F5 10 Tf .733333 .4 .133333 rg (\\) Tj T* /F3 10 Tf .501961 .501961 .501961 rg (                root/kpatch-glibc-2.17-55.el7.x86_64) Tj T* (...) Tj T* (1 patch hunk\(s\) have been successfully applied to PID '...') Tj T* (\(Press Enter again\)) Tj T* ([1]+  Done                    /libcare/samples/ghost/GHOST 2) Tj (>) Tj ( /dev/null) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 404.2236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (You can patch any running application this way:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 311.0236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 84 re B*
Q
q
.960784 .960784 .862745 rg
n 0 60 114 12 re f*
.960784 .960784 .862745 rg
n 156 60 18 12 re f*
.960784 .960784 .862745 rg
n 180 60 6 12 re f*
.960784 .960784 .862745 rg
n 0 48 114 12 re f*
.960784 .960784 .862745 rg
n 120 48 66 12 re f*
.960784 .960784 .862745 rg
n 186 48 6 12 re f*
.960784 .960784 .862745 rg
n 192 48 12 12 re f*
.960784 .960784 .862745 rg
n 0 36 114 12 re f*
.960784 .960784 .862745 rg
n 420 36 6 12 re f*
.960784 .960784 .862745 rg
n 0 24 312 12 re f*
.960784 .960784 .862745 rg
n 0 12 18 12 re f*
.960784 .960784 .862745 rg
n 0 0 354 12 re f*
BT 1 0 0 1 0 62 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ([root@... /kcdata]#) Tj /F3 10 Tf 0 0 0 rg ( sleep ) Tj .4 .4 .4 rg (100) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (&) Tj 0 0 0 rg  T* /F5 10 Tf 0 0 .501961 rg ([root@... /kcdata]#) Tj /F3 10 Tf 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (patient_pid) Tj .4 .4 .4 rg (=) Tj .098039 .090196 .486275 rg ($!) Tj 0 0 0 rg  T* /F5 10 Tf 0 0 .501961 rg ([root@... /kcdata]#) Tj /F3 10 Tf 0 0 0 rg ( /libcare/src/kpatch_user -v patch -p $patient_pid ) Tj /F5 10 Tf .733333 .4 .133333 rg (\\) Tj T* /F3 10 Tf .501961 .501961 .501961 rg (                root/kpatch-glibc-2.17-55.el7.x86_64) Tj T* (...) Tj T* (1 patch hunk\(s\) have been successfully applied to PID '...') Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 291.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Congratulations on finishing this rather confusing sample!) Tj T* ET
Q
Q
 
endstream
endobj
258 0 obj
<<
/Length 9195
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Contents) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 90.02362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 633 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (LibCare) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 633 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 615 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Sample ) Tj /F3 10 Tf 0 0 0 rg (samples/server) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 615 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (1) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 597 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (RHEL7 ) Tj /F3 10 Tf 0 0 0 rg (glibc) Tj /F1 10 Tf 0 0 .501961 rg ( sample) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 597 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (2) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 579 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Preparing environment) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 579 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (3) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 561 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Building and applying the patch) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 561 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (3) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 543 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (Installation and dependencies) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 543 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (6) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 525 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Dependencies) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 525 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (6) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 507 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Building ) Tj /F3 10 Tf 0 0 0 rg (libcare) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 507 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (6) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 489 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (Overview) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 489 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 66.44 0 Td (7) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 471 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 20 2 Tm /F1 10 Tf 12 TL (Patch preparation) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 471 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (7) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 453 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Building originals) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 453 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (7) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 435 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Building patches) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 435 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (7) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 417 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Project patch building) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 417 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (8) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 399 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Using ) Tj /F3 10 Tf 0 0 0 rg (kpmake) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 399 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (8) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 381 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Building patch for a package via ) Tj /F3 10 Tf 0 0 0 rg (scripts/pkgbuild) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 381 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (9) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 363 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (The Doctor: ) Tj /F3 10 Tf 0 0 0 rg (kpatch_user) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 363 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (9) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 345 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Applying patches via ) Tj /F3 10 Tf 0 0 0 rg (patch) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 345 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (9) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 327 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Cancelling patches via ) Tj /F3 10 Tf 0 0 0 rg (unpatch) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 327 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 66.44 0 Td (9) Tj T* -66.44 0 Td ET
Q
Q
q
1 0 0 1 0 309 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Showing info via ) Tj /F3 10 Tf 0 0 0 rg (info) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 309 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 291 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Patchlevel support) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 291 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 273 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (Where To Start Hacking) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 273 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 255 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Project directory) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 255 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Test infrastructure ) Tj /F3 10 Tf 0 0 0 rg (./tests) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 237 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (10) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Test flavors) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 219 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Adding or fixing a test) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 201 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (11) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (fastsleep.so) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 183 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Intercept start of a new process by ) Tj /F3 10 Tf 0 0 0 rg (./binfmt) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 165 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Source directory ) Tj /F3 10 Tf 0 0 0 rg (src) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 147 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (12) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F2 10 Tf 0 0 .501961 rg (How Does It Work) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 129 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 60.88 0 Td (13) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Short Introduction to ELF) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 111 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (13) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Patching) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 93 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (14) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Attaching) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 75 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (14) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Execute Until Libraries Are Loaded) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 57 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (14) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Examine Application Object Files) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 39 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (14) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Locate Patches For Objects) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 21 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (14) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Applying Patches) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (14) Tj T* -60.88 0 Td ET
Q
Q
q
Q
Q
 
endstream
endobj
259 0 obj
<<
/Length 7911
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 513.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 0 237 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Applying Relocations) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 237 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (15) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 219 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Resolving symbols) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 219 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (15) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 201 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Doing relocations) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 201 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (15) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 183 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Doctor injects the patch) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 183 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (15) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 165 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Doctor exits) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 165 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (16) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 147 cm
q
BT 1 0 0 1 20 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Manual Patch Creation) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 147 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (16) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 129 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Generating the kpatch assembler with ) Tj /F3 10 Tf 0 0 0 rg (kpatch_gensrc) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 129 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (16) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 111 cm
q
BT 1 0 0 1 40 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Making a kpatch) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 111 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 93 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Removing non-kpatch sections with ) Tj /F3 10 Tf 0 0 0 rg (kpatch_strip) Tj ( ) Tj (--strip) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 93 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 75 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Fix up relocations) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 75 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (20) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 57 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Stripping extra information via ) Tj /F3 10 Tf 0 0 0 rg (strip) Tj ( ) Tj (--strip-unneeded) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 57 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (21) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 39 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Undoing offsets ) Tj /F3 10 Tf 0 0 0 rg (kpatch_strip) Tj ( ) Tj (--undo-link) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 39 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (21) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 21 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Adding meta-information with ) Tj /F3 10 Tf 0 0 0 rg (kpatch_make) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 21 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (22) Tj T* -60.88 0 Td ET
Q
Q
q
1 0 0 1 0 3 cm
q
BT 1 0 0 1 60 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Conclusion) Tj T* ET
Q
Q
q
1 0 0 1 397.8898 3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 60.88 0 Td (23) Tj T* -60.88 0 Td ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 480.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Installation and dependencies) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 462.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (All the Linux-distros with available ) Tj /F3 10 Tf 0 0 0 rg (libunwind) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F3 10 Tf 0 0 0 rg (elfutils) Tj /F1 10 Tf 0 0 0 rg ( and ) Tj /F3 10 Tf 0 0 0 rg (binutils) Tj /F1 10 Tf 0 0 0 rg ( packages are supported.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 444.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (However, the ) Tj /F3 10 Tf 0 0 0 rg (libcare) Tj /F1 10 Tf 0 0 0 rg ( is only tested on Ubuntu from 12.04 to 16.04 and on CentOS from 6.8 to 7.3.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 414.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Dependencies) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 396.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To install the dependencies on RHEL/CentOS do the following:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 362.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 492 24 re B*
Q
q
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( sudo yum install -y binutils elfutils elfutils-libelf-devel nc libunwind-devel) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 342.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To install the dependencies on Debian/Ubuntu do the following:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 309.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 510 24 re B*
Q
q
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( sudo apt-get install -y binutils elfutils libelf-dev netcat-openbsd libunwind-dev) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 279.6236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Building ) Tj /F3 15 Tf 0 0 0 rg (libcare) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 261.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (To build ) Tj /F3 10 Tf 0 0 0 rg (libcare) Tj /F1 10 Tf 0 0 0 rg ( emit at project's root dir:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 216.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
.960784 .960784 .862745 rg
n 0 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 18 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( make -C src) Tj T* .501961 .501961 .501961 rg (...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 196.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This should build all the utilities required to produce a patch out of some project's source code.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 166.4236 cm
q
BT 1 0 0 1 0 14 Tm .204985 Tw 12 TL /F1 10 Tf 0 0 0 rg (It is highly recommended to run the tests as well, enabling Doctor ) Tj /F3 10 Tf 0 0 0 rg (kpatch_user) Tj /F1 10 Tf 0 0 0 rg ( to attach ) Tj /F3 10 Tf 0 0 0 rg (ptrace) Tj /F1 10 Tf 0 0 0 rg (cles to) Tj T* 0 Tw (any of the processes first:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 97.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
.960784 .960784 .862745 rg
n 0 36 6 12 re f*
.960784 .960784 .862745 rg
n 0 24 6 12 re f*
.960784 .960784 .862745 rg
n 96 24 6 12 re f*
.960784 .960784 .862745 rg
n 102 24 6 12 re f*
.960784 .960784 .862745 rg
n 114 24 24 12 re f*
.960784 .960784 .862745 rg
n 0 12 18 12 re f*
.960784 .960784 .862745 rg
n 0 0 12 12 re f*
BT 1 0 0 1 0 38 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( sudo setcap cap_sys_ptrace+ep ./src/kpatch_user) Tj T* /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( make -C tests ) Tj .4 .4 .4 rg (&) Tj (&) Tj 0 0 0 rg ( ) Tj 0 .501961 0 rg (echo) Tj 0 0 0 rg ( OK) Tj T* .501961 .501961 .501961 rg (...) Tj T* (OK) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 77.22362 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Now all the required tools are built and we can build some patches. Skip to ) Tj 0 0 .501961 rg (sample) Tj 0 0 0 rg ( for that.) Tj T* ET
Q
Q
 
endstream
endobj
260 0 obj
<<
/Length 7521
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 744.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Overview) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 690.0236 cm
q
BT 1 0 0 1 0 38 Tm 2.121412 Tw 12 TL /F1 10 Tf 0 0 0 rg (First, we ) Tj 0 0 .501961 rg (prepare project patch) Tj 0 0 0 rg ( by ) Tj 0 0 .501961 rg (examining the differences in assembler files) Tj 0 0 0 rg ( generated during the) Tj T* 0 Tw 2.129269 Tw (original and the patched source code build. Finally, users invoke the ) Tj /F3 10 Tf 0 0 0 rg (kpatch_user) Tj /F1 10 Tf 0 0 0 rg ( that ) Tj 0 0 .501961 rg (applies the) Tj T* 0 Tw .701163 Tw (patches) Tj 0 0 0 rg (. This is a lot like loading a shared object \(library\) into other process memory and then changing) Tj T* 0 Tw (original code to unconditionally jump to the new version of the code.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 684.0236 cm
Q
q
1 0 0 1 62.69291 684.0236 cm
Q
q
1 0 0 1 62.69291 672.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (Patch preparation) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 666.0236 cm
Q
q
1 0 0 1 62.69291 654.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Project patch building) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 648.0236 cm
Q
q
1 0 0 1 62.69291 636.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Patch application) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 636.0236 cm
Q
q
1 0 0 1 62.69291 606.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 3 Tm /F2 15 Tf 18 TL (Patch preparation) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 576.0236 cm
q
BT 1 0 0 1 0 14 Tm .43229 Tw 12 TL /F1 10 Tf 0 0 0 rg (Binary patches are built from augmented assembly files. Augmented files are made via ) Tj /F3 10 Tf 0 0 0 rg (kpatch_gensrc) Tj /F1 10 Tf 0 0 0 rg  T* 0 Tw (which notes the difference in assembly files produced from the original and the patched source code.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 558.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (This is done in two steps, both are described detailed in ) Tj 0 0 .501961 rg (Manual Patch Creation) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 531.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Building originals) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 489.0236 cm
q
BT 1 0 0 1 0 26 Tm .213145 Tw 12 TL /F1 10 Tf 0 0 0 rg (First, the original code is built as is either by invoking ) Tj /F3 10 Tf 0 0 0 rg (make) Tj /F1 10 Tf 0 0 0 rg ( directly or by the packaging system. The build) Tj T* 0 Tw 3.838314 Tw (is done with compiler substituted to ) Tj /F3 10 Tf 0 0 0 rg (kpatch_cc) Tj /F1 10 Tf 0 0 0 rg ( wrapper. Wrapper's behaviour is configured via) Tj T* 0 Tw (environment variables.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 435.0236 cm
q
BT 1 0 0 1 0 38 Tm .815814 Tw 12 TL /F1 10 Tf 0 0 0 rg (When ) Tj /F3 10 Tf 0 0 0 rg (kpatch_cc) Tj /F1 10 Tf 0 0 0 rg ( is invoked with ) Tj /F3 10 Tf 0 0 0 rg (KPATCH_STAGE=original) Tj /F1 10 Tf 0 0 0 rg ( it simply builds the project while keeping) Tj T* 0 Tw 2.012196 Tw (intermediate assembly files under the name ) Tj /F3 10 Tf 0 0 0 rg (.kpatch_${filename}.original.s) Tj /F1 10 Tf 0 0 0 rg ( invoking the real) Tj T* 0 Tw .200514 Tw (compiler twice: first with the ) Tj /F3 10 Tf 0 0 0 rg (-S) Tj /F1 10 Tf 0 0 0 rg ( flag to produce the assembly files from the original code and then with the) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (-c) Tj /F1 10 Tf 0 0 0 rg ( flag to produce object files out of these intermediate assembly files.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 393.0236 cm
q
BT 1 0 0 1 0 26 Tm 1.519318 Tw 12 TL /F1 10 Tf 0 0 0 rg (Project binaries built during the ) Tj /F3 10 Tf 0 0 0 rg (original) Tj /F1 10 Tf 0 0 0 rg ( stage are stashed and later used in the patch preparation.) Tj T* 0 Tw .816651 Tw (When building patches for a package from distribution the objects built during ) Tj /F3 10 Tf 0 0 0 rg (original) Tj /F1 10 Tf 0 0 0 rg ( stage must be) Tj T* 0 Tw (compatible with those from the distro's binary package.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 375.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Assembly files resulting from the correct ) Tj /F3 10 Tf 0 0 0 rg (original) Tj /F1 10 Tf 0 0 0 rg ( build can be stored to speed up patch builds later on.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 348.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Building patches) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 318.0236 cm
q
BT 1 0 0 1 0 14 Tm 1.676235 Tw 12 TL /F1 10 Tf 0 0 0 rg (Next, source code patches are applied and the build is redone. This time the ) Tj /F3 10 Tf 0 0 0 rg (kpatch_cc) Tj /F1 10 Tf 0 0 0 rg ( wrapper is) Tj T* 0 Tw (instructed by environment variable ) Tj /F3 10 Tf 0 0 0 rg (KPATCH_STAGE=patched) Tj /F1 10 Tf 0 0 0 rg ( to build a special patch-containing object.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 252.0236 cm
q
BT 1 0 0 1 0 50 Tm .306098 Tw 12 TL /F1 10 Tf 0 0 0 rg (Wrapper first calls real compiler with ) Tj /F3 10 Tf 0 0 0 rg (-S) Tj /F1 10 Tf 0 0 0 rg ( flag to produce an assembly file for the patched version, which is) Tj T* 0 Tw 4.137752 Tw (stored under file name ) Tj /F3 10 Tf 0 0 0 rg (.kpatch_${filename}.patched.s) Tj /F1 10 Tf 0 0 0 rg (. It then calls ) Tj /F3 10 Tf 0 0 0 rg (kpatch_gensrc) Tj /F1 10 Tf 0 0 0 rg ( that) Tj T* 0 Tw .651412 Tw (compares original and patched files and produces a patch-containing assembly where all the changes in) Tj T* 0 Tw .274987 Tw (the code are put in the ) Tj /F3 10 Tf 0 0 0 rg (.kpatch) Tj /F1 10 Tf 0 0 0 rg (-prefixed sections while original code is left as is. This assembly is finally) Tj T* 0 Tw (compiled to a patch-containing object file by calling compiler with the ) Tj /F3 10 Tf 0 0 0 rg (-c) Tj /F1 10 Tf 0 0 0 rg ( flag.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 210.0236 cm
q
BT 1 0 0 1 0 26 Tm .045868 Tw 12 TL /F1 10 Tf 0 0 0 rg (Linking done by the project build system carries these sections to the target binary and shared object files.) Tj T* 0 Tw .523735 Tw (During the link stage ) Tj /F3 10 Tf 0 0 0 rg (kpatch_cc) Tj /F1 10 Tf 0 0 0 rg ( adds ) Tj /F3 10 Tf 0 0 0 rg (ld) Tj /F1 10 Tf 0 0 0 rg ( argument ) Tj /F3 10 Tf 0 0 0 rg (-q) Tj /F1 10 Tf 0 0 0 rg ( that instructs linker to keep information about all) Tj T* 0 Tw (the relocations. This is required for the ) Tj 0 0 .501961 rg (Patch application) Tj 0 0 0 rg ( to \(dynamically\) link patch into running binary.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 180.0236 cm
q
BT 1 0 0 1 0 14 Tm .19561 Tw 12 TL /F1 10 Tf 0 0 0 rg (Then the sanity check is done, checking that the symbols originating from the non-) Tj /F3 10 Tf 0 0 0 rg (kpatch) Tj /F1 10 Tf 0 0 0 rg ( sections in the) Tj T* 0 Tw (patched binary are equal to those from the original binary or its debuginfo.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 138.0236 cm
q
BT 1 0 0 1 0 26 Tm 1.728443 Tw 12 TL /F1 10 Tf 0 0 0 rg (The last part is postprocessing the patch-containing binaries: stripping off the original binary sections,) Tj T* 0 Tw -0.022682 Tw (fixing relocations and prepending the resulting ELF content with a common kpatch header. Look at ) Tj 0 0 .501961 rg (Making) Tj T* 0 Tw (a kpatch) Tj 0 0 0 rg ( for details.) Tj T* ET
Q
Q
 
endstream
endobj
261 0 obj
<<
/Length 8084
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 747.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Project patch building) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 705.0236 cm
q
BT 1 0 0 1 0 26 Tm 1.86561 Tw 12 TL /F1 10 Tf 0 0 0 rg (The above algorithm is implemented in two various helper scripts. The first is ) Tj /F3 10 Tf 0 0 0 rg (kpmake) Tj /F1 10 Tf 0 0 0 rg ( that can build) Tj T* 0 Tw .80561 Tw (patches for any project buildable via ) Tj /F3 10 Tf 0 0 0 rg (make) Tj /F1 10 Tf 0 0 0 rg ( and the second aims at building patches for applications and) Tj T* 0 Tw (libraries coming from distribution packages ) Tj /F3 10 Tf 0 0 0 rg (scripts/pkgbuild) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 675.0236 cm
q
BT 1 0 0 1 0 14 Tm 2.159983 Tw 12 TL /F1 10 Tf 0 0 0 rg (Both are using ) Tj 0 0 .501961 rg (kpatch_cc) Tj 0 0 0 rg ( wrapper described below. It is recommended to go through ) Tj 0 0 .501961 rg (Manual Patch) Tj T* 0 Tw (Creation) Tj 0 0 0 rg ( at least once.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 648.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Using ) Tj /F3 12.5 Tf 0 0 0 rg (kpmake) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 618.0236 cm
q
BT 1 0 0 1 0 14 Tm 9.593555 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (kpmake) Tj /F1 10 Tf 0 0 0 rg ( script can be used to build patches for a project built locally via) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (./configure) Tj ( ) Tj (&) Tj (&) Tj ( ) Tj (make) Tj ( ) Tj (&) Tj (&) Tj ( ) Tj (make) Tj ( ) Tj (install) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 588.0236 cm
q
BT 1 0 0 1 0 14 Tm -0.061065 Tw 12 TL /F1 10 Tf 0 0 0 rg (The usage is simple, just call ) Tj /F3 10 Tf 0 0 0 rg (kpmake) Tj /F1 10 Tf 0 0 0 rg ( with a list of source patches as arguments and ) Tj /F3 10 Tf 0 0 0 rg (kpmake) Tj /F1 10 Tf 0 0 0 rg ( will build the) Tj T* 0 Tw (binary patches and store them to ) Tj /F3 10 Tf 0 0 0 rg (patchroot) Tj /F1 10 Tf 0 0 0 rg ( directory.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 570.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (kpmake) Tj /F1 10 Tf 0 0 0 rg ( requires the following simple criteria to be met on the build system:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 564.0236 cm
Q
q
1 0 0 1 62.69291 564.0236 cm
Q
q
1 0 0 1 62.69291 540.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm -0.122012 Tw 12 TL /F1 10 Tf 0 0 0 rg (The default target SHOULD be the one that builds all the files in the project. This is by default the ) Tj /F3 10 Tf 0 0 0 rg (all) Tj /F1 10 Tf 0 0 0 rg  T* 0 Tw (target in most of the projects.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 534.0236 cm
Q
q
1 0 0 1 62.69291 498.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .553828 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (install) Tj /F1 10 Tf 0 0 0 rg ( target MUST install the project deliverativites into the directory specified as ) Tj /F3 10 Tf 0 0 0 rg (DESTDIR) Tj /F1 10 Tf 0 0 0 rg  T* 0 Tw 3.466136 Tw (environment variable. This is default for most projects. Other projects are either patched by) Tj T* 0 Tw (distributions to include that target or have it under a different environment variable.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 492.0236 cm
Q
q
1 0 0 1 62.69291 480.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (clean) Tj /F1 10 Tf 0 0 0 rg ( target SHOULD be the one that cleans the project.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 480.0236 cm
Q
q
1 0 0 1 62.69291 462.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The typical usage is the following for the ) Tj /F3 10 Tf 0 0 0 rg (configur) Tj /F1 10 Tf 0 0 0 rg (able project:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 224.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 228 re B*
Q
q
.960784 .960784 .862745 rg
n 0 204 6 12 re f*
.960784 .960784 .862745 rg
n 12 204 12 12 re f*
.960784 .960784 .862745 rg
n 0 192 6 12 re f*
.960784 .960784 .862745 rg
n 12 192 72 12 re f*
.960784 .960784 .862745 rg
n 84 192 6 12 re f*
.960784 .960784 .862745 rg
n 150 192 12 12 re f*
.960784 .960784 .862745 rg
n 162 192 6 12 re f*
.960784 .960784 .862745 rg
n 0 180 6 12 re f*
.960784 .960784 .862745 rg
n 0 168 132 12 re f*
.960784 .960784 .862745 rg
n 0 156 18 12 re f*
.960784 .960784 .862745 rg
n 0 144 234 12 re f*
.960784 .960784 .862745 rg
n 0 132 18 12 re f*
.960784 .960784 .862745 rg
n 0 120 168 12 re f*
.960784 .960784 .862745 rg
n 0 108 18 12 re f*
.960784 .960784 .862745 rg
n 0 96 174 12 re f*
.960784 .960784 .862745 rg
n 0 84 18 12 re f*
.960784 .960784 .862745 rg
n 0 72 126 12 re f*
.960784 .960784 .862745 rg
n 0 60 18 12 re f*
.960784 .960784 .862745 rg
n 0 48 138 12 re f*
.960784 .960784 .862745 rg
n 0 36 18 12 re f*
.960784 .960784 .862745 rg
n 0 24 84 12 re f*
.960784 .960784 .862745 rg
n 0 12 294 12 re f*
.960784 .960784 .862745 rg
n 0 0 18 12 re f*
BT 1 0 0 1 0 206 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( ) Tj 0 .501961 0 rg (cd) Tj 0 0 0 rg ( project_dir) Tj T* /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (KPATCH_STAGE) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg (configure ) Tj .098039 .090196 .486275 rg (CC) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg (kpatch_cc ./configure) Tj T* /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( kpmake first.patch second.patch) Tj T* .501961 .501961 .501961 rg (BUILDING ORIGINAL CODE) Tj T* (...) Tj T* (INSTALLING ORIGINAL OBJECTS INTO kpmake) Tj T* (...) Tj T* (applying patch ~/first.patch) Tj T* (...) Tj T* (applying patch ~/second.patch) Tj T* (...) Tj T* (BUILDING PATCHED CODE) Tj T* (...) Tj T* (INSTALLING PATCHED CODE) Tj T* (...) Tj T* (MAKING PATCHES) Tj T* (patch for foobar is in patchroot/${buildid}.patch) Tj T* (...) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 204.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Available options are:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 189.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 .1 .1 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (--help, -h) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 240.9449 3.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (display a short help,) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 162.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 14.8 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 .1 .1 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (--update) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 240.9449 3 cm
q
BT 1 0 0 1 0 14 Tm 1.459147 Tw 12 TL /F1 10 Tf 0 0 0 rg (just update the ) Tj /F3 10 Tf 0 0 0 rg (kpatches) Tj /F1 10 Tf 0 0 0 rg (. Useful when working) Tj T* 0 Tw (on the kpatch tools,) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 147.4236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 .1 .1 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (--clean) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 240.9449 3.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (invoke ) Tj /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (clean) Tj /F1 10 Tf 0 0 0 rg ( before building,) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 132.2236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 .1 .1 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (--srcdir DIR) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 240.9449 3.2 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (change to the ) Tj /F3 10 Tf 0 0 0 rg (DIR) Tj /F1 10 Tf 0 0 0 rg ( before applying patches.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 114.2236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Note that ) Tj /F3 10 Tf 0 0 0 rg (kpmake) Tj /F1 10 Tf 0 0 0 rg ( uses ) Tj /F3 10 Tf 0 0 0 rg (kpatch_cc) Tj /F1 10 Tf 0 0 0 rg ( under the hood. Read about it ) Tj 0 0 .501961 rg (kpatch_cc) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
 
endstream
endobj
262 0 obj
<<
/Length 7867
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 750.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Building patch for a package via ) Tj /F3 12.5 Tf 0 0 0 rg (scripts/pkgbuild) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 720.0236 cm
q
BT 1 0 0 1 0 14 Tm -0.013588 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (scripts/pkgbuild) Tj /F1 10 Tf 0 0 0 rg ( is responsible for the building of the patch and pre-building the original package) Tj T* 0 Tw (and assembly files. At the moment it only supports the building of the RPM-based packages.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 666.0236 cm
q
BT 1 0 0 1 0 38 Tm .583615 Tw 12 TL /F1 10 Tf 0 0 0 rg (Each package has its own directory ) Tj /F3 10 Tf 0 0 0 rg (packages/$distro/$package) Tj /F1 10 Tf 0 0 0 rg ( with different package versions as) Tj T* 0 Tw 8.635681 Tw (subdirectories. For instance, the directory ) Tj /F3 10 Tf 0 0 0 rg (packages/rhel7/glibc/) Tj /F1 10 Tf 0 0 0 rg ( contains subdirectory) Tj T* 0 Tw -0.124303 Tw /F3 10 Tf 0 0 0 rg (glibc-2.17-55.el7) Tj /F1 10 Tf 0 0 0 rg ( that has the configuration and scripts for building and testing of the sample security) Tj T* 0 Tw (patches for that version of ) Tj /F3 10 Tf 0 0 0 rg (glibc) Tj /F1 10 Tf 0 0 0 rg ( package for RHEL7.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 648.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The project directory contains three main files:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 642.0236 cm
Q
q
1 0 0 1 62.69291 642.0236 cm
Q
q
1 0 0 1 62.69291 582.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 45 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 50 Tm .456647 Tw 12 TL /F1 10 Tf 0 0 0 rg (Shell-sourceable ) Tj /F3 10 Tf 0 0 0 rg (info) Tj /F1 10 Tf 0 0 0 rg ( that has the necessary environment variables specified along with the hooks) Tj T* 0 Tw 2.847485 Tw (that can alter package just before the build and test patch before it is packed. For instance,) Tj T* 0 Tw 13.87395 Tw /F3 10 Tf 0 0 0 rg (packages/rhel7/glibc/glibc-2.17-55.el7/info) Tj /F1 10 Tf 0 0 0 rg ( contains both hooks and a) Tj T* 0 Tw .46284 Tw /F3 10 Tf 0 0 0 rg (kp_patch_test) Tj /F1 10 Tf 0 0 0 rg ( function that runs glibc test suite with each invocation being patched with the built) Tj T* 0 Tw (patch.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 576.0236 cm
Q
q
1 0 0 1 62.69291 552.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 2.50311 Tw 12 TL /F1 10 Tf 0 0 0 rg (The list ) Tj /F3 10 Tf 0 0 0 rg (plist) Tj /F1 10 Tf 0 0 0 rg ( of the patches to be applied. File names are relative to the top-level directory) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (patches) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 546.0236 cm
Q
q
1 0 0 1 62.69291 492.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 26 Tm .731976 Tw 12 TL /F1 10 Tf 0 0 0 rg (YAML file ) Tj /F3 10 Tf 0 0 0 rg (properties.yaml) Tj /F1 10 Tf 0 0 0 rg ( containing version-specific configuration, such as URLs for pre-build) Tj T* 0 Tw .915433 Tw (storage, original source packages URL, and Docker container images with toolchain \(GCC/binutils\)) Tj T* 0 Tw (version is required to properly build the package.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (This is not used at the moment and left as an information source for the users.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 492.0236 cm
Q
q
1 0 0 1 62.69291 462.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (The Doctor: ) Tj /F3 15 Tf 0 0 0 rg (kpatch_user) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 432.0236 cm
q
BT 1 0 0 1 0 14 Tm .736098 Tw 12 TL /F1 10 Tf 0 0 0 rg (All the job is done by the ) Tj /F3 10 Tf 0 0 0 rg (kpatch_user) Tj /F1 10 Tf 0 0 0 rg (. It is called ) Tj /F3 10 Tf 0 0 0 rg (doctor) Tj /F1 10 Tf 0 0 0 rg ( hereafter and the targets of operations are) Tj T* 0 Tw (thus called ) Tj /F3 10 Tf 0 0 0 rg (patients) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 414.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The doctor accepts a few arguments that are common for all types of operations:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 398.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 .1 .1 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (-v) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 240.9449 3.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (enable verbose output) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 383.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 .1 .1 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (-h) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 240.9449 3.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (show commands list) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 356.6236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Applying patches via ) Tj /F3 12.5 Tf 0 0 0 rg (patch) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 314.6236 cm
q
BT 1 0 0 1 0 26 Tm .439988 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (patch) Tj /F1 10 Tf 0 0 0 rg ( mode patches a process with ID given as an argument to ) Tj /F3 10 Tf 0 0 0 rg (-p) Tj /F1 10 Tf 0 0 0 rg ( option or all of them except self) Tj T* 0 Tw 1.955868 Tw (and ) Tj /F3 10 Tf 0 0 0 rg (init) Tj /F1 10 Tf 0 0 0 rg ( when the argument is ) Tj /F3 10 Tf 0 0 0 rg (all) Tj /F1 10 Tf 0 0 0 rg (. The patch \(or directory with patches\) to be applied should be) Tj T* 0 Tw (specified as the only positional argument:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 281.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( kpatch_user patch -p ) Tj (<) Tj (PID_or_all) Tj (>) Tj ( some_patch_file.kpatch) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 237.4236 cm
q
BT 1 0 0 1 0 26 Tm .595984 Tw 12 TL /F1 10 Tf 0 0 0 rg (The patches are basically ELF files of relocatable type ) Tj /F3 10 Tf 0 0 0 rg (REL) Tj /F1 10 Tf 0 0 0 rg ( with binary meta-information such as BuildID) Tj T* 0 Tw -0.08168 Tw (and name of the patch target prepended. Loading patches is thus a lot like loading a shared object \(library\)) Tj T* 0 Tw (into a process. Except we are puppeting it by strings going through a keyhole in other process' memory.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 195.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 26 Tm /F1 10 Tf 12 TL .145868 Tw (First, the memory near the original object is allocated, then all the relocations and symbols are resolved in) Tj T* 0 Tw .391163 Tw (a local copy of patch content. This pre-baked patch is copied to the patient's memory and, finally, original) Tj T* 0 Tw (functions are overwritten with the unconditional jumps to the patched version.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 177.4236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (For more details look at the chapter ) Tj 0 0 .501961 rg (Patching) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 150.4236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Cancelling patches via ) Tj /F3 12.5 Tf 0 0 0 rg (unpatch) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 108.4236 cm
q
BT 1 0 0 1 0 26 Tm .757984 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (unpatch) Tj /F1 10 Tf 0 0 0 rg ( mode makes doctor remove patches listed by target BuildID from the patients' memory. It) Tj T* 0 Tw .339398 Tw (simply restores the original code of the patched functions from a stash allocated along with the patch and) Tj T* 0 Tw (puppets patients to ) Tj /F3 10 Tf 0 0 0 rg (munmap) Tj /F1 10 Tf 0 0 0 rg ( the memory areas used by patches.) Tj T* ET
Q
Q
 
endstream
endobj
263 0 obj
<<
/Length 6737
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 750.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Showing info via ) Tj /F3 12.5 Tf 0 0 0 rg (info) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 720.0236 cm
q
BT 1 0 0 1 0 14 Tm .725542 Tw 12 TL /F1 10 Tf 0 0 0 rg (The last entry to the ) Tj /F3 10 Tf 0 0 0 rg (kpatch_user) Tj /F1 10 Tf 0 0 0 rg ( is the ) Tj /F3 10 Tf 0 0 0 rg (info) Tj /F1 10 Tf 0 0 0 rg ( command that lists all the objects and their BuildIDs for) Tj T* 0 Tw (the set of the processes requested. Its primary use is as the utility for the book-keeping software.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 693.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Patchlevel support) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 639.0236 cm
q
BT 1 0 0 1 0 38 Tm .722209 Tw 12 TL /F1 10 Tf 0 0 0 rg (Since patches to the objects such as libraries can be updated, there is a way to distinguish them, called) Tj T* 0 Tw .537485 Tw /F3 10 Tf 0 0 0 rg (patchlevel) Tj /F1 10 Tf 0 0 0 rg (. This information is parsed from the layout of the directory where the patches are stored. If) Tj T* 0 Tw .093988 Tw (on patching stage a patch with a bigger ) Tj /F3 10 Tf 0 0 0 rg (patchlevel) Tj /F1 10 Tf 0 0 0 rg ( is found, the old one is removed and the new one is) Tj T* 0 Tw (applied.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 606.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Where To Start Hacking) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 576.0236 cm
q
BT 1 0 0 1 0 14 Tm 2.187984 Tw 12 TL /F1 10 Tf 0 0 0 rg (For the impatient: the code is located in the ) Tj /F3 10 Tf 0 0 0 rg (src) Tj /F1 10 Tf 0 0 0 rg ( directory. Module responsible for the process-start) Tj T* 0 Tw (interception ) Tj /F3 10 Tf 0 0 0 rg (binfmt) Tj /F1 10 Tf 0 0 0 rg ( is located in its own directory. Tests are located in the ) Tj /F3 10 Tf 0 0 0 rg (tests) Tj /F1 10 Tf 0 0 0 rg ( directory.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 546.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Project directory) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 528.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The root directory contains project-level makefile. Run:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 494.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ make) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 474.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (and enjoy libcare being deployed on your machine.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 456.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (After that run tests by simply emitting:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 423.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ make tests) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 403.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The following is the project subdirectories:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 397.6236 cm
Q
q
1 0 0 1 62.69291 397.6236 cm
Q
q
1 0 0 1 62.69291 385.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 .501961 rg (tests) Tj 0 0 0 rg ( contains all the tests for the project and should be used as a sample for building the ) Tj /F3 10 Tf 0 0 0 rg (kpatch) Tj /F1 10 Tf 0 0 0 rg (es.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 379.6236 cm
Q
q
1 0 0 1 62.69291 355.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.513314 Tw 12 TL /F1 10 Tf 0 0 .501961 rg (binfmt) Tj 0 0 0 rg ( contains kcare-user specific implementation of the binary file format that overrides kernel's) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (elf_format) Tj /F1 10 Tf 0 0 0 rg ( and notifies about start-up of the binaries listed using ) Tj /F3 10 Tf 0 0 0 rg (/proc/ucare/applist) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 355.6236 cm
Q
q
1 0 0 1 62.69291 328.6236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Test infrastructure ) Tj /F3 12.5 Tf 0 0 0 rg (./tests) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 298.6236 cm
q
BT 1 0 0 1 0 14 Tm 1.057485 Tw 12 TL /F1 10 Tf 0 0 0 rg (This directory contains the tests and the infrastructure to run them. To keep the ) Tj /F3 10 Tf 0 0 0 rg (tests) Tj /F1 10 Tf 0 0 0 rg ( directory clean,) Tj T* 0 Tw (each test is placed in its own directory.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 280.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To run the tests emit:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 247.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL ($ make) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 215.4236 cm
q
BT 1 0 0 1 0 14 Tm 1.189988 Tw 12 TL /F1 10 Tf 0 0 0 rg (this will build and run all the tests discovered for all types of build and all flavors of the ) Tj /F3 10 Tf 0 0 0 rg (kpatch_user) Tj /F1 10 Tf 0 0 0 rg  T* 0 Tw (usage.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 197.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (There are two types of test builds.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 155.4236 cm
q
BT 1 0 0 1 0 26 Tm .700574 Tw 12 TL /F1 10 Tf 0 0 0 rg (The first one is the regular build done by manually emitting assembler files for both original and patched) Tj T* 0 Tw .081412 Tw (source files, and then applying ) Tj /F3 10 Tf 0 0 0 rg (kpatch_gensrc) Tj /F1 10 Tf 0 0 0 rg ( to them and compiling the result into a kpatch-containing) Tj T* 0 Tw (object where from it was extracted from by the utils, as described in ) Tj 0 0 .501961 rg (Manual Patch Creation) Tj 0 0 0 rg ( section.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 113.4236 cm
q
BT 1 0 0 1 0 26 Tm 1.892485 Tw 12 TL /F1 10 Tf 0 0 0 rg (The second one is the build done by the ) Tj /F3 10 Tf 0 0 0 rg (kpmake) Tj /F1 10 Tf 0 0 0 rg ( tool which uses ) Tj /F3 10 Tf 0 0 0 rg (kpatch_cc) Tj /F1 10 Tf 0 0 0 rg ( compiler wrapper, as) Tj T* 0 Tw -0.110569 Tw (described in ) Tj 0 0 .501961 rg (kpmake) Tj 0 0 0 rg ( section. The build results for each build type are placed in their own subfolder ina test) Tj T* 0 Tw (directory.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 83.42362 cm
q
BT 1 0 0 1 0 14 Tm 7.054269 Tw 12 TL /F1 10 Tf 0 0 0 rg (A test can be built with the particular build type using either ) Tj /F3 10 Tf 0 0 0 rg (make build-$test) Tj /F1 10 Tf 0 0 0 rg ( or) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (kpmake-$test) Tj /F1 10 Tf 0 0 0 rg ( commands.) Tj T* ET
Q
Q
 
endstream
endobj
264 0 obj
<<
/Length 8556
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
q
BT 1 0 0 1 0 26 Tm .071567 Tw 12 TL /F1 10 Tf 0 0 0 rg (Sometimes it is necessary to debug a particular test so all changes MUST retain the ability to run the tests) Tj T* 0 Tw .017984 Tw (manually. The manual run is done by executing an appropriate binary \(with the ) Tj /F3 10 Tf 0 0 0 rg (LD_LIBRARY_PATH) Tj /F1 10 Tf 0 0 0 rg ( set as) Tj T* 0 Tw (needed\) and target ) Tj /F3 10 Tf 0 0 0 rg (kpatch_user) Tj ( ) Tj (patch) Tj /F1 10 Tf 0 0 0 rg ( at its process.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 711.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (However, it is recommended to run tests by the ) Tj /F3 10 Tf 0 0 0 rg (./run_tests.sh) Tj /F1 10 Tf 0 0 0 rg ( script, available in the ) Tj /F3 10 Tf 0 0 0 rg (tests) Tj /F1 10 Tf 0 0 0 rg ( directory.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 693.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (run_tests.sh) Tj /F1 10 Tf 0 0 0 rg ( script accepts the following options:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 666.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 14.8 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 .1 .1 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (-f FLAVOR) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 240.9449 3 cm
q
BT 1 0 0 1 0 14 Tm 1.06561 Tw 12 TL /F1 10 Tf 0 0 0 rg (execute ) Tj /F3 10 Tf 0 0 0 rg (FLAVOR) Tj /F1 10 Tf 0 0 0 rg ( of tests from those listed in ) Tj 0 0 .501961 rg (test) Tj T* 0 Tw (flavors) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 603.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 50.8 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 .1 .1 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (-d DESTDIR) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 240.9449 3 cm
q
BT 1 0 0 1 0 50 Tm .599269 Tw 12 TL /F1 10 Tf 0 0 0 rg (assume that test binaries are located in ) Tj /F3 10 Tf 0 0 0 rg (DESTDIR) Tj /F1 10 Tf 0 0 0 rg  T* 0 Tw 1.044983 Tw (subdirectory of a test. The ) Tj /F3 10 Tf 0 0 0 rg (build) Tj /F1 10 Tf 0 0 0 rg ( subdirectory is) Tj T* 0 Tw 1.130542 Tw (a default one. Use ) Tj /F3 10 Tf 0 0 0 rg (kpmake) Tj /F1 10 Tf 0 0 0 rg ( to run the tests build) Tj T* 0 Tw 4.933555 Tw (with the kpmake with binaries stored in the) Tj T* 0 Tw (subdirectory with the same name.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 587.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 .1 .1 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (-v) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 240.9449 3.2 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (be verbose) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 557.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .274724 Tw (The only argument it accepts is a string with space separated names of tests to execute. The default is to) Tj T* 0 Tw (execute all the tests discovered.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 533.8236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (Test flavors) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 479.8236 cm
q
BT 1 0 0 1 0 38 Tm 1.80332 Tw 12 TL /F1 10 Tf 0 0 0 rg (There are the following test flavors. Most of the tests are executed in all flavors, it depends on what) Tj T* 0 Tw 2.321647 Tw /F3 10 Tf 0 0 0 rg (should_skip) Tj /F1 10 Tf 0 0 0 rg ( function of ) Tj /F3 10 Tf 0 0 0 rg (run_tests.sh) Tj /F1 10 Tf 0 0 0 rg ( returns. Some of the tests have different success criteria) Tj T* 0 Tw .461412 Tw (between different flavors: e.g. ) Tj /F3 10 Tf 0 0 0 rg (fail_*) Tj /F1 10 Tf 0 0 0 rg ( tests check that binary is succesfully patched upon execution with) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (test_patch_startup) Tj /F1 10 Tf 0 0 0 rg ( flavor.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 461.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The flavors are:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 445.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (test_patch_files) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 418.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm 2.026651 Tw 12 TL /F1 10 Tf 0 0 0 rg (\(default\) that simply executes a test process and points ) Tj /F3 10 Tf 0 0 0 rg (kpatch_ctl patch) Tj /F1 10 Tf 0 0 0 rg ( to it, doing so for) Tj T* 0 Tw (present patches for both binary and shared libraries.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 402.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (test_patch_dir) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 375.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm 6.729213 Tw 12 TL /F1 10 Tf 0 0 0 rg (that executes a test and patches it with a per-test patch-containing directory fed to) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (kpatch_ctl) Tj ( ) Tj (patch) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 359.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (test_patch_startup) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 332.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm .22436 Tw 12 TL /F1 10 Tf 0 0 0 rg (that starts a ) Tj /F3 10 Tf 0 0 0 rg (kcare_genl_sink) Tj /F1 10 Tf 0 0 0 rg ( helper that listens to notifications about a start of a listed binary and) Tj T* 0 Tw (executes ) Tj /F3 10 Tf 0 0 0 rg (kpatch_ctl) Tj ( ) Tj (patch) Tj /F1 10 Tf 0 0 0 rg ( with the directory containing patches for all the tests discovered.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 316.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F3 10 Tf 12 TL (test_patch_patchlevel) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 289.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 0 14 Tm  T* ET
q
1 0 0 1 20 0 cm
q
BT 1 0 0 1 0 14 Tm 1.445697 Tw 12 TL /F1 10 Tf 0 0 0 rg (that checks that ) Tj 0 0 .501961 rg (patchlevel) Tj 0 0 0 rg ( code works as expected. This applies two patches with different patch) Tj T* 0 Tw (levels to the ) Tj /F3 10 Tf 0 0 0 rg (patchlevel) Tj /F1 10 Tf 0 0 0 rg ( test and checks that the patching is done to the latest one.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 265.8236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (Adding or fixing a test) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 235.8236 cm
q
BT 1 0 0 1 0 14 Tm .041163 Tw 12 TL /F1 10 Tf 0 0 0 rg (Each test has its own directory that MUST have the file named ) Tj /F3 10 Tf 0 0 0 rg (desc) Tj /F1 10 Tf 0 0 0 rg ( which contains a one-line description) Tj T* 0 Tw (of the test. The ) Tj /F3 10 Tf 0 0 0 rg (desc) Tj /F1 10 Tf 0 0 0 rg ( files are used to discover the tests.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 181.8236 cm
q
BT 1 0 0 1 0 38 Tm 1.788735 Tw 12 TL /F1 10 Tf 0 0 0 rg (The makefile inside the test directory MUST compile the code into a binary. The binary name MUST) Tj T* 0 Tw .78811 Tw (coincide with the directory and test name, the library name \(if present\) must be equal to ) Tj /F3 10 Tf 0 0 0 rg (lib$test.so) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* 0 Tw -0.002367 Tw (The source code is typically called ) Tj /F3 10 Tf 0 0 0 rg ($test.c) Tj /F1 10 Tf 0 0 0 rg ( for the binary and ) Tj /F3 10 Tf 0 0 0 rg (lib$test.c) Tj /F1 10 Tf 0 0 0 rg ( for the library. Patch files are) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg ($test.diff) Tj /F1 10 Tf 0 0 0 rg ( and ) Tj /F3 10 Tf 0 0 0 rg (lib$test.diff) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 151.8236 cm
q
BT 1 0 0 1 0 14 Tm 1.056651 Tw 12 TL /F1 10 Tf 0 0 0 rg (When the above rules are followed the test can simply include ) Tj /F3 10 Tf 0 0 0 rg (../makefile.inc) Tj /F1 10 Tf 0 0 0 rg ( file that will provide) Tj T* 0 Tw (build system for all of the build types described above.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 85.82362 cm
q
BT 1 0 0 1 0 50 Tm .67816 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (tests/makefile.inc) Tj /F1 10 Tf 0 0 0 rg ( file itself includes either ) Tj /F3 10 Tf 0 0 0 rg (makefile-kpmake.inc) Tj /F1 10 Tf 0 0 0 rg ( file when the ) Tj /F3 10 Tf 0 0 0 rg (CC) Tj /F1 10 Tf 0 0 0 rg ( variable) Tj T* 0 Tw 1.238443 Tw (equals ) Tj /F3 10 Tf 0 0 0 rg (kpatch_cc) Tj /F1 10 Tf 0 0 0 rg ( or ) Tj /F3 10 Tf 0 0 0 rg (makefile-patch.inc) Tj /F1 10 Tf 0 0 0 rg ( otherwise. The former provides a set of rules that meet) Tj T* 0 Tw 2.359984 Tw /F3 10 Tf 0 0 0 rg (kpmake) Tj /F1 10 Tf 0 0 0 rg (s criteria described in ) Tj 0 0 .501961 rg (kpmake) Tj 0 0 0 rg (. The later provides a set of rules described in ) Tj 0 0 .501961 rg (Manual Patch) Tj T* 0 Tw 1.821235 Tw (Creation) Tj 0 0 0 rg (, except for the libraries output that is broken with them and requires including of a makefile) Tj T* 0 Tw .203555 Tw /F3 10 Tf 0 0 0 rg (makefile-patch-link.inc) Tj /F1 10 Tf 0 0 0 rg ( that links the shared library to extract proper names of the sections for the) Tj T* 0 Tw ET
Q
Q
 
endstream
endobj
265 0 obj
<<
/Length 8277
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
BT 1 0 0 1 0 14 Tm .143488 Tw 12 TL /F1 10 Tf 0 0 0 rg (kpatch. For the usage example take a look at the test ) Tj /F3 10 Tf 0 0 0 rg (both) Tj /F1 10 Tf 0 0 0 rg ( that tests patching of both binary and a library) Tj T* 0 Tw (it loads.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 717.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F3 10 Tf 0 0 0 rg (fastsleep.so) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 675.0236 cm
q
BT 1 0 0 1 0 26 Tm 2.606098 Tw 12 TL /F1 10 Tf 0 0 0 rg (To speed up test execution while allowing them to be run manually we had to adjust tests with a) Tj T* 0 Tw 1.765366 Tw /F3 10 Tf 0 0 0 rg (LD_PRELOAD) Tj /F1 10 Tf 0 0 0 rg (ed library that redefines ) Tj /F3 10 Tf 0 0 0 rg (sleep) Tj /F1 10 Tf 0 0 0 rg ( and ) Tj /F3 10 Tf 0 0 0 rg (nanosleep) Tj /F1 10 Tf 0 0 0 rg ( to change their arguments so the code) Tj T* 0 Tw (sleeps faster. The code is in the file ) Tj /F3 10 Tf 0 0 0 rg (fastsleep.c) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 648.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Intercept start of a new process by ) Tj /F3 12.5 Tf 0 0 0 rg (./binfmt) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 606.0236 cm
q
BT 1 0 0 1 0 26 Tm .829986 Tw 12 TL /F1 10 Tf 0 0 0 rg (The project must be able to patch a just executed process. This is required whenever updates have not) Tj T* 0 Tw .914987 Tw (been installed or to patch a process that can dynamically load via ) Tj /F3 10 Tf 0 0 0 rg (dlopen) Tj /F1 10 Tf 0 0 0 rg ( one of the shared library we) Tj T* 0 Tw (have a patch for.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 564.0236 cm
q
BT 1 0 0 1 0 26 Tm .251751 Tw 12 TL /F1 10 Tf 0 0 0 rg (This is implemented by a kernel module that inserts a handler for binary file format ) Tj /F3 10 Tf 0 0 0 rg (binfmt) Tj /F1 10 Tf 0 0 0 rg ( overriding the) Tj T* 0 Tw .627988 Tw (default one for the ELF file. The task of the ) Tj /F3 10 Tf 0 0 0 rg (binfmt) Tj /F1 10 Tf 0 0 0 rg ( is just to wrap the original functions provided by the) Tj T* 0 Tw (kernel and check whether the path of an executed binary is listed.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 522.0236 cm
q
BT 1 0 0 1 0 26 Tm 4.145697 Tw 12 TL /F1 10 Tf 0 0 0 rg (When it is the subscribed userspace, an application is notified by the Generic Netlink channel) Tj T* 0 Tw .579147 Tw (implemented by the kernel module. The sample application ) Tj /F3 10 Tf 0 0 0 rg (kcare_genl_sink) Tj /F1 10 Tf 0 0 0 rg ( provides an example on) Tj T* 0 Tw (how to implement userspace counterpart for the channel. It is also used for testing.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 504.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The main module function is the ) Tj /F3 10 Tf 0 0 0 rg (do_intercept_load) Tj /F1 10 Tf 0 0 0 rg ( in the file ) Tj /F3 10 Tf 0 0 0 rg (binfmt.c) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 462.0236 cm
q
BT 1 0 0 1 0 26 Tm 1.39811 Tw 12 TL /F1 10 Tf 0 0 0 rg (It checks if the path of an application being executed is listed in the file ) Tj /F3 10 Tf 0 0 0 rg (/proc/ucare/applist) Tj /F1 10 Tf 0 0 0 rg ( and) Tj T* 0 Tw 2.277126 Tw (therefore the execution should be intercepted. This list should contain ) Tj /F2 10 Tf (real) Tj /F1 10 Tf ( file paths without double) Tj T* 0 Tw (slashes, ) Tj /F3 10 Tf 0 0 0 rg (.) Tj /F1 10 Tf 0 0 0 rg ( or ) Tj /F3 10 Tf 0 0 0 rg (..) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 420.0236 cm
q
BT 1 0 0 1 0 26 Tm .182485 Tw 12 TL /F1 10 Tf 0 0 0 rg (To add an application write its path to ) Tj /F3 10 Tf 0 0 0 rg (/proc/ucare/applist) Tj /F1 10 Tf 0 0 0 rg ( file. Multiple paths can be added at once,) Tj T* 0 Tw .247356 Tw (separated by a newline character. To remove a path, write it with the minus sign prefixed. To clear the list) Tj T* 0 Tw (write magic ) Tj /F3 10 Tf 0 0 0 rg (-*) Tj /F1 10 Tf 0 0 0 rg ( to it.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 330.0236 cm
q
BT 1 0 0 1 0 74 Tm .737633 Tw 12 TL /F1 10 Tf 0 0 0 rg (If an execution needed to be intercepted as told by the aforementioned call, the ) Tj /F3 10 Tf 0 0 0 rg (binfmt) Tj /F1 10 Tf 0 0 0 rg ( module tries to) Tj T* 0 Tw .712619 Tw (notify about the new process by sending a message to the subscribed process, if any. If there is no one) Tj T* 0 Tw 2.89686 Tw (listening on the other side, the code just leaves the binary as is, continuing its normal execution.) Tj T* 0 Tw .15881 Tw (Otherwise, we enter an infinite loop waiting for the signal ) Tj /F3 10 Tf 0 0 0 rg (SIGSTOP) Tj /F1 10 Tf 0 0 0 rg ( to come, blocking all the other signals,) Tj T* 0 Tw 1.389213 Tw /F2 10 Tf (including) Tj /F1 10 Tf ( ) Tj /F3 10 Tf 0 0 0 rg (SIGKILL) Tj /F1 10 Tf 0 0 0 rg ( and ) Tj /F3 10 Tf 0 0 0 rg (SIGSEGV) Tj /F1 10 Tf 0 0 0 rg (. The ) Tj /F3 10 Tf 0 0 0 rg (doctor) Tj /F1 10 Tf 0 0 0 rg ( code executed by the subscribed application such as) Tj T* 0 Tw .94498 Tw /F3 10 Tf 0 0 0 rg (kcare_genl_sink) Tj /F1 10 Tf 0 0 0 rg ( that simply calls ) Tj /F3 10 Tf 0 0 0 rg (kpatch_user) Tj ( ) Tj (patch) Tj /F1 10 Tf 0 0 0 rg ( must attach to that newborn ) Tj /F3 10 Tf 0 0 0 rg (patient) Tj /F1 10 Tf 0 0 0 rg ( and) Tj T* 0 Tw (apply its remedies.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 300.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Source directory ) Tj /F3 15 Tf 0 0 0 rg (src) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 282.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (src) Tj /F1 10 Tf 0 0 0 rg ( directory contains libcare project code.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 264.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The following files are updated as a part of the project:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 258.0236 cm
Q
q
1 0 0 1 62.69291 258.0236 cm
Q
q
1 0 0 1 62.69291 234.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .377126 Tw 12 TL /F3 10 Tf 0 0 0 rg (src/kpatch_user.c) Tj /F1 10 Tf 0 0 0 rg ( has the top-level code for the user-space patching it uses code from the rest) Tj T* 0 Tw (of kpatch modules of kcare-user. The entry point is the ) Tj /F3 10 Tf 0 0 0 rg (cmd_patch_user) Tj /F1 10 Tf 0 0 0 rg ( function.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 228.0236 cm
Q
q
1 0 0 1 62.69291 204.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 3.297976 Tw 12 TL /F3 10 Tf 0 0 0 rg (src/kpatch_elf.c) Tj /F1 10 Tf 0 0 0 rg ( contains the ELF-format specific functions such as parsing the program) Tj T* 0 Tw (headers, resolving symbols, and applying relocations to the loaded patch. This uses ) Tj 0 0 .501961 rg (libelf) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 198.0236 cm
Q
q
1 0 0 1 62.69291 162.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .87247 Tw 12 TL /F3 10 Tf 0 0 0 rg (src/kpatch_ptrace.c) Tj /F1 10 Tf 0 0 0 rg ( implements ) Tj 0 0 .501961 rg (ptrace\(2\)) Tj 0 0 0 rg ( functions such as reading/writing patient's memory,) Tj T* 0 Tw 1.095318 Tw (executing code on the behalf of patient \(e.g. syscalls\), and parsing the patient's auxiliary vector to) Tj T* 0 Tw (determine real entry point of the application.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 156.0236 cm
Q
q
1 0 0 1 62.69291 108.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 38 Tm 1.897976 Tw 12 TL /F3 10 Tf 0 0 0 rg (src/kpatch_strip.c) Tj /F1 10 Tf 0 0 0 rg ( contains two modes of operation: ) Tj /F3 10 Tf 0 0 0 rg (--strip) Tj /F1 10 Tf 0 0 0 rg ( that removes all non-kpatch) Tj T* 0 Tw .884269 Tw (sections from the ELF file, and ) Tj /F3 10 Tf 0 0 0 rg (--undo-link) Tj /F1 10 Tf 0 0 0 rg ( that redoes binary image offsets into section offsets) Tj T* 0 Tw .965366 Tw (for symbols, relocations' offsets, and addends and resets section addresses to zero, converting an) Tj T* 0 Tw (ELF object to ) Tj /F3 10 Tf 0 0 0 rg (REL) Tj /F1 10 Tf 0 0 0 rg ( type.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 102.0236 cm
Q
 
endstream
endobj
266 0 obj
<<
/Length 8888
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 687.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 63 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 39 cm
q
BT 1 0 0 1 0 26 Tm 3.608976 Tw 12 TL /F3 10 Tf 0 0 0 rg (src/kpatch_gensrc.c) Tj /F1 10 Tf 0 0 0 rg ( is the powerhorse of patching. It compares original versus patched) Tj T* 0 Tw 1.73152 Tw (assembly files and produces an assembly file with all the changes stored into ) Tj /F3 10 Tf 0 0 0 rg (.kpatch) Tj /F1 10 Tf 0 0 0 rg (-prefixed) Tj T* 0 Tw (sections.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm 1.841235 Tw 12 TL /F1 10 Tf 0 0 0 rg (The code is changed so all the variable access is done through the Global Offset Table entries) Tj T* 0 Tw -0.089024 Tw (referenced via PC-relative instructions \(option ) Tj /F3 10 Tf 0 0 0 rg (--force-gotpcrel) Tj /F1 10 Tf 0 0 0 rg (\). The ) Tj /F3 10 Tf 0 0 0 rg (jump) Tj ( ) Tj (table) Tj /F1 10 Tf 0 0 0 rg ( is generated) Tj T* 0 Tw (by the ) Tj /F3 10 Tf 0 0 0 rg (kpatch_user.c) Tj /F1 10 Tf 0 0 0 rg ( code and filled with ) Tj /F3 10 Tf 0 0 0 rg (kpatch_elf.c) Tj /F1 10 Tf 0 0 0 rg ( code. See below for details.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 687.0236 cm
Q
q
1 0 0 1 62.69291 654.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (How Does It Work) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 624.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .279431 Tw (It's a miracle. Really. We got somewhat lucky that all the tools were ready before we ever started working) Tj T* 0 Tw (on this. Thank you, Open Source The Mighty!) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 594.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Short Introduction to ELF) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 516.0236 cm
q
BT 1 0 0 1 0 62 Tm .435227 Tw 12 TL /F1 10 Tf 0 0 0 rg (Most of the binaries in the system are in the ) Tj 0 0 .501961 rg (elf\(5\) format) Tj 0 0 0 rg (. From the producer point of view, the file of this) Tj T* 0 Tw 2.521412 Tw (format consists of a set of blocks called ) Tj /F3 10 Tf 0 0 0 rg (sections) Tj /F1 10 Tf 0 0 0 rg (. Sections can contain data \() Tj /F3 10 Tf 0 0 0 rg (.rodata) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F3 10 Tf 0 0 0 rg (.data) Tj /F1 10 Tf 0 0 0 rg (\),) Tj T* 0 Tw 1.169269 Tw (executable code \(usually called ) Tj /F3 10 Tf 0 0 0 rg (.text) Tj /F1 10 Tf 0 0 0 rg (\) and auxiliary data. The text references its parts and necessary) Tj T* 0 Tw 1.251751 Tw (data \(such as variables\) by means of ) Tj /F3 10 Tf 0 0 0 rg (symbols) Tj /F1 10 Tf 0 0 0 rg (. For instance, C's ) Tj /F3 10 Tf 0 0 0 rg (main) Tj /F1 10 Tf 0 0 0 rg ( is a special symbol where the) Tj T* 0 Tw .076098 Tw (control is transferred by the C runtime after the required initialization is done. The symbols are listed in the) Tj T* 0 Tw (section ) Tj /F3 10 Tf 0 0 0 rg (.symtab) Tj /F1 10 Tf 0 0 0 rg ( whenever it is required.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 462.0236 cm
q
BT 1 0 0 1 0 38 Tm 2.364985 Tw 12 TL /F1 10 Tf 0 0 0 rg (There are three main types of ELF format files: the ) Tj /F3 10 Tf 0 0 0 rg (DYN) Tj /F1 10 Tf 0 0 0 rg (amic shared object, used primarily to store) Tj T* 0 Tw 1.22284 Tw (common code in libraries; the binary ) Tj /F3 10 Tf 0 0 0 rg (EXEC) Tj /F1 10 Tf 0 0 0 rg (utable, used to contain the application; and the ) Tj /F3 10 Tf 0 0 0 rg (REL) Tj /F1 10 Tf 0 0 0 rg (ocatable) Tj T* 0 Tw .062126 Tw (object file resulting from compiling an assembler file \(GNU C compiler actually generates assembler which) Tj T* 0 Tw (is fed to the GNU assembler\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 372.0236 cm
q
BT 1 0 0 1 0 74 Tm 1.05561 Tw 12 TL /F1 10 Tf 0 0 0 rg (These differ mostly by the types of relocations they may and do contain. Relocations are the technique) Tj T* 0 Tw .755251 Tw (used to allow address changes in the binary object files. For instance, when linking a set of ) Tj /F3 10 Tf 0 0 0 rg (.o) Tj /F1 10 Tf 0 0 0 rg ( files into) Tj T* 0 Tw 2.945318 Tw (executable, the linker merges sections from them into a single section such as ) Tj /F3 10 Tf 0 0 0 rg (.text) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F3 10 Tf 0 0 0 rg (.data) Tj /F1 10 Tf 0 0 0 rg ( or) Tj T* 0 Tw 1.557485 Tw /F3 10 Tf 0 0 0 rg (.rodata) Tj /F1 10 Tf 0 0 0 rg (. The linker then adjusts relocation info such as the place where it should be applied \(called) Tj T* 0 Tw .147126 Tw /F3 10 Tf 0 0 0 rg (r_offset) Tj /F1 10 Tf 0 0 0 rg (\), target symbol and its address and/or addend relative to the symbol value \(called ) Tj /F3 10 Tf 0 0 0 rg (r_addend) Tj /F1 10 Tf 0 0 0 rg (\).) Tj T* 0 Tw .999987 Tw (Some types of relocations are also allowed in the final binary object and are resolved upon load by the) Tj T* 0 Tw (dynamic linker.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 222.0236 cm
q
BT 1 0 0 1 0 134 Tm .916457 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (DYN) Tj /F1 10 Tf 0 0 0 rg (amic object contains all the data necessary to load the library on a random base address. This) Tj T* 0 Tw .682651 Tw (randomization of the base leads to randomization of the library functions addresses, making it harder for) Tj T* 0 Tw 1.016651 Tw (an intruder to exploit a vulnerability, and allowing multiple libraries to be loaded without interfering each) Tj T* 0 Tw .866098 Tw (other. Because it is impossible to know the address of a variable at the compile time the ) Tj /F3 10 Tf 0 0 0 rg (DYN) Tj /F1 10 Tf 0 0 0 rg (amic code) Tj T* 0 Tw .536235 Tw (refers to its data objects using so-called Global Offset Table \(GOT\). This table contains addresses of the) Tj T* 0 Tw .11936 Tw (variables, so accessing a variable takes two steps: first loading the GOT entry, then unreferencing it. GOT) Tj T* 0 Tw 1.371235 Tw (entry is usually referenced in the instruction pointer relative manner. The GOT is filled by the dynamic) Tj T* 0 Tw .035318 Tw (linker such as ) Tj /F3 10 Tf 0 0 0 rg (ld-linux) Tj /F1 10 Tf 0 0 0 rg ( while resolving relocations from the ) Tj /F3 10 Tf 0 0 0 rg (.rela.dyn) Tj /F1 10 Tf 0 0 0 rg (. Only a few types of relocations) Tj T* 0 Tw 10.93997 Tw (are allowed there, they are \(for x86-64\): ) Tj /F3 10 Tf 0 0 0 rg (R_X86_64_RELATIVE) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F3 10 Tf 0 0 0 rg (R_X86_64_64) Tj /F1 10 Tf 0 0 0 rg ( and) Tj T* 0 Tw .563059 Tw /F3 10 Tf 0 0 0 rg (R_X86_64_GLOB_DATA) Tj /F1 10 Tf 0 0 0 rg (. The symbols provided by the ) Tj /F3 10 Tf 0 0 0 rg (DYN) Tj /F1 10 Tf 0 0 0 rg (amic object are listed in the ) Tj /F3 10 Tf 0 0 0 rg (.dynsym) Tj /F1 10 Tf 0 0 0 rg ( section) Tj T* 0 Tw -0.018765 Tw (with the names stored in the ) Tj /F3 10 Tf 0 0 0 rg (.dynstr) Tj /F1 10 Tf 0 0 0 rg ( section. Special section ) Tj /F3 10 Tf 0 0 0 rg (.dynamic) Tj /F1 10 Tf 0 0 0 rg ( contains all the data required to) Tj T* 0 Tw (load an object, such as a list of required libraries, pointers to the relocation entries and so on.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 156.0236 cm
q
BT 1 0 0 1 0 50 Tm .859984 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (EXEC) Tj /F1 10 Tf 0 0 0 rg (utable objects are usually linked to a fixed address and contain no relocation information. The) Tj T* 0 Tw .713672 Tw (kernel only needs to know how to load this type of objects along with the interpreter if specified. Most of) Tj T* 0 Tw .328221 Tw (the binaries have the dynamic linker ) Tj /F3 10 Tf 0 0 0 rg (ld-linux) Tj /F1 10 Tf 0 0 0 rg ( specified as the interpreter. It is loaded by the kernel and) Tj T* 0 Tw 1.75311 Tw (the control is transferred here. The dynamic loader duty is to load all the necessary libraries, resolve) Tj T* 0 Tw (symbols and transfer the control to the application code.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 78.02362 cm
q
BT 1 0 0 1 0 62 Tm .831163 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (REL) Tj /F1 10 Tf 0 0 0 rg (ocatable object file can contain any type of relocation. The static linker, such as ) Tj /F3 10 Tf 0 0 0 rg (ld) Tj /F1 10 Tf 0 0 0 rg (, links these) Tj T* 0 Tw 1.096303 Tw (into an ) Tj /F3 10 Tf 0 0 0 rg (EXEC) Tj /F1 10 Tf 0 0 0 rg (utable file or a ) Tj /F3 10 Tf 0 0 0 rg (DYN) Tj /F1 10 Tf 0 0 0 rg (amic one. The ) Tj /F3 10 Tf 0 0 0 rg (REL) Tj /F1 10 Tf 0 0 0 rg ( object file is merely an assembler file turned into a) Tj T* 0 Tw .88436 Tw (binary file, with the symbol references noted as appropriately. That is, for every symbol reference in the) Tj T* 0 Tw 1.853318 Tw (assembler file there is a corresponding symbol added to the ) Tj /F3 10 Tf 0 0 0 rg (REL) Tj /F1 10 Tf 0 0 0 rg (ocatable ELF file and the relocation) Tj T* 0 Tw 1.344983 Tw (referencing this symbol. For every symbol defined the corresponding symbol is added to the ) Tj /F3 10 Tf 0 0 0 rg (.symtab) Tj /F1 10 Tf 0 0 0 rg  T* 0 Tw 2.336412 Tw (section. ASCII zero-ended string names are stored into the ) Tj /F3 10 Tf 0 0 0 rg (.strtab) Tj /F1 10 Tf 0 0 0 rg ( section. The static linker then) Tj T* 0 Tw ET
Q
Q
 
endstream
endobj
267 0 obj
<<
/Length 6870
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
BT 1 0 0 1 0 14 Tm .90561 Tw 12 TL /F1 10 Tf 0 0 0 rg (resolves symbol referenced in one object file with the symbols defined in another object file or ) Tj /F3 10 Tf 0 0 0 rg (DYN) Tj /F1 10 Tf 0 0 0 rg (amic) Tj T* 0 Tw (shared object file.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 711.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Patching) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 693.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Here we are going to describe how the patching is performed.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 651.0236 cm
q
BT 1 0 0 1 0 26 Tm .627356 Tw 12 TL /F1 10 Tf 0 0 0 rg (This is the act that looks like a mix of static and dynamic linking in the process address space expecting) Tj T* 0 Tw .573488 Tw (that we are doing it using ) Tj /F3 10 Tf 0 0 0 rg (ptrace) Tj /F1 10 Tf 0 0 0 rg (. There is infant task to reuse ) Tj /F3 10 Tf 0 0 0 rg (rtld) Tj /F1 10 Tf 0 0 0 rg ('s ) Tj /F3 10 Tf 0 0 0 rg (_dl_open) Tj /F1 10 Tf 0 0 0 rg ( calls to do the job for) Tj T* 0 Tw (us.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 633.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The following is the verbose description of the ) Tj /F3 10 Tf 0 0 0 rg (kpatch_process_patches) Tj /F1 10 Tf 0 0 0 rg ( function flow.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 606.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Attaching) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 564.0236 cm
q
BT 1 0 0 1 0 26 Tm .45332 Tw 12 TL /F1 10 Tf 0 0 0 rg (When a user asks ) Tj /F3 10 Tf 0 0 0 rg (kpatch_user) Tj /F1 10 Tf 0 0 0 rg ( to patch a process with a given patch \(or a directory with patches\), the) Tj T* 0 Tw -0.055569 Tw (patcher \(let's call it ) Tj /F3 10 Tf 0 0 0 rg (doctor) Tj /F1 10 Tf 0 0 0 rg (\) first attaches to the threads to be patched \(let's call it ) Tj /F3 10 Tf 0 0 0 rg (patient) Tj /F1 10 Tf 0 0 0 rg (\) thus stopping) Tj T* 0 Tw (their execution.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 537.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Execute Until Libraries Are Loaded) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 435.0236 cm
q
BT 1 0 0 1 0 86 Tm 1.210514 Tw 12 TL /F1 10 Tf 0 0 0 rg (Now, if we are about to patch a freshly executed binary, we have to continue its execution until all the) Tj T* 0 Tw .23881 Tw (libraries are loaded. That is, if the binary has a non-zero ) Tj /F3 10 Tf 0 0 0 rg (interp) Tj /F1 10 Tf 0 0 0 rg (reter, such as ) Tj /F3 10 Tf 0 0 0 rg (ld-linux) Tj /F1 10 Tf 0 0 0 rg (, the kernel first) Tj T* 0 Tw .629431 Tw (executes the interpreter and it is the interpreter task to transfer control to the application text after all the) Tj T* 0 Tw .570574 Tw (initialization is successful. So, to ensure that all the libraries are loaded so we can use symbols provided) Tj T* 0 Tw 1.256988 Tw (by them in our patches, we have to wait until the initialization is done. We do this by inserting a ) Tj /F3 10 Tf 0 0 0 rg (TRAP) Tj /F1 10 Tf 0 0 0 rg  T* 0 Tw 1.05881 Tw (instruction at the entry point of the application, so when the interpreter is done loading the libraries, we) Tj T* 0 Tw 6.981318 Tw (have to parse ) Tj 0 0 .501961 rg (auxiliary vector) Tj 0 0 0 rg ( information to find the entry point. This is done in the) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (kpatch_load_libraries) Tj /F1 10 Tf 0 0 0 rg ( function.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 408.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Examine Application Object Files) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 330.0236 cm
q
BT 1 0 0 1 0 62 Tm .622488 Tw 12 TL /F1 10 Tf 0 0 0 rg (The next step is to find out what ELF objects are loaded and where. This way we know offsets for reach) Tj T* 0 Tw 2.083555 Tw (dynamically-loaded library and can actually resolve symbols from there. This is done by the function) Tj T* 0 Tw .359147 Tw /F3 10 Tf 0 0 0 rg (kpatch_create_object_files) Tj /F1 10 Tf 0 0 0 rg (. For the correct mapping of the object symbol addresses to the virtual) Tj T* 0 Tw 5.25811 Tw (address space we have to parse the instructions on how to load the object stored in the) Tj T* 0 Tw .504724 Tw /F3 10 Tf 0 0 0 rg (program) Tj ( ) Tj (header) Tj /F1 10 Tf 0 0 0 rg (s part of the ELF, and are used by the dynamic loader or the kernel. This part is done) Tj T* 0 Tw (by the function ) Tj /F3 10 Tf 0 0 0 rg (kpatch_create_object_files) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 303.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Locate Patches For Objects) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 249.0236 cm
q
BT 1 0 0 1 0 38 Tm .343488 Tw 12 TL /F1 10 Tf 0 0 0 rg (Next, if we are given a patch file we check that there are indeed patches for the objects of the application) Tj T* 0 Tw 5.916647 Tw (\() Tj /F3 10 Tf 0 0 0 rg (kpatch_verify_objects) Tj /F1 10 Tf 0 0 0 rg (\). If we are given a directory, we lookup for patch files named) Tj T* 0 Tw 1.468443 Tw /F3 10 Tf 0 0 0 rg ($BuildID.kpatch) Tj /F1 10 Tf 0 0 0 rg ( inside it and load what we have found \() Tj /F3 10 Tf 0 0 0 rg (kpatch_load_patches) Tj /F1 10 Tf 0 0 0 rg (\). If there are no) Tj T* 0 Tw (patches we just let the application continue its execution, free our resources and we are done.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 222.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Applying Patches) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 192.0236 cm
q
BT 1 0 0 1 0 14 Tm 1.44784 Tw 12 TL /F1 10 Tf 0 0 0 rg (Otherwise, we call the ) Tj /F3 10 Tf 0 0 0 rg (kpatch_apply_patches) Tj /F1 10 Tf 0 0 0 rg ( function that goes through the list of objects that do) Tj T* 0 Tw (have patches and applies patches.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 126.0236 cm
q
BT 1 0 0 1 0 50 Tm .463059 Tw 12 TL /F1 10 Tf 0 0 0 rg (Regular executable objects \(both ) Tj /F3 10 Tf 0 0 0 rg (EXEC) Tj /F1 10 Tf 0 0 0 rg ( and ) Tj /F3 10 Tf 0 0 0 rg (DYN) Tj /F1 10 Tf 0 0 0 rg (\) reference global functions via Procedure Linkage Table) Tj T* 0 Tw .107984 Tw (and global object symbols by copying them into local data using ) Tj /F3 10 Tf 0 0 0 rg (R_X86_64_COPY) Tj /F1 10 Tf 0 0 0 rg ( relocation \(for ) Tj /F3 10 Tf 0 0 0 rg (EXEC) Tj /F1 10 Tf 0 0 0 rg (\) or) Tj T* 0 Tw .228555 Tw (looking for the address in the application or library using ) Tj /F3 10 Tf 0 0 0 rg (R_X86_64_GLOB_DATA) Tj /F1 10 Tf 0 0 0 rg ( relocation \(for ) Tj /F3 10 Tf 0 0 0 rg (DYN) Tj /F1 10 Tf 0 0 0 rg (\). We) Tj T* 0 Tw 2.466457 Tw (had to implement a jump table for the function references which is reused as GOT for the symbol) Tj T* 0 Tw (reference. It is also used as the Thread Pointer Offset table for the TLS data.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 96.02362 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .587816 Tw (So, the first we need to count if there is a need for the jump table at all. For that, we do count undefined) Tj T* 0 Tw (and TLS symbols and allocate the jump table if there are any of them.) Tj T* ET
Q
Q
 
endstream
endobj
268 0 obj
<<
/Length 7618
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
q
BT 1 0 0 1 0 26 Tm .259988 Tw 12 TL /F1 10 Tf 0 0 0 rg (The next we need to find a region in the patient address space suitable to mmap the patch here. We start) Tj T* 0 Tw .087608 Tw (to look for the hole after the object and check if there is enough space to fit the patch, looking farther upon) Tj T* 0 Tw (failure. This is done by the ) Tj /F3 10 Tf 0 0 0 rg (kpatch_find_patch_region) Tj /F1 10 Tf 0 0 0 rg ( function.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 699.0236 cm
q
BT 1 0 0 1 0 14 Tm 1.369398 Tw 12 TL /F1 10 Tf 0 0 0 rg (We allocate an anonymous region to hold the patch on the patient's behalf using the code injected by) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (ptrace) Tj /F1 10 Tf 0 0 0 rg (. This is done by the ) Tj /F3 10 Tf 0 0 0 rg (kpatch_mmap_remote) Tj /F1 10 Tf 0 0 0 rg ( function that executes a ) Tj /F3 10 Tf 0 0 0 rg (mmap) Tj /F1 10 Tf 0 0 0 rg ( syscall remotely.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 669.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.092765 Tw (Once we got the address of the region and allocated memory there, we are all prepared to resolve the) Tj T* 0 Tw (relocations from the kpatch.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 642.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Applying Relocations) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 618.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (Resolving symbols) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 588.0236 cm
q
BT 1 0 0 1 0 14 Tm .145868 Tw 12 TL /F1 10 Tf 0 0 0 rg (Since relocations are made against symbols we have first to resolve symbols. This is done by the function) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (kpatch_resolve) Tj /F1 10 Tf 0 0 0 rg ( present in the ) Tj /F3 10 Tf 0 0 0 rg (kpatch_elf.c) Tj /F1 10 Tf 0 0 0 rg ( file.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 546.0236 cm
q
BT 1 0 0 1 0 26 Tm .479398 Tw 12 TL /F1 10 Tf 0 0 0 rg (We resolve sections addresses first. We know the address of the region we allocated for the ) Tj /F3 10 Tf 0 0 0 rg (kpatch) Tj /F1 10 Tf 0 0 0 rg (, so) Tj T* 0 Tw 2.086136 Tw (we can calculate the ) Tj /F3 10 Tf 0 0 0 rg (kpatch) Tj /F1 10 Tf 0 0 0 rg ('s sections addresses. Other sections' addresses are resolved from the) Tj T* 0 Tw (original object file we are about to patch.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 504.0236 cm
q
BT 1 0 0 1 0 26 Tm .153735 Tw 12 TL /F1 10 Tf 0 0 0 rg (After the section addresses are resolved we resolve addresses for the symbols present in the kpatch. The) Tj T* 0 Tw 1.883059 Tw (functions and data objects symbols of type ) Tj /F3 10 Tf 0 0 0 rg (STT_FUNC) Tj /F1 10 Tf 0 0 0 rg ( and ) Tj /F3 10 Tf 0 0 0 rg (STT_OBJECT) Tj /F1 10 Tf 0 0 0 rg ( have the containing section) Tj T* 0 Tw (offset added to the ) Tj /F3 10 Tf 0 0 0 rg (st_value) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 462.0236 cm
q
BT 1 0 0 1 0 26 Tm -0.006682 Tw 12 TL /F1 10 Tf 0 0 0 rg (The thread-local storage objects of type ) Tj /F3 10 Tf 0 0 0 rg (STT_TLS) Tj /F1 10 Tf 0 0 0 rg ( may be referenced by two different relocations, one that) Tj T* 0 Tw .78186 Tw (gets offset from a GOT \() Tj /F3 10 Tf 0 0 0 rg (GOTTPOFF) Tj /F1 10 Tf 0 0 0 rg (\), another that asks offset to be put inline \() Tj /F3 10 Tf 0 0 0 rg (TPOFF{32,64}) Tj /F1 10 Tf 0 0 0 rg (\). We use) Tj T* 0 Tw (symbol field ) Tj /F3 10 Tf 0 0 0 rg (st_size) Tj /F1 10 Tf 0 0 0 rg ( to store the original offset and ) Tj /F3 10 Tf 0 0 0 rg (st_value) Tj /F1 10 Tf 0 0 0 rg ( to store the offset in the jump table.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 420.0236 cm
q
BT 1 0 0 1 0 26 Tm -0.109458 Tw 12 TL /F1 10 Tf 0 0 0 rg (Objects of unknown type ) Tj /F3 10 Tf 0 0 0 rg (STT_NOTYPE) Tj /F1 10 Tf 0 0 0 rg ( are resolved via the jump table. If it is later discovered that they are) Tj T* 0 Tw .327633 Tw (referenced by a relocation as a Global Offset Table entry such as ) Tj /F3 10 Tf 0 0 0 rg (GOTPCREL) Tj /F1 10 Tf 0 0 0 rg ( then only the address value) Tj T* 0 Tw (from the jump table is used.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 390.0236 cm
q
BT 1 0 0 1 0 14 Tm .082485 Tw 12 TL /F1 10 Tf 0 0 0 rg (Rest of the symbol types are unsupported. The appearence of the unsupported symbol type will cause the) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (doctor) Tj /F1 10 Tf 0 0 0 rg ( to fail.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 366.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (Doing relocations) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 336.0236 cm
q
BT 1 0 0 1 0 14 Tm .473516 Tw 12 TL /F1 10 Tf 0 0 0 rg (Now that we are all set, we resolve the relocations. This is done by the function ) Tj /F3 10 Tf 0 0 0 rg (kpatch_relocate) Tj /F1 10 Tf 0 0 0 rg ( that) Tj T* 0 Tw (calls ) Tj /F3 10 Tf 0 0 0 rg (kpatch_apply_relocate_add) Tj /F1 10 Tf 0 0 0 rg ( for all the sections of type ) Tj /F3 10 Tf 0 0 0 rg (SHT_RELA) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 246.0236 cm
q
BT 1 0 0 1 0 74 Tm 3.05284 Tw 12 TL /F1 10 Tf 0 0 0 rg (The code is pretty straightforward except for two relocations. The first one is the ) Tj /F3 10 Tf 0 0 0 rg (TPOFF{32,64}) Tj /F1 10 Tf 0 0 0 rg  T* 0 Tw -0.125731 Tw (relocations that do restore offset saved in ) Tj /F3 10 Tf 0 0 0 rg (st_size) Tj /F1 10 Tf 0 0 0 rg (. Another one is Global Offset Table-related relocations) Tj T* 0 Tw 1.12748 Tw (such as ) Tj /F3 10 Tf 0 0 0 rg (GOTTPOFF) Tj /F1 10 Tf 0 0 0 rg (, ) Tj /F3 10 Tf 0 0 0 rg (GOTPCREL) Tj /F1 10 Tf 0 0 0 rg (, and Ubuntu Xenial specific ) Tj /F3 10 Tf 0 0 0 rg (REX_GOTPCRELX) Tj /F1 10 Tf 0 0 0 rg (. If the referenced symbol) Tj T* 0 Tw -0.066124 Tw (has type ) Tj /F3 10 Tf 0 0 0 rg (STT_NOTYPE) Tj /F1 10 Tf 0 0 0 rg ( or ) Tj /F3 10 Tf 0 0 0 rg (STT_TLS) Tj /F1 10 Tf 0 0 0 rg (, then the jump table entry is reused as the Global Offset Table entry. If) Tj T* 0 Tw .487485 Tw (the relocation aims for either original object or patch section, then we convert the ) Tj /F3 10 Tf 0 0 0 rg (mov) Tj /F1 10 Tf 0 0 0 rg ( instruction present) Tj T* 0 Tw .585777 Tw (to the ) Tj /F3 10 Tf 0 0 0 rg (lea) Tj /F1 10 Tf 0 0 0 rg ( instruction as there is no appropriate jump table entry which is not required in that case since) Tj T* 0 Tw (the target section is closer than 2GiB \(we allocate the memory for the patch that way\).) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 219.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Doctor injects the patch) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 201.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now that the patch is fully prepared it is written into the previously allocated region of patient's memory.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 147.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F1 10 Tf 12 TL .092488 Tw (But we are not yet done with the patching of the patient. We now have to reroute the execution paths from) Tj T* 0 Tw .097356 Tw (the old buggy functions into our just loaded new shiny ones. But it is dangerous to patch functions that are) Tj T* 0 Tw 2.93061 Tw (being executed at the moment, since this can change the way the data is structured and corrupt) Tj T* 0 Tw (everything. So, we have to wait until the patient leaves functions we are about to patch.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 105.0236 cm
q
BT 1 0 0 1 0 26 Tm .166651 Tw 12 TL /F1 10 Tf 0 0 0 rg (This is done by the function ) Tj /F3 10 Tf 0 0 0 rg (kpatch_ensure_safety) Tj /F1 10 Tf 0 0 0 rg ( which checks that there is no patched symbols on) Tj T* 0 Tw .742093 Tw (the stack and, if there is any, waits for the patient to hit breakpoints placed at their returns. The function) Tj T* 0 Tw (uses ) Tj /F3 10 Tf 0 0 0 rg (libunwind) Tj /F1 10 Tf 0 0 0 rg ( function with pluggable unwinder interfaces.) Tj T* ET
Q
Q
 
endstream
endobj
269 0 obj
<<
/Length 9481
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 729.0236 cm
q
BT 1 0 0 1 0 26 Tm 1.832765 Tw 12 TL /F1 10 Tf 0 0 0 rg (If we ensured the patching safety, we start the patching itself. For that the entry point of the original) Tj T* 0 Tw .429985 Tw (functions are rewritten with the unconditional jumps to the patched functions. This is done by the function) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (kpatch_apply_hunk) Tj /F1 10 Tf 0 0 0 rg ( called for each of the original functions that do have patched one.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 702.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Doctor exits) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 672.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .227765 Tw (At this point doctor done with his job, it frees resources and leaves. If anything wrong happens during any) Tj T* 0 Tw (of the actions the appropriate error MUST be printed.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 642.0236 cm
q
BT 1 0 0 1 0 3 Tm 18 TL /F2 15 Tf 0 0 0 rg (Manual Patch Creation) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 612.0236 cm
q
BT 1 0 0 1 0 14 Tm .829986 Tw 12 TL /F1 10 Tf 0 0 0 rg (Throughout this section the availability of the kpatch tools is assumed. To build them and add them into) Tj T* 0 Tw (PATH, do:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 566.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
.960784 .960784 .862745 rg
n 0 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
.960784 .960784 .862745 rg
n 12 0 36 12 re f*
.960784 .960784 .862745 rg
n 54 0 24 12 re f*
.960784 .960784 .862745 rg
n 78 0 6 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( make -C src) Tj T* /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( ) Tj 0 .501961 0 rg (export) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (PATH) Tj .4 .4 .4 rg (=) Tj 0 0 0 rg ($PWD/src:$PATH) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 539.8236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Generating the kpatch assembler with ) Tj /F3 12.5 Tf 0 0 0 rg (kpatch_gensrc) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 473.8236 cm
q
BT 1 0 0 1 0 50 Tm .299984 Tw 12 TL /F1 10 Tf 0 0 0 rg (So, the main working horse for the whole project, including kernel patches, is the ) Tj /F3 10 Tf 0 0 0 rg (kpatch_gensrc) Tj /F1 10 Tf 0 0 0 rg ( utility.) Tj T* 0 Tw .373516 Tw (It compares two assembler files and whenever there are differences in the code of a particular function, it) Tj T* 0 Tw .039431 Tw (emits a new code after the original one but with a name suffixed with ) Tj /F3 10 Tf 0 0 0 rg (.kpatch) Tj /F1 10 Tf 0 0 0 rg ( and in the ) Tj /F3 10 Tf 0 0 0 rg (.kpatch.text) Tj /F1 10 Tf 0 0 0 rg  T* 0 Tw .601163 Tw (section. Keeping the original code maintains all the data and references in the original order. All the new) Tj T* 0 Tw (variables are being put into ) Tj /F3 10 Tf 0 0 0 rg (.kpatch.data) Tj /F1 10 Tf 0 0 0 rg ( section.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 443.8236 cm
q
BT 1 0 0 1 0 14 Tm .836457 Tw 12 TL /F1 10 Tf 0 0 0 rg (So, imagine that you have two source code versions available, let's name them ) Tj /F3 10 Tf 0 0 0 rg (foo) Tj /F1 10 Tf 0 0 0 rg ( for the original and) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (bar) Tj /F1 10 Tf 0 0 0 rg ( for the patched version:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 230.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 204 re B*
Q
q
.960784 .960784 .862745 rg
n 0 180 48 12 re f*
.960784 .960784 .862745 rg
n 0 168 48 12 re f*
.960784 .960784 .862745 rg
n 54 168 6 12 re f*
.960784 .960784 .862745 rg
n 60 168 42 12 re f*
.960784 .960784 .862745 rg
n 102 168 6 12 re f*
.960784 .960784 .862745 rg
n 108 168 0 12 re f*
.960784 .960784 .862745 rg
n 0 156 48 12 re f*
.960784 .960784 .862745 rg
n 54 156 6 12 re f*
.960784 .960784 .862745 rg
n 60 156 36 12 re f*
.960784 .960784 .862745 rg
n 96 156 6 12 re f*
.960784 .960784 .862745 rg
n 102 156 0 12 re f*
.960784 .960784 .862745 rg
n 0 132 24 12 re f*
.960784 .960784 .862745 rg
n 30 132 102 12 re f*
.960784 .960784 .862745 rg
n 132 132 6 12 re f*
.960784 .960784 .862745 rg
n 138 132 24 12 re f*
.960784 .960784 .862745 rg
n 162 132 6 12 re f*
.960784 .960784 .862745 rg
n 0 120 6 12 re f*
.960784 .960784 .862745 rg
n 24 108 36 12 re f*
.960784 .960784 .862745 rg
n 60 108 6 12 re f*
.960784 .960784 .862745 rg
n 66 108 90 12 re f*
.960784 .960784 .862745 rg
n 156 108 12 12 re f*
.960784 .960784 .862745 rg
n 168 108 6 12 re f*
.960784 .960784 .862745 rg
n 174 108 12 12 re f*
.960784 .960784 .862745 rg
n 0 96 6 12 re f*
.960784 .960784 .862745 rg
n 0 72 18 12 re f*
.960784 .960784 .862745 rg
n 24 72 24 12 re f*
.960784 .960784 .862745 rg
n 48 72 6 12 re f*
.960784 .960784 .862745 rg
n 54 72 24 12 re f*
.960784 .960784 .862745 rg
n 78 72 6 12 re f*
.960784 .960784 .862745 rg
n 0 60 6 12 re f*
.960784 .960784 .862745 rg
n 24 48 30 12 re f*
.960784 .960784 .862745 rg
n 60 48 6 12 re f*
.960784 .960784 .862745 rg
n 66 48 6 12 re f*
.960784 .960784 .862745 rg
n 72 48 6 12 re f*
.960784 .960784 .862745 rg
n 84 48 6 12 re f*
.960784 .960784 .862745 rg
n 48 36 102 12 re f*
.960784 .960784 .862745 rg
n 150 36 18 12 re f*
.960784 .960784 .862745 rg
n 48 24 30 12 re f*
.960784 .960784 .862745 rg
n 78 24 6 12 re f*
.960784 .960784 .862745 rg
n 84 24 6 12 re f*
.960784 .960784 .862745 rg
n 90 24 12 12 re f*
.960784 .960784 .862745 rg
n 24 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 182 Tm 12 TL /F4 10 Tf .25098 .501961 .501961 rg (// foo.c) Tj T* /F3 10 Tf .737255 .478431 0 rg (#include) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (<) Tj (stdio.h) Tj (>) Tj .737255 .478431 0 rg  T* (#include) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (<) Tj (time.h) Tj (>) Tj .737255 .478431 0 rg  T* 0 0 0 rg  T* .690196 0 .25098 rg (void) Tj 0 0 0 rg ( ) Tj 0 0 1 rg (i_m_being_patched) Tj 0 0 0 rg (\() Tj .690196 0 .25098 rg (void) Tj 0 0 0 rg (\)) Tj 0 0 0 rg  T* 0 0 0 rg ({) Tj 0 0 0 rg  T* (    ) Tj 0 0 0 rg (printf) Tj 0 0 0 rg (\() Tj .729412 .129412 .129412 rg ("i'm unpatched!) Tj /F5 10 Tf .733333 .4 .133333 rg (\\n) Tj /F3 10 Tf .729412 .129412 .129412 rg (") Tj 0 0 0 rg (\);) Tj 0 0 0 rg  T* 0 0 0 rg (}) Tj 0 0 0 rg  T*  T* .690196 0 .25098 rg (int) Tj 0 0 0 rg ( ) Tj 0 0 1 rg (main) Tj 0 0 0 rg (\() Tj .690196 0 .25098 rg (void) Tj 0 0 0 rg (\)) Tj 0 0 0 rg  T* 0 0 0 rg ({) Tj 0 0 0 rg  T* (    ) Tj /F5 10 Tf 0 .501961 0 rg (while) Tj /F3 10 Tf 0 0 0 rg ( ) Tj 0 0 0 rg (\() Tj .4 .4 .4 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ) Tj 0 0 0 rg ({) Tj 0 0 0 rg  T* (        ) Tj 0 0 0 rg (i_m_being_patched) Tj 0 0 0 rg (\(\);) Tj 0 0 0 rg  T* (        ) Tj 0 0 0 rg (sleep) Tj 0 0 0 rg (\() Tj .4 .4 .4 rg (1) Tj 0 0 0 rg (\);) Tj 0 0 0 rg  T* (    ) Tj 0 0 0 rg (}) Tj 0 0 0 rg  T* 0 0 0 rg (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 77.42362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 144 re B*
Q
q
.960784 .960784 .862745 rg
n 0 120 48 12 re f*
.960784 .960784 .862745 rg
n 0 108 48 12 re f*
.960784 .960784 .862745 rg
n 54 108 6 12 re f*
.960784 .960784 .862745 rg
n 60 108 42 12 re f*
.960784 .960784 .862745 rg
n 102 108 6 12 re f*
.960784 .960784 .862745 rg
n 108 108 0 12 re f*
.960784 .960784 .862745 rg
n 0 96 48 12 re f*
.960784 .960784 .862745 rg
n 54 96 6 12 re f*
.960784 .960784 .862745 rg
n 60 96 36 12 re f*
.960784 .960784 .862745 rg
n 96 96 6 12 re f*
.960784 .960784 .862745 rg
n 102 96 0 12 re f*
.960784 .960784 .862745 rg
n 0 72 24 12 re f*
.960784 .960784 .862745 rg
n 30 72 102 12 re f*
.960784 .960784 .862745 rg
n 132 72 6 12 re f*
.960784 .960784 .862745 rg
n 138 72 24 12 re f*
.960784 .960784 .862745 rg
n 162 72 6 12 re f*
.960784 .960784 .862745 rg
n 0 60 6 12 re f*
.960784 .960784 .862745 rg
n 24 48 36 12 re f*
.960784 .960784 .862745 rg
n 60 48 6 12 re f*
.960784 .960784 .862745 rg
n 66 48 108 12 re f*
.960784 .960784 .862745 rg
n 174 48 12 12 re f*
.960784 .960784 .862745 rg
n 186 48 6 12 re f*
.960784 .960784 .862745 rg
n 192 48 6 12 re f*
.960784 .960784 .862745 rg
n 204 48 54 12 re f*
.960784 .960784 .862745 rg
n 258 48 12 12 re f*
.960784 .960784 .862745 rg
n 0 36 6 12 re f*
.960784 .960784 .862745 rg
n 0 12 18 12 re f*
.960784 .960784 .862745 rg
n 24 12 24 12 re f*
.960784 .960784 .862745 rg
n 48 12 6 12 re f*
.960784 .960784 .862745 rg
n 54 12 24 12 re f*
.960784 .960784 .862745 rg
n 78 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 122 Tm 12 TL /F4 10 Tf .25098 .501961 .501961 rg (// bar.c) Tj T* /F3 10 Tf .737255 .478431 0 rg (#include) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (<) Tj (stdio.h) Tj (>) Tj .737255 .478431 0 rg  T* (#include) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (<) Tj (time.h) Tj (>) Tj .737255 .478431 0 rg  T* 0 0 0 rg  T* .690196 0 .25098 rg (void) Tj 0 0 0 rg ( ) Tj 0 0 1 rg (i_m_being_patched) Tj 0 0 0 rg (\() Tj .690196 0 .25098 rg (void) Tj 0 0 0 rg (\)) Tj 0 0 0 rg  T* 0 0 0 rg ({) Tj 0 0 0 rg  T* (    ) Tj 0 0 0 rg (printf) Tj 0 0 0 rg (\() Tj .729412 .129412 .129412 rg ("you patched my %s) Tj /F5 10 Tf .733333 .4 .133333 rg (\\n) Tj /F3 10 Tf .729412 .129412 .129412 rg (") Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ("tralala") Tj 0 0 0 rg (\);) Tj 0 0 0 rg  T* 0 0 0 rg (}) Tj 0 0 0 rg  T*  T* .690196 0 .25098 rg (int) Tj 0 0 0 rg ( ) Tj 0 0 1 rg (main) Tj 0 0 0 rg (\() Tj .690196 0 .25098 rg (void) Tj 0 0 0 rg (\)) Tj 0 0 0 rg  T* 0 0 0 rg ({) Tj 0 0 0 rg  T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
270 0 obj
<<
/Length 5426
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 691.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 72 re B*
Q
q
.960784 .960784 .862745 rg
n 24 48 30 12 re f*
.960784 .960784 .862745 rg
n 60 48 6 12 re f*
.960784 .960784 .862745 rg
n 66 48 6 12 re f*
.960784 .960784 .862745 rg
n 72 48 6 12 re f*
.960784 .960784 .862745 rg
n 84 48 6 12 re f*
.960784 .960784 .862745 rg
n 48 36 102 12 re f*
.960784 .960784 .862745 rg
n 150 36 18 12 re f*
.960784 .960784 .862745 rg
n 48 24 30 12 re f*
.960784 .960784 .862745 rg
n 78 24 6 12 re f*
.960784 .960784 .862745 rg
n 84 24 6 12 re f*
.960784 .960784 .862745 rg
n 90 24 12 12 re f*
.960784 .960784 .862745 rg
n 24 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F3 10 Tf 0 0 0 rg (    ) Tj /F5 10 Tf 0 .501961 0 rg (while) Tj /F3 10 Tf 0 0 0 rg ( ) Tj 0 0 0 rg (\() Tj .4 .4 .4 rg (1) Tj 0 0 0 rg (\)) Tj 0 0 0 rg ( ) Tj 0 0 0 rg ({) Tj 0 0 0 rg  T* (        ) Tj 0 0 0 rg (i_m_being_patched) Tj 0 0 0 rg (\(\);) Tj 0 0 0 rg  T* (        ) Tj 0 0 0 rg (sleep) Tj 0 0 0 rg (\() Tj .4 .4 .4 rg (1) Tj 0 0 0 rg (\);) Tj 0 0 0 rg  T* (    ) Tj 0 0 0 rg (}) Tj 0 0 0 rg  T* 0 0 0 rg (}) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 671.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now we need to get assembler code for both of the files:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 626.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL ($ gcc -S foo.c) Tj T* ($ gcc -S bar.c) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 606.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Take a look at what is different in the files:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 249.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 348 re B*
Q
q
.960784 .960784 .862745 rg
n 0 312 282 12 re f*
.960784 .960784 .862745 rg
n 0 300 282 12 re f*
.960784 .960784 .862745 rg
n 0 288 90 12 re f*
.960784 .960784 .862745 rg
n 0 276 114 12 re f*
.960784 .960784 .862745 rg
n 0 264 114 12 re f*
.960784 .960784 .862745 rg
n 0 228 168 12 re f*
.960784 .960784 .862745 rg
n 0 216 126 12 re f*
.960784 .960784 .862745 rg
n 0 204 36 12 re f*
.960784 .960784 .862745 rg
n 0 192 198 12 re f*
.960784 .960784 .862745 rg
n 0 144 108 12 re f*
.960784 .960784 .862745 rg
n 0 96 138 12 re f*
.960784 .960784 .862745 rg
n 0 84 96 12 re f*
.960784 .960784 .862745 rg
n 0 72 138 12 re f*
.960784 .960784 .862745 rg
n 0 60 138 12 re f*
.960784 .960784 .862745 rg
n 0 48 120 12 re f*
.960784 .960784 .862745 rg
n 0 36 108 12 re f*
BT 1 0 0 1 0 326 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ diff -u foo.s bar.s) Tj T* .627451 0 0 rg (--- foo.s   2016-07-16 16:09:16.635239145 +0300) Tj T* 0 .627451 0 rg (+++ bar.s   2016-07-16 16:10:43.035575542 +0300) Tj T* /F5 10 Tf .501961 0 .501961 rg (@@ -1,7 +1,9 @@) Tj T* /F3 10 Tf .627451 0 0 rg (-   .file   "foo.c") Tj T* 0 .627451 0 rg (+   .file   "bar.c") Tj T* 0 0 0 rg (    .section    .rodata) Tj T* ( .LC0:) Tj T* .627451 0 0 rg (-   .string "i'm unpatched!") Tj T* 0 .627451 0 rg (+   .string "tralala") Tj T* (+.LC1:) Tj T* (+   .string "you patched my %s\\n") Tj T* 0 0 0 rg (    .text) Tj T* (    .globl  i_m_being_patched) Tj T* (    .type   i_m_being_patched, @function) Tj T* /F5 10 Tf .501961 0 .501961 rg (@@ -13,8 +15,10 @@) Tj T* /F3 10 Tf 0 0 0 rg (    .cfi_offset 6, -16) Tj T* (    movq    %rsp, %rbp) Tj T* (    .cfi_def_cfa_register 6) Tj T* .627451 0 0 rg (-   movl    $.LC0, %edi) Tj T* (-   call    puts) Tj T* 0 .627451 0 rg (+   movl    $.LC0, %esi) Tj T* (+   movl    $.LC1, %edi) Tj T* (+   movl    $0, %eax) Tj T* (+   call    printf) Tj T* 0 0 0 rg (    popq    %rbp) Tj T* (    .cfi_def_cfa 7, 8) Tj T* (    ret) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 217.4236 cm
q
BT 1 0 0 1 0 14 Tm .179488 Tw 12 TL /F1 10 Tf 0 0 0 rg (You can see that the GCC optimized a call to a ) Tj /F3 10 Tf 0 0 0 rg (printf) Tj /F1 10 Tf 0 0 0 rg ( without arguments to a simple ) Tj /F3 10 Tf 0 0 0 rg (puts) Tj /F1 10 Tf 0 0 0 rg ( call, and our) Tj T* 0 Tw (patch brings the ) Tj /F3 10 Tf 0 0 0 rg (printf) Tj /F1 10 Tf 0 0 0 rg ( call back.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 199.4236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Now it's time to produce a patch result. Execute ) Tj /F3 10 Tf 0 0 0 rg (kpatch_gensrc) Tj /F1 10 Tf 0 0 0 rg (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 154.2236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL ($ $KPATCH_PATH/kpatch_gensrc --os=rhel6 -i foo.s -i bar.s -o foobar.s) Tj T* (FATAL! Blocks of type other mismatch 1-1 vs. 1-1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 134.2236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Oops, the difference in ) Tj /F3 10 Tf 0 0 0 rg (.file) Tj /F1 10 Tf 0 0 0 rg ( is fatal. Let's trick that and try again:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 89.02362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL ($ sed -i 's/bar.c/foo.c/' bar.s) Tj T* ($ $KPATCH_PATH/kpatch_gensrc --os=rhel6 -i foo.s -i bar.s -o foobar.s) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
271 0 obj
<<
/Length 12198
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (The result is:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 83.82362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 660 re B*
Q
q
.960784 .960784 .862745 rg
n 24 636 30 12 re f*
.960784 .960784 .862745 rg
n 72 636 42 12 re f*
.960784 .960784 .862745 rg
n 0 624 150 12 re f*
.960784 .960784 .862745 rg
n 24 612 48 12 re f*
.960784 .960784 .862745 rg
n 96 612 42 12 re f*
.960784 .960784 .862745 rg
n 0 600 30 12 re f*
.960784 .960784 .862745 rg
n 24 588 42 12 re f*
.960784 .960784 .862745 rg
n 72 588 96 12 re f*
.960784 .960784 .862745 rg
n 0 576 156 12 re f*
.960784 .960784 .862745 rg
n 24 564 30 12 re f*
.960784 .960784 .862745 rg
n 24 552 36 12 re f*
.960784 .960784 .862745 rg
n 72 552 102 12 re f*
.960784 .960784 .862745 rg
n 24 540 30 12 re f*
.960784 .960784 .862745 rg
n 72 540 102 12 re f*
.960784 .960784 .862745 rg
n 174 540 6 12 re f*
.960784 .960784 .862745 rg
n 186 540 54 12 re f*
.960784 .960784 .862745 rg
n 0 528 108 12 re f*
.960784 .960784 .862745 rg
n 0 516 36 12 re f*
.960784 .960784 .862745 rg
n 24 504 84 12 re f*
.960784 .960784 .862745 rg
n 24 492 30 12 re f*
.960784 .960784 .862745 rg
n 72 492 24 12 re f*
.960784 .960784 .862745 rg
n 24 480 114 12 re f*
.960784 .960784 .862745 rg
n 144 480 12 12 re f*
.960784 .960784 .862745 rg
n 24 468 66 12 re f*
.960784 .960784 .862745 rg
n 96 468 6 12 re f*
.960784 .960784 .862745 rg
n 102 468 6 12 re f*
.960784 .960784 .862745 rg
n 114 468 6 12 re f*
.960784 .960784 .862745 rg
n 120 468 12 12 re f*
.960784 .960784 .862745 rg
n 24 456 24 12 re f*
.960784 .960784 .862745 rg
n 72 456 24 12 re f*
.960784 .960784 .862745 rg
n 96 456 6 12 re f*
.960784 .960784 .862745 rg
n 108 456 24 12 re f*
.960784 .960784 .862745 rg
n 24 444 126 12 re f*
.960784 .960784 .862745 rg
n 156 444 6 12 re f*
.960784 .960784 .862745 rg
n 24 432 24 12 re f*
.960784 .960784 .862745 rg
n 72 432 30 12 re f*
.960784 .960784 .862745 rg
n 102 432 6 12 re f*
.960784 .960784 .862745 rg
n 114 432 24 12 re f*
.960784 .960784 .862745 rg
n 24 420 24 12 re f*
.960784 .960784 .862745 rg
n 72 420 24 12 re f*
.960784 .960784 .862745 rg
n 24 408 24 12 re f*
.960784 .960784 .862745 rg
n 72 408 24 12 re f*
.960784 .960784 .862745 rg
n 24 396 72 12 re f*
.960784 .960784 .862745 rg
n 102 396 6 12 re f*
.960784 .960784 .862745 rg
n 108 396 6 12 re f*
.960784 .960784 .862745 rg
n 120 396 6 12 re f*
.960784 .960784 .862745 rg
n 24 384 18 12 re f*
.960784 .960784 .862745 rg
n 24 372 72 12 re f*
.960784 .960784 .862745 rg
n 0 360 36 12 re f*
.960784 .960784 .862745 rg
n 24 348 30 12 re f*
.960784 .960784 .862745 rg
n 72 348 102 12 re f*
.960784 .960784 .862745 rg
n 174 348 6 12 re f*
.960784 .960784 .862745 rg
n 186 348 114 12 re f*
.960784 .960784 .862745 rg
n 0 336 132 12 re f*
.960784 .960784 .862745 rg
n 0 324 204 12 re f*
.960784 .960784 .862745 rg
n 24 312 72 12 re f*
.960784 .960784 .862745 rg
n 102 312 72 12 re f*
.960784 .960784 .862745 rg
n 174 312 6 12 re f*
.960784 .960784 .862745 rg
n 180 312 24 12 re f*
.960784 .960784 .862745 rg
n 204 312 6 12 re f*
.960784 .960784 .862745 rg
n 210 312 54 12 re f*
.960784 .960784 .862745 rg
n 24 300 36 12 re f*
.960784 .960784 .862745 rg
n 72 300 144 12 re f*
.960784 .960784 .862745 rg
n 24 288 30 12 re f*
.960784 .960784 .862745 rg
n 72 288 144 12 re f*
.960784 .960784 .862745 rg
n 216 288 6 12 re f*
.960784 .960784 .862745 rg
n 228 288 54 12 re f*
.960784 .960784 .862745 rg
n 0 276 150 12 re f*
.960784 .960784 .862745 rg
n 0 264 78 12 re f*
.960784 .960784 .862745 rg
n 24 252 84 12 re f*
.960784 .960784 .862745 rg
n 24 240 30 12 re f*
.960784 .960784 .862745 rg
n 72 240 24 12 re f*
.960784 .960784 .862745 rg
n 24 228 114 12 re f*
.960784 .960784 .862745 rg
n 144 228 12 12 re f*
.960784 .960784 .862745 rg
n 24 216 66 12 re f*
.960784 .960784 .862745 rg
n 96 216 6 12 re f*
.960784 .960784 .862745 rg
n 102 216 6 12 re f*
.960784 .960784 .862745 rg
n 114 216 6 12 re f*
.960784 .960784 .862745 rg
n 120 216 12 12 re f*
.960784 .960784 .862745 rg
n 24 204 24 12 re f*
.960784 .960784 .862745 rg
n 72 204 24 12 re f*
.960784 .960784 .862745 rg
n 96 204 6 12 re f*
.960784 .960784 .862745 rg
n 108 204 24 12 re f*
.960784 .960784 .862745 rg
n 24 192 126 12 re f*
.960784 .960784 .862745 rg
n 156 192 6 12 re f*
.960784 .960784 .862745 rg
n 24 180 24 12 re f*
.960784 .960784 .862745 rg
n 72 180 72 12 re f*
.960784 .960784 .862745 rg
n 144 180 6 12 re f*
.960784 .960784 .862745 rg
n 156 180 24 12 re f*
.960784 .960784 .862745 rg
n 24 168 24 12 re f*
.960784 .960784 .862745 rg
n 72 168 72 12 re f*
.960784 .960784 .862745 rg
n 144 168 6 12 re f*
.960784 .960784 .862745 rg
n 156 168 24 12 re f*
.960784 .960784 .862745 rg
n 24 156 24 12 re f*
.960784 .960784 .862745 rg
n 72 156 12 12 re f*
.960784 .960784 .862745 rg
n 84 156 6 12 re f*
.960784 .960784 .862745 rg
n 96 156 24 12 re f*
.960784 .960784 .862745 rg
n 24 144 24 12 re f*
.960784 .960784 .862745 rg
n 72 144 36 12 re f*
.960784 .960784 .862745 rg
n 24 132 24 12 re f*
.960784 .960784 .862745 rg
n 72 132 24 12 re f*
.960784 .960784 .862745 rg
n 24 120 72 12 re f*
.960784 .960784 .862745 rg
n 102 120 6 12 re f*
.960784 .960784 .862745 rg
n 108 120 6 12 re f*
.960784 .960784 .862745 rg
n 120 120 6 12 re f*
.960784 .960784 .862745 rg
n 24 108 18 12 re f*
.960784 .960784 .862745 rg
n 24 96 72 12 re f*
.960784 .960784 .862745 rg
n 0 84 78 12 re f*
.960784 .960784 .862745 rg
n 24 72 30 12 re f*
.960784 .960784 .862745 rg
n 72 72 144 12 re f*
.960784 .960784 .862745 rg
n 216 72 6 12 re f*
.960784 .960784 .862745 rg
n 228 72 156 12 re f*
.960784 .960784 .862745 rg
n 0 60 174 12 re f*
.960784 .960784 .862745 rg
n 24 48 66 12 re f*
.960784 .960784 .862745 rg
n 24 24 72 12 re f*
.960784 .960784 .862745 rg
n 102 24 84 12 re f*
.960784 .960784 .862745 rg
n 186 24 6 12 re f*
.960784 .960784 .862745 rg
n 192 24 18 12 re f*
.960784 .960784 .862745 rg
n 210 24 6 12 re f*
.960784 .960784 .862745 rg
n 216 24 54 12 re f*
.960784 .960784 .862745 rg
n 0 12 90 12 re f*
.960784 .960784 .862745 rg
n 24 0 42 12 re f*
.960784 .960784 .862745 rg
n 72 0 156 12 re f*
BT 1 0 0 1 0 638 Tm 12 TL /F3 10 Tf 0 0 0 rg (    ) Tj .490196 .564706 .160784 rg (.file) Tj 0 0 0 rg (   ) Tj .729412 .129412 .129412 rg ("foo.c") Tj 0 0 0 rg  T* /F4 10 Tf .25098 .501961 .501961 rg (#---------- var ---------) Tj T* /F3 10 Tf 0 0 0 rg (    ) Tj .490196 .564706 .160784 rg (.section) Tj 0 0 0 rg (    ) Tj .533333 0 0 rg (.rodata) Tj 0 0 0 rg  T* .627451 .627451 0 rg (.LC0:) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.string) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ("i'm unpatched!") Tj 0 0 0 rg  T* /F4 10 Tf .25098 .501961 .501961 rg (#---------- func ---------) Tj T* /F3 10 Tf 0 0 0 rg (    ) Tj .490196 .564706 .160784 rg (.text) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.globl) Tj 0 0 0 rg (  ) Tj .533333 0 0 rg (i_m_being_patched) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.type) Tj 0 0 0 rg (   ) Tj .533333 0 0 rg (i_m_being_patched) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .490196 .564706 .160784 rg (@function) Tj 0 0 0 rg  T* .627451 .627451 0 rg (i_m_being_patched:) Tj 0 0 0 rg  T* .627451 .627451 0 rg (.LFB0:) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_startproc) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (pushq) Tj 0 0 0 rg (   ) Tj .098039 .090196 .486275 rg (%rbp) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_def_cfa_offset) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (16) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_offset) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (6) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (-) Tj .4 .4 .4 rg (16) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (movq) Tj 0 0 0 rg (    ) Tj .098039 .090196 .486275 rg (%rsp) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (%rbp) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_def_cfa_register) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (6) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (movl) Tj 0 0 0 rg (    ) Tj .533333 0 0 rg ($.LC0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (%edi) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (call) Tj 0 0 0 rg (    ) Tj .533333 0 0 rg (puts) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (popq) Tj 0 0 0 rg (    ) Tj .098039 .090196 .486275 rg (%rbp) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_def_cfa) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (7) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (8) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (ret) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_endproc) Tj 0 0 0 rg  T* .627451 .627451 0 rg (.LFE0:) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.size) Tj 0 0 0 rg (   ) Tj .533333 0 0 rg (i_m_being_patched) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (.-i_m_being_patched) Tj 0 0 0 rg  T* .627451 .627451 0 rg (i_m_being_patched.Lfe:) Tj 0 0 0 rg  T* /F4 10 Tf .25098 .501961 .501961 rg (#---------- kpatch begin ---------) Tj T* /F3 10 Tf 0 0 0 rg (    ) Tj .490196 .564706 .160784 rg (.pushsection) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (.kpatch.text) Tj 0 0 0 rg (,) Tj .729412 .129412 .129412 rg ("ax") Tj 0 0 0 rg (,) Tj .490196 .564706 .160784 rg (@progbits) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.globl) Tj 0 0 0 rg (  ) Tj .533333 0 0 rg (i_m_being_patched.kpatch) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.type) Tj 0 0 0 rg (   ) Tj .533333 0 0 rg (i_m_being_patched.kpatch) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .490196 .564706 .160784 rg (@function) Tj 0 0 0 rg  T* .627451 .627451 0 rg (i_m_being_patched.kpatch:) Tj 0 0 0 rg  T* .627451 .627451 0 rg (.LFB0.kpatch:) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_startproc) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (pushq) Tj 0 0 0 rg (   ) Tj .098039 .090196 .486275 rg (%rbp) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_def_cfa_offset) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (16) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_offset) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (6) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (-) Tj .4 .4 .4 rg (16) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (movq) Tj 0 0 0 rg (    ) Tj .098039 .090196 .486275 rg (%rsp) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (%rbp) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_def_cfa_register) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (6) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (movl) Tj 0 0 0 rg (    ) Tj .533333 0 0 rg ($.LC0.kpatch) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (%esi) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (movl) Tj 0 0 0 rg (    ) Tj .533333 0 0 rg ($.LC1.kpatch) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (%edi) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (movl) Tj 0 0 0 rg (    ) Tj .533333 0 0 rg ($0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (%eax) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (call) Tj 0 0 0 rg (    ) Tj .533333 0 0 rg (printf) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (popq) Tj 0 0 0 rg (    ) Tj .098039 .090196 .486275 rg (%rbp) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_def_cfa) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (7) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (8) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (ret) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_endproc) Tj 0 0 0 rg  T* .627451 .627451 0 rg (.LFE0.kpatch:) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.size) Tj 0 0 0 rg (   ) Tj .533333 0 0 rg (i_m_being_patched.kpatch) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (.-i_m_being_patched.kpatch) Tj 0 0 0 rg  T* .627451 .627451 0 rg (i_m_being_patched.kpatch_end:) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.popsection) Tj 0 0 0 rg  T*  T* (    ) Tj .490196 .564706 .160784 rg (.pushsection) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (.kpatch.strtab) Tj 0 0 0 rg (,) Tj .729412 .129412 .129412 rg ("a") Tj 0 0 0 rg (,) Tj .490196 .564706 .160784 rg (@progbits) Tj 0 0 0 rg  T* .627451 .627451 0 rg (kpatch_strtab1:) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.string) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ("i_m_being_patched.kpatch") Tj 0 0 0 rg  T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
272 0 obj
<<
/Length 11288
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 247.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 516 re B*
Q
q
.960784 .960784 .862745 rg
n 24 492 66 12 re f*
.960784 .960784 .862745 rg
n 24 480 72 12 re f*
.960784 .960784 .862745 rg
n 102 480 72 12 re f*
.960784 .960784 .862745 rg
n 174 480 6 12 re f*
.960784 .960784 .862745 rg
n 180 480 18 12 re f*
.960784 .960784 .862745 rg
n 198 480 6 12 re f*
.960784 .960784 .862745 rg
n 204 480 54 12 re f*
.960784 .960784 .862745 rg
n 0 468 132 12 re f*
.960784 .960784 .862745 rg
n 24 456 30 12 re f*
.960784 .960784 .862745 rg
n 60 456 102 12 re f*
.960784 .960784 .862745 rg
n 24 444 30 12 re f*
.960784 .960784 .862745 rg
n 60 444 126 12 re f*
.960784 .960784 .862745 rg
n 192 444 6 12 re f*
.960784 .960784 .862745 rg
n 204 444 102 12 re f*
.960784 .960784 .862745 rg
n 24 432 30 12 re f*
.960784 .960784 .862745 rg
n 60 432 144 12 re f*
.960784 .960784 .862745 rg
n 24 420 30 12 re f*
.960784 .960784 .862745 rg
n 60 420 168 12 re f*
.960784 .960784 .862745 rg
n 234 420 6 12 re f*
.960784 .960784 .862745 rg
n 246 420 144 12 re f*
.960784 .960784 .862745 rg
n 24 408 30 12 re f*
.960784 .960784 .862745 rg
n 60 408 84 12 re f*
.960784 .960784 .862745 rg
n 24 396 30 12 re f*
.960784 .960784 .862745 rg
n 60 396 6 12 re f*
.960784 .960784 .862745 rg
n 24 384 66 12 re f*
.960784 .960784 .862745 rg
n 0 360 204 12 re f*
.960784 .960784 .862745 rg
n 0 348 156 12 re f*
.960784 .960784 .862745 rg
n 24 336 36 12 re f*
.960784 .960784 .862745 rg
n 72 336 24 12 re f*
.960784 .960784 .862745 rg
n 24 324 30 12 re f*
.960784 .960784 .862745 rg
n 72 324 24 12 re f*
.960784 .960784 .862745 rg
n 96 324 6 12 re f*
.960784 .960784 .862745 rg
n 108 324 54 12 re f*
.960784 .960784 .862745 rg
n 0 312 30 12 re f*
.960784 .960784 .862745 rg
n 0 300 36 12 re f*
.960784 .960784 .862745 rg
n 24 288 84 12 re f*
.960784 .960784 .862745 rg
n 24 276 30 12 re f*
.960784 .960784 .862745 rg
n 72 276 24 12 re f*
.960784 .960784 .862745 rg
n 24 264 114 12 re f*
.960784 .960784 .862745 rg
n 144 264 12 12 re f*
.960784 .960784 .862745 rg
n 24 252 66 12 re f*
.960784 .960784 .862745 rg
n 96 252 6 12 re f*
.960784 .960784 .862745 rg
n 102 252 6 12 re f*
.960784 .960784 .862745 rg
n 114 252 6 12 re f*
.960784 .960784 .862745 rg
n 120 252 12 12 re f*
.960784 .960784 .862745 rg
n 24 240 24 12 re f*
.960784 .960784 .862745 rg
n 72 240 24 12 re f*
.960784 .960784 .862745 rg
n 96 240 6 12 re f*
.960784 .960784 .862745 rg
n 108 240 24 12 re f*
.960784 .960784 .862745 rg
n 24 228 126 12 re f*
.960784 .960784 .862745 rg
n 156 228 6 12 re f*
.960784 .960784 .862745 rg
n 0 216 24 12 re f*
.960784 .960784 .862745 rg
n 24 204 24 12 re f*
.960784 .960784 .862745 rg
n 72 204 102 12 re f*
.960784 .960784 .862745 rg
n 24 192 24 12 re f*
.960784 .960784 .862745 rg
n 72 192 12 12 re f*
.960784 .960784 .862745 rg
n 84 192 6 12 re f*
.960784 .960784 .862745 rg
n 96 192 24 12 re f*
.960784 .960784 .862745 rg
n 24 180 24 12 re f*
.960784 .960784 .862745 rg
n 72 180 12 12 re f*
.960784 .960784 .862745 rg
n 84 180 6 12 re f*
.960784 .960784 .862745 rg
n 96 180 24 12 re f*
.960784 .960784 .862745 rg
n 24 168 24 12 re f*
.960784 .960784 .862745 rg
n 72 168 30 12 re f*
.960784 .960784 .862745 rg
n 24 156 18 12 re f*
.960784 .960784 .862745 rg
n 48 156 18 12 re f*
.960784 .960784 .862745 rg
n 24 144 72 12 re f*
.960784 .960784 .862745 rg
n 0 132 36 12 re f*
.960784 .960784 .862745 rg
n 24 120 30 12 re f*
.960784 .960784 .862745 rg
n 72 120 24 12 re f*
.960784 .960784 .862745 rg
n 96 120 6 12 re f*
.960784 .960784 .862745 rg
n 108 120 36 12 re f*
.960784 .960784 .862745 rg
n 24 108 72 12 re f*
.960784 .960784 .862745 rg
n 102 108 72 12 re f*
.960784 .960784 .862745 rg
n 174 108 6 12 re f*
.960784 .960784 .862745 rg
n 180 108 24 12 re f*
.960784 .960784 .862745 rg
n 204 108 6 12 re f*
.960784 .960784 .862745 rg
n 210 108 54 12 re f*
.960784 .960784 .862745 rg
n 0 96 72 12 re f*
.960784 .960784 .862745 rg
n 24 84 42 12 re f*
.960784 .960784 .862745 rg
n 72 84 54 12 re f*
.960784 .960784 .862745 rg
n 24 72 66 12 re f*
.960784 .960784 .862745 rg
n 24 60 72 12 re f*
.960784 .960784 .862745 rg
n 102 60 72 12 re f*
.960784 .960784 .862745 rg
n 174 60 6 12 re f*
.960784 .960784 .862745 rg
n 180 60 24 12 re f*
.960784 .960784 .862745 rg
n 204 60 6 12 re f*
.960784 .960784 .862745 rg
n 210 60 54 12 re f*
.960784 .960784 .862745 rg
n 0 48 72 12 re f*
.960784 .960784 .862745 rg
n 24 36 42 12 re f*
.960784 .960784 .862745 rg
n 72 36 126 12 re f*
.960784 .960784 .862745 rg
n 24 24 66 12 re f*
.960784 .960784 .862745 rg
n 24 12 36 12 re f*
.960784 .960784 .862745 rg
n 72 12 264 12 re f*
.960784 .960784 .862745 rg
n 24 0 48 12 re f*
.960784 .960784 .862745 rg
n 96 0 90 12 re f*
.960784 .960784 .862745 rg
n 186 0 6 12 re f*
.960784 .960784 .862745 rg
n 192 0 12 12 re f*
.960784 .960784 .862745 rg
n 204 0 6 12 re f*
.960784 .960784 .862745 rg
n 210 0 54 12 re f*
BT 1 0 0 1 0 494 Tm 12 TL /F3 10 Tf 0 0 0 rg (    ) Tj .490196 .564706 .160784 rg (.popsection) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.pushsection) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (.kpatch.info) Tj 0 0 0 rg (,) Tj .729412 .129412 .129412 rg ("a") Tj 0 0 0 rg (,) Tj .490196 .564706 .160784 rg (@progbits) Tj 0 0 0 rg  T* .627451 .627451 0 rg (i_m_being_patched.Lpi:) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.quad) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (i_m_being_patched) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.quad) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (i_m_being_patched.Lfe) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (-) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (i_m_being_patched) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.quad) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (i_m_being_patched.kpatch) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.quad) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (i_m_being_patched.kpatch_end) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (-) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (i_m_being_patched.kpatch) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.quad) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (kpatch_strtab1) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.quad) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (0) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.popsection) Tj 0 0 0 rg  T*  T* /F4 10 Tf .25098 .501961 .501961 rg (#---------- kpatch end -----------) Tj T* (#---------- func ---------) Tj T* /F3 10 Tf 0 0 0 rg (    ) Tj .490196 .564706 .160784 rg (.globl) Tj 0 0 0 rg (  ) Tj .533333 0 0 rg (main) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.type) Tj 0 0 0 rg (   ) Tj .533333 0 0 rg (main) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .490196 .564706 .160784 rg (@function) Tj 0 0 0 rg  T* .627451 .627451 0 rg (main:) Tj 0 0 0 rg  T* .627451 .627451 0 rg (.LFB1:) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_startproc) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (pushq) Tj 0 0 0 rg (   ) Tj .098039 .090196 .486275 rg (%rbp) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_def_cfa_offset) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (16) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_offset) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (6) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (-) Tj .4 .4 .4 rg (16) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (movq) Tj 0 0 0 rg (    ) Tj .098039 .090196 .486275 rg (%rsp) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (%rbp) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_def_cfa_register) Tj 0 0 0 rg ( ) Tj .4 .4 .4 rg (6) Tj 0 0 0 rg  T* .627451 .627451 0 rg (.L3:) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (call) Tj 0 0 0 rg (    ) Tj .533333 0 0 rg (i_m_being_patched) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (movl) Tj 0 0 0 rg (    ) Tj .533333 0 0 rg ($1) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (%edi) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (movl) Tj 0 0 0 rg (    ) Tj .533333 0 0 rg ($0) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (%eax) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (call) Tj 0 0 0 rg (    ) Tj .533333 0 0 rg (sleep) Tj 0 0 0 rg  T* (    ) Tj 0 0 1 rg (jmp) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (.L3) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.cfi_endproc) Tj 0 0 0 rg  T* .627451 .627451 0 rg (.LFE1:) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.size) Tj 0 0 0 rg (   ) Tj .533333 0 0 rg (main) Tj 0 0 0 rg (,) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (.-main) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.pushsection) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (.kpatch.data) Tj 0 0 0 rg (,) Tj .729412 .129412 .129412 rg ("aw") Tj 0 0 0 rg (,) Tj .490196 .564706 .160784 rg (@progbits) Tj 0 0 0 rg  T* .627451 .627451 0 rg (.LC0.kpatch:) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.string) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ("tralala") Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.popsection) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.pushsection) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (.kpatch.data) Tj 0 0 0 rg (,) Tj .729412 .129412 .129412 rg ("aw") Tj 0 0 0 rg (,) Tj .490196 .564706 .160784 rg (@progbits) Tj 0 0 0 rg  T* .627451 .627451 0 rg (.LC1.kpatch:) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.string) Tj 0 0 0 rg ( ) Tj .729412 .129412 .129412 rg ("you patched my %s\\n") Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.popsection) Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.ident) Tj 0 0 0 rg (  ) Tj .729412 .129412 .129412 rg ("GCC: \(Ubuntu 4.8.4-2ubuntu1~14.04.3\) 4.8.4") Tj 0 0 0 rg  T* (    ) Tj .490196 .564706 .160784 rg (.section) Tj 0 0 0 rg (    ) Tj .533333 0 0 rg (.note.GNU-stack) Tj 0 0 0 rg (,) Tj .729412 .129412 .129412 rg ("") Tj 0 0 0 rg (,) Tj .490196 .564706 .160784 rg (@progbits) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 191.8236 cm
q
BT 1 0 0 1 0 38 Tm 1.238314 Tw 12 TL /F1 10 Tf 0 0 0 rg (A watchful reader have spotted two new sections: ) Tj /F3 10 Tf 0 0 0 rg (.kpatch.info) Tj /F1 10 Tf 0 0 0 rg ( and ) Tj /F3 10 Tf 0 0 0 rg (.kpatch.strtab) Tj /F1 10 Tf 0 0 0 rg (. The former) Tj T* 0 Tw .42811 Tw (contains information about the function being patched and the patch itself, such as sizes of the functions.) Tj T* 0 Tw 1.764524 Tw (The compiler generates a relocation section ) Tj /F3 10 Tf 0 0 0 rg (.rela.kpatch.info) Tj /F1 10 Tf 0 0 0 rg ( against it that references symbols) Tj T* 0 Tw (from both the original binary as patch targets and the patch as the patched function.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 161.8236 cm
q
BT 1 0 0 1 0 14 Tm 1.406412 Tw 12 TL /F1 10 Tf 0 0 0 rg (We should now compile both original and patched assembler files into binaries, keeping the relocation) Tj T* 0 Tw (information with linker's ) Tj /F3 10 Tf 0 0 0 rg (-q) Tj /F1 10 Tf 0 0 0 rg ( switch:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 116.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F3 10 Tf 12 TL ($ gcc -o foo foo.s) Tj T* ($ gcc -o foobar foobar.s -Wl,-q) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 96.62362 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (and proceed to the building a ) Tj /F3 10 Tf 0 0 0 rg (kpatch) Tj /F1 10 Tf 0 0 0 rg ( file out of these.) Tj T* ET
Q
Q
 
endstream
endobj
273 0 obj
<<
/Length 6955
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 750.0236 cm
q
BT 1 0 0 1 0 2.5 Tm 15 TL /F6 12.5 Tf 0 0 0 rg (Making a kpatch) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 726.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (Removing non-kpatch sections with ) Tj /F3 10 Tf 0 0 0 rg (kpatch_strip) Tj ( ) Tj (--strip) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 708.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (The binary containing patch \() Tj /F3 10 Tf 0 0 0 rg (foobar) Tj /F1 10 Tf 0 0 0 rg ( in the example above\) has extra sections:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 506.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 192 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 170 Tm /F3 10 Tf 12 TL ($ readelf -S foobar | grep -A 1 kpatch) Tj T* (  [16] .kpatch.text      PROGBITS         0000000000400662  00000662) Tj T* (       000000000000001a  0000000000000000  AX       0     0     1) Tj T* (  [17] .rela.kpatch.text RELA             0000000000000000  00001ef0) Tj T* (       0000000000000048  0000000000000018          40    16     8) Tj T* (--) Tj T* (  [20] .kpatch.strtab    PROGBITS         000000000040069b  0000069b) Tj T* (       0000000000000019  0000000000000000   A       0     0     1) Tj T* (  [21] .kpatch.info      PROGBITS         00000000004006b4  000006b4) Tj T* (       0000000000000030  0000000000000000   A       0     0     1) Tj T* (  [22] .rela.kpatch.info RELA             0000000000000000  00001f38) Tj T* (       0000000000000048  0000000000000018          40    21     8) Tj T* (--) Tj T* (  [36] .kpatch.data      PROGBITS         0000000000601050  00001050) Tj T* (       000000000000001b  0000000000000000  WA       0     0     1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 474.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.017132 Tw (This is where the patch actually hides and we had to extract it from here. First, we need to strip all the) Tj T* 0 Tw (unnecessary data from the patched binary:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 405.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 60 re B*
Q
q
0 0 0 rg
BT 1 0 0 1 0 38 Tm /F3 10 Tf 12 TL ($ kpatch_strip --strip foobar foobar.stripped) Tj T* ($ stat -c '%n: %s' foobar foobar.stripped) Tj T* (foobar: 10900) Tj T* (foobar.stripped: 6584) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 373.6236 cm
q
BT 1 0 0 1 0 14 Tm .348314 Tw 12 TL /F1 10 Tf 0 0 0 rg (The ) Tj /F3 10 Tf 0 0 0 rg (--strip) Tj /F1 10 Tf 0 0 0 rg ( mode of the ) Tj /F3 10 Tf 0 0 0 rg (kpatch_strip) Tj /F1 10 Tf 0 0 0 rg ( operation removes all the ) Tj /F3 10 Tf 0 0 0 rg (kpatch) Tj /F1 10 Tf 0 0 0 rg (-unrelated sections, setting) Tj T* 0 Tw (their type to ) Tj /F3 10 Tf 0 0 0 rg (PROG_NOBITS) Tj /F1 10 Tf 0 0 0 rg ( and modifying sections offsets.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 349.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (Fix up relocations) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 319.6236 cm
q
BT 1 0 0 1 0 14 Tm 1.031984 Tw 12 TL /F1 10 Tf 0 0 0 rg (Patch code, packed into ) Tj /F3 10 Tf 0 0 0 rg (.kpatch.text) Tj /F1 10 Tf 0 0 0 rg ( section, references its part and parts of the original binary via) Tj T* 0 Tw (relocations.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 301.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (These relocations are fixed by invoking ) Tj /F3 10 Tf 0 0 0 rg (kpatch_strip) Tj ( ) Tj (--rel-fixup) Tj /F1 10 Tf 0 0 0 rg ( as follows:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 295.6236 cm
Q
q
1 0 0 1 62.69291 295.6236 cm
Q
q
1 0 0 1 62.69291 283.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (All relocations of type ) Tj /F3 10 Tf 0 0 0 rg (PLT32) Tj /F1 10 Tf 0 0 0 rg ( are changed to ) Tj /F3 10 Tf 0 0 0 rg (PC32) Tj /F1 10 Tf 0 0 0 rg ( since they are resolved via the jump table.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 277.6236 cm
Q
q
1 0 0 1 62.69291 253.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 1.051098 Tw 12 TL /F1 10 Tf 0 0 0 rg (All the relocations internal to the patch are left as is -- that is, if newly introduced code references) Tj T* 0 Tw (newly introduced function or data. The ) Tj /F3 10 Tf 0 0 0 rg (doctor) Tj /F1 10 Tf 0 0 0 rg ( will have enough information to resolve these.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 247.6236 cm
Q
q
1 0 0 1 62.69291 211.6236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm .688443 Tw 12 TL /F1 10 Tf 0 0 0 rg (Some of these relocations are referencing original local symbols introduced by compiler named like) Tj T* 0 Tw .678443 Tw /F3 10 Tf 0 0 0 rg (.LC0) Tj /F1 10 Tf 0 0 0 rg (. Each relocation referencing such a symbols is replaced to relocation referencing section that) Tj T* 0 Tw (contains them with an updated ) Tj /F3 10 Tf 0 0 0 rg (r_addend) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 205.6236 cm
Q
q
1 0 0 1 62.69291 79.62362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 111 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 99 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .599982 Tw (Relocations referencing Thread Local Storage symbols are harder to handle, mostly because of the) Tj T* 0 Tw (variety of TLS models in use.) Tj T* ET
Q
Q
q
1 0 0 1 23 57 cm
q
BT 1 0 0 1 0 26 Tm 2.19229 Tw 12 TL /F1 10 Tf 0 0 0 rg (Relocations of type ) Tj /F3 10 Tf 0 0 0 rg (TPOFF32) Tj /F1 10 Tf 0 0 0 rg ( are generated in ) Tj /F3 10 Tf 0 0 0 rg (EXEC) Tj /F1 10 Tf 0 0 0 rg (utable binaries for TLS symbols defined in) Tj T* 0 Tw 1.454597 Tw (application. We ensure that \(negative\) offset values into TLS block coincide between original and) Tj T* 0 Tw (patched binaries.) Tj T* ET
Q
Q
q
1 0 0 1 23 15 cm
q
BT 1 0 0 1 0 26 Tm 2.20748 Tw 12 TL /F1 10 Tf 0 0 0 rg (Relocations of type ) Tj /F3 10 Tf 0 0 0 rg (GOTTPOFF) Tj /F1 10 Tf 0 0 0 rg ( are generated when code references TLS variable from another) Tj T* 0 Tw 1.301984 Tw (object. These are tricky: code looks for appropriate original ) Tj /F3 10 Tf 0 0 0 rg (GOT) Tj /F1 10 Tf 0 0 0 rg ( entry which is filled via ) Tj /F3 10 Tf 0 0 0 rg (TPOFF64) Tj /F1 10 Tf 0 0 0 rg  T* 0 Tw (relocation and writes the offset of this entry into the ) Tj /F3 10 Tf 0 0 0 rg (r_addend) Tj /F1 10 Tf 0 0 0 rg ( field of ) Tj /F3 10 Tf 0 0 0 rg (GOTTPOFF) Tj /F1 10 Tf 0 0 0 rg ( relocation.) Tj T* ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (All the other TLS relocation types are not supported since there is no full TLS support yet.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 79.62362 cm
Q
 
endstream
endobj
274 0 obj
<<
/Length 9128
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
BT 1 0 0 1 0 14 Tm .77248 Tw 12 TL /F1 10 Tf 0 0 0 rg (Another important part is the interaction between ) Tj /F3 10 Tf 0 0 0 rg (kpatch_gensrc) Tj /F1 10 Tf 0 0 0 rg ( generation of ) Tj /F3 10 Tf 0 0 0 rg (GOTPCREL) Tj /F1 10 Tf 0 0 0 rg ( entries and) Tj T* 0 Tw (linker optimization for it.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 723.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Whenever assembly code of the patch references variable not coming from patch there are two options.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 693.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.092765 Tw (First, the referenced variable can be defined in the original code that can be referenced as is since we) Tj T* 0 Tw (allocate patches close to the original code and the 32-bit PC-relative relocation should be enough.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 651.0236 cm
q
BT 1 0 0 1 0 26 Tm .08436 Tw 12 TL /F1 10 Tf 0 0 0 rg (Second, the referenced non-TLS variable can be imported by the original code, e.g. from ) Tj /F3 10 Tf 0 0 0 rg (glibc) Tj /F1 10 Tf 0 0 0 rg ( library. In) Tj T* 0 Tw .590941 Tw (that case, the variable can be further than 2GiB away from the patch code and it ought to have a way to) Tj T* 0 Tw (address it in all the 64-bit address space.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 609.0236 cm
q
BT 1 0 0 1 0 26 Tm 1.156098 Tw 12 TL /F1 10 Tf 0 0 0 rg (There is no reliable way to distinguish these at the compile time, so we replace ) Tj /F2 10 Tf (EVERY) Tj /F1 10 Tf ( reference to a) Tj T* 0 Tw 4.702126 Tw (non-patch variable with an indirect reference using a Global Offset Table entry. This is what) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (--force-gotpcrel) Tj /F1 10 Tf 0 0 0 rg ( option of ) Tj /F3 10 Tf 0 0 0 rg (kpatch_gensrc) Tj /F1 10 Tf 0 0 0 rg ( does.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 555.0236 cm
q
BT 1 0 0 1 0 38 Tm 1.352651 Tw 12 TL /F1 10 Tf 0 0 0 rg (Linker knows what symbols are defined in original binary and what symbols are coming from imported) Tj T* 0 Tw 1.966412 Tw (shared libraries. Linker resolves symbols coming from the original binary by setting a correct original) Tj T* 0 Tw 2.349318 Tw (section number to the symbol. Symbols defined in the patch are assigned section number of either) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (.kpatch.text) Tj /F1 10 Tf 0 0 0 rg ( or ) Tj /F3 10 Tf 0 0 0 rg (.kpatch.data) Tj /F1 10 Tf 0 0 0 rg ( at this stage.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 537.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Some linker versions optimize our two-stage references to original symbols via ) Tj /F3 10 Tf 0 0 0 rg (GOTPCREL) Tj /F1 10 Tf 0 0 0 rg (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 491.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
.960784 .960784 .862745 rg
n 0 12 18 12 re f*
.960784 .960784 .862745 rg
n 24 12 90 12 re f*
.960784 .960784 .862745 rg
n 114 12 6 12 re f*
.960784 .960784 .862745 rg
n 120 12 24 12 re f*
.960784 .960784 .862745 rg
n 144 12 12 12 re f*
.960784 .960784 .862745 rg
n 162 12 24 12 re f*
.960784 .960784 .862745 rg
n 0 0 18 12 re f*
.960784 .960784 .862745 rg
n 24 0 6 12 re f*
.960784 .960784 .862745 rg
n 30 0 24 12 re f*
.960784 .960784 .862745 rg
n 54 0 12 12 re f*
.960784 .960784 .862745 rg
n 72 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 1 rg (mov) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (foobar@GOTPCREL) Tj 0 0 0 rg (\() Tj .098039 .090196 .486275 rg (%rip) Tj 0 0 0 rg (\),) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (%rax) Tj 0 0 0 rg  T* 0 0 1 rg (mov) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (\() Tj .098039 .090196 .486275 rg (%rax) Tj 0 0 0 rg (\),) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (%rax) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 471.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (into one-stage) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 426.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
.960784 .960784 .862745 rg
n 0 12 18 12 re f*
.960784 .960784 .862745 rg
n 24 12 36 12 re f*
.960784 .960784 .862745 rg
n 60 12 6 12 re f*
.960784 .960784 .862745 rg
n 66 12 24 12 re f*
.960784 .960784 .862745 rg
n 90 12 12 12 re f*
.960784 .960784 .862745 rg
n 108 12 24 12 re f*
.960784 .960784 .862745 rg
n 0 0 18 12 re f*
.960784 .960784 .862745 rg
n 24 0 6 12 re f*
.960784 .960784 .862745 rg
n 30 0 24 12 re f*
.960784 .960784 .862745 rg
n 54 0 12 12 re f*
.960784 .960784 .862745 rg
n 72 0 24 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F3 10 Tf 0 0 1 rg (lea) Tj 0 0 0 rg ( ) Tj .533333 0 0 rg (foobar) Tj 0 0 0 rg (\() Tj .098039 .090196 .486275 rg (%rip) Tj 0 0 0 rg (\),) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (%rax) Tj 0 0 0 rg  T* 0 0 1 rg (mov) Tj 0 0 0 rg ( ) Tj 0 0 0 rg (\() Tj .098039 .090196 .486275 rg (%rax) Tj 0 0 0 rg (\),) Tj 0 0 0 rg ( ) Tj .098039 .090196 .486275 rg (%rax) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 394.6236 cm
q
BT 1 0 0 1 0 14 Tm .123318 Tw 12 TL /F1 10 Tf 0 0 0 rg (changing relocation type from ) Tj /F3 10 Tf 0 0 0 rg (GOTPCREL) Tj /F1 10 Tf 0 0 0 rg ( to a simple ) Tj /F3 10 Tf 0 0 0 rg (PC32) Tj /F1 10 Tf 0 0 0 rg (. The ) Tj /F3 10 Tf 0 0 0 rg (kpatch_strip) Tj /F1 10 Tf 0 0 0 rg ( code ensures that this is) Tj T* 0 Tw (always done for known symbols so there is no dependency on particular linker behavior.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 364.6236 cm
q
BT 1 0 0 1 0 14 Tm .197633 Tw 12 TL /F1 10 Tf 0 0 0 rg (All the references to the variables imported by the original code are left with the ) Tj /F3 10 Tf 0 0 0 rg (GOTPCREL) Tj /F1 10 Tf 0 0 0 rg ( relocation and) Tj T* 0 Tw (these are correctly resolved during the patching, ) Tj /F2 10 Tf (except) Tj /F1 10 Tf ( for the variables ) Tj /F3 10 Tf 0 0 0 rg (COPY) Tj /F1 10 Tf 0 0 0 rg ( ed by the original binary.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 340.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (Stripping extra information via ) Tj /F3 10 Tf 0 0 0 rg (strip) Tj ( ) Tj (--strip-unneeded) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 322.6236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Now that we have fixed ) Tj /F3 10 Tf 0 0 0 rg (kpatch) Tj /F1 10 Tf 0 0 0 rg ( relocations we can finally strip all the unnecessary symbols with ) Tj /F3 10 Tf 0 0 0 rg (strip) Tj /F1 10 Tf 0 0 0 rg (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 289.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( strip --strip-unneeded foobar.stripped) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 257.4236 cm
q
BT 1 0 0 1 0 14 Tm .701163 Tw 12 TL /F1 10 Tf 0 0 0 rg (This will remove the symbols that have no relocations targeted at them, so, most of the symbols, except) Tj T* 0 Tw (for the sections, patched functions with ) Tj /F3 10 Tf 0 0 0 rg (.kpatch) Tj /F1 10 Tf 0 0 0 rg ( suffix and symbols referenced from the patch.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 233.4236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (Undoing offsets ) Tj /F3 10 Tf 0 0 0 rg (kpatch_strip) Tj ( ) Tj (--undo-link) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 167.4236 cm
q
BT 1 0 0 1 0 50 Tm .574431 Tw 12 TL /F1 10 Tf 0 0 0 rg (Since the ) Tj /F3 10 Tf 0 0 0 rg (doctor) Tj /F1 10 Tf 0 0 0 rg ( does not care for the program section and loads patch as a single bulk region without) Tj T* 0 Tw .812485 Tw (caring for the program header and sections virtual addresses and offsets in the patch must be prepared) Tj T* 0 Tw 1.274651 Tw (accordingly. That means we have to undo all the offsets and convert base-address relative values into) Tj T* 0 Tw .82248 Tw (section-relative values for the relocations offsets \() Tj /F3 10 Tf 0 0 0 rg (r_offset) Tj /F1 10 Tf 0 0 0 rg (\), symbols \() Tj /F3 10 Tf 0 0 0 rg (st_value) Tj /F1 10 Tf 0 0 0 rg (\) and finally reset the) Tj T* 0 Tw (sections addresses to zeroes \() Tj /F3 10 Tf 0 0 0 rg (sh_addr) Tj /F1 10 Tf 0 0 0 rg (\). This all is done by the ) Tj /F3 10 Tf 0 0 0 rg (--undo-link) Tj /F1 10 Tf 0 0 0 rg ( mode of ) Tj /F3 10 Tf 0 0 0 rg (kpatch_strip) Tj /F1 10 Tf 0 0 0 rg (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 86.22362 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 492 72 re B*
Q
q
.960784 .960784 .862745 rg
n 0 48 6 12 re f*
.960784 .960784 .862745 rg
n 0 36 450 12 re f*
.960784 .960784 .862745 rg
n 0 24 480 12 re f*
.960784 .960784 .862745 rg
n 0 12 468 12 re f*
.960784 .960784 .862745 rg
n 0 0 468 12 re f*
BT 1 0 0 1 0 50 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( readelf -rs foobar.stripped) Tj T* .501961 .501961 .501961 rg (Relocation section '.rela.kpatch.text' at offset 0x11f0 contains 3 entries:) Tj T* (  Offset          Info           Type           Sym. Value    Sym. Name + Addend) Tj T* (000000400667  00030000000a R_X86_64_32       0000000000601050 .kpatch.data + 0) Tj T* (00000040066c  00030000000a R_X86_64_32       0000000000601050 .kpatch.data + 8) Tj T* ET
Q
Q
Q
Q
Q
 
endstream
endobj
275 0 obj
<<
/Length 6548
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 547.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 540 216 re B*
Q
q
.960784 .960784 .862745 rg
n 0 192 510 12 re f*
.960784 .960784 .862745 rg
n 0 180 0 12 re f*
.960784 .960784 .862745 rg
n 0 168 450 12 re f*
.960784 .960784 .862745 rg
n 0 156 480 12 re f*
.960784 .960784 .862745 rg
n 0 144 432 12 re f*
.960784 .960784 .862745 rg
n 0 132 528 12 re f*
.960784 .960784 .862745 rg
n 0 120 480 12 re f*
.960784 .960784 .862745 rg
n 0 108 0 12 re f*
.960784 .960784 .862745 rg
n 0 96 258 12 re f*
.960784 .960784 .862745 rg
n 0 84 378 12 re f*
.960784 .960784 .862745 rg
n 0 72 348 12 re f*
.960784 .960784 .862745 rg
n 0 60 348 12 re f*
.960784 .960784 .862745 rg
n 0 48 348 12 re f*
.960784 .960784 .862745 rg
n 0 36 348 12 re f*
.960784 .960784 .862745 rg
n 0 24 18 12 re f*
.960784 .960784 .862745 rg
n 0 12 468 12 re f*
.960784 .960784 .862745 rg
n 0 0 498 12 re f*
BT 1 0 0 1 0 194 Tm 12 TL /F3 10 Tf .501961 .501961 .501961 rg (000000400676  002500000002 R_X86_64_PC32     0000000000000000 printf@@GLIBC_2.2.5 - 4) Tj T*  T* (Relocation section '.rela.kpatch.info' at offset 0x1238 contains 3 entries:) Tj T* (  Offset          Info           Type           Sym. Value    Sym. Name + Addend) Tj T* (0000004006b4  000100000001 R_X86_64_64       00000000004004d0 .text + ed) Tj T* (0000004006c4  002600000001 R_X86_64_64       0000000000400662 i_m_being_patched.kpat + 0) Tj T* (0000004006d4  000200000001 R_X86_64_64       000000000040069b .kpatch.strtab + 0) Tj T*  T* (Symbol table '.symtab' contains 39 entries:) Tj T* (   Num:    Value          Size Type    Bind   Vis      Ndx Name) Tj T* (     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND) Tj T* (     1: 00000000004004d0     0 SECTION LOCAL  DEFAULT   14) Tj T* (     2: 000000000040069b     0 SECTION LOCAL  DEFAULT   20) Tj T* (     3: 0000000000601050     0 SECTION LOCAL  DEFAULT   36) Tj T* (...) Tj T* (    37: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND printf@@GLIBC_2.2.5) Tj T* (    38: 0000000000400662    26 FUNC    GLOBAL DEFAULT   16 i_m_being_patched.kpatch) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 527.8236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now let's undo the link:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 494.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 24 re B*
Q
q
.960784 .960784 .862745 rg
n 0 0 6 12 re f*
BT 1 0 0 1 0 2 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( kpatch_strip --undo-link foobar.stripped) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 474.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Take a look at the patch afterwards to ensure that offsets have been indeed reset:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 189.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 540 276 re B*
Q
q
.960784 .960784 .862745 rg
n 0 252 6 12 re f*
.960784 .960784 .862745 rg
n 0 240 450 12 re f*
.960784 .960784 .862745 rg
n 0 228 480 12 re f*
.960784 .960784 .862745 rg
n 0 216 468 12 re f*
.960784 .960784 .862745 rg
n 0 204 468 12 re f*
.960784 .960784 .862745 rg
n 0 192 510 12 re f*
.960784 .960784 .862745 rg
n 0 180 0 12 re f*
.960784 .960784 .862745 rg
n 0 168 450 12 re f*
.960784 .960784 .862745 rg
n 0 156 480 12 re f*
.960784 .960784 .862745 rg
n 0 144 432 12 re f*
.960784 .960784 .862745 rg
n 0 132 528 12 re f*
.960784 .960784 .862745 rg
n 0 120 480 12 re f*
.960784 .960784 .862745 rg
n 0 108 0 12 re f*
.960784 .960784 .862745 rg
n 0 96 258 12 re f*
.960784 .960784 .862745 rg
n 0 84 378 12 re f*
.960784 .960784 .862745 rg
n 0 72 348 12 re f*
.960784 .960784 .862745 rg
n 0 60 348 12 re f*
.960784 .960784 .862745 rg
n 0 48 348 12 re f*
.960784 .960784 .862745 rg
n 0 36 348 12 re f*
.960784 .960784 .862745 rg
n 0 24 18 12 re f*
.960784 .960784 .862745 rg
n 0 12 468 12 re f*
.960784 .960784 .862745 rg
n 0 0 498 12 re f*
BT 1 0 0 1 0 254 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( readelf -rs foobar.stripped) Tj T* .501961 .501961 .501961 rg (Relocation section '.rela.kpatch.text' at offset 0x11f0 contains 3 entries:) Tj T* (  Offset          Info           Type           Sym. Value    Sym. Name + Addend) Tj T* (000000000005  00030000000a R_X86_64_32       0000000000000000 .kpatch.data + 0) Tj T* (00000000000a  00030000000a R_X86_64_32       0000000000000000 .kpatch.data + 8) Tj T* (000000000014  002500000002 R_X86_64_PC32     0000000000000000 printf@@GLIBC_2.2.5 - 4) Tj T*  T* (Relocation section '.rela.kpatch.info' at offset 0x1238 contains 3 entries:) Tj T* (  Offset          Info           Type           Sym. Value    Sym. Name + Addend) Tj T* (000000000000  000100000001 R_X86_64_64       0000000000000000 .text + ed) Tj T* (000000000010  002600000001 R_X86_64_64       0000000000000000 i_m_being_patched.kpat + 0) Tj T* (000000000020  000200000001 R_X86_64_64       0000000000000000 .kpatch.strtab + 0) Tj T*  T* (Symbol table '.symtab' contains 39 entries:) Tj T* (   Num:    Value          Size Type    Bind   Vis      Ndx Name) Tj T* (     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND) Tj T* (     1: 0000000000000000     0 SECTION LOCAL  DEFAULT   14) Tj T* (     2: 0000000000000000     0 SECTION LOCAL  DEFAULT   20) Tj T* (     3: 0000000000000000     0 SECTION LOCAL  DEFAULT   36) Tj T* (...) Tj T* (    37: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND printf@@GLIBC_2.2.5) Tj T* (    38: 0000000000000000    26 FUNC    GLOBAL DEFAULT   16 i_m_being_patched.kpatch) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 165.4236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (Adding meta-information with ) Tj /F3 10 Tf 0 0 0 rg (kpatch_make) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 135.4236 cm
q
BT 1 0 0 1 0 14 Tm .751235 Tw 12 TL /F1 10 Tf 0 0 0 rg (Finally, we need to prepend the ) Tj /F3 10 Tf 0 0 0 rg (kpatch) Tj /F1 10 Tf 0 0 0 rg ( ELF object with meta-information doctor uses to check that the) Tj T* 0 Tw (patch target is correct.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 105.4236 cm
q
BT 1 0 0 1 0 14 Tm .618488 Tw 12 TL /F1 10 Tf 0 0 0 rg (We do this using ) Tj /F3 10 Tf 0 0 0 rg (kpatch_make) Tj /F1 10 Tf 0 0 0 rg (, but first we need to know what is the name of the target object \() Tj /F3 10 Tf 0 0 0 rg (foo) Tj /F1 10 Tf 0 0 0 rg ( in) Tj T* 0 Tw (our case\) and what is its BuildID, stored in ) Tj /F3 10 Tf 0 0 0 rg (.note.build-id) Tj /F1 10 Tf 0 0 0 rg ( section:) Tj T* ET
Q
Q
 
endstream
endobj
276 0 obj
<<
/Length 4058
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 727.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
.960784 .960784 .862745 rg
n 0 12 6 12 re f*
.960784 .960784 .862745 rg
n 102 12 6 12 re f*
.960784 .960784 .862745 rg
n 144 12 60 12 re f*
.960784 .960784 .862745 rg
n 0 0 324 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( readelf -n foo ) Tj 0 0 0 rg (|) Tj 0 0 0 rg ( grep ) Tj .729412 .129412 .129412 rg ('Build ID') Tj 0 0 0 rg  T* .501961 .501961 .501961 rg (    Build ID: 9e898b990912e176275b1da24c30803288095cd1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 707.8236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Now we are all set to convert ) Tj /F3 10 Tf 0 0 0 rg (foobar.stripped) Tj /F1 10 Tf 0 0 0 rg ( into a ) Tj /F3 10 Tf 0 0 0 rg (kpatch) Tj /F1 10 Tf 0 0 0 rg (:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 662.6236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 36 re B*
Q
q
.960784 .960784 .862745 rg
n 0 12 6 12 re f*
.960784 .960784 .862745 rg
n 102 12 252 12 re f*
.960784 .960784 .862745 rg
n 360 12 6 12 re f*
.960784 .960784 .862745 rg
n 0 0 186 12 re f*
BT 1 0 0 1 0 14 Tm 12 TL /F5 10 Tf 0 0 .501961 rg ($) Tj /F3 10 Tf 0 0 0 rg ( kpatch_make -b ) Tj .729412 .129412 .129412 rg ("9e898b990912e176275b1da24c30803288095cd1") Tj 0 0 0 rg ( ) Tj /F5 10 Tf .733333 .4 .133333 rg (\\) Tj T* /F3 10 Tf .501961 .501961 .501961 rg (  foobar.stripped -o foo.kpatch) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 642.6236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Now let's apply that:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 513.4236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 120 re B*
Q
q
.960784 .960784 .862745 rg
n 0 96 78 12 re f*
.960784 .960784 .862745 rg
n 0 84 84 12 re f*
.960784 .960784 .862745 rg
n 0 72 84 12 re f*
.960784 .960784 .862745 rg
n 0 60 18 12 re f*
.960784 .960784 .862745 rg
n 0 48 78 12 re f*
.960784 .960784 .862745 rg
n 222 48 12 12 re f*
.960784 .960784 .862745 rg
n 288 48 6 12 re f*
.960784 .960784 .862745 rg
n 0 36 18 12 re f*
.960784 .960784 .862745 rg
n 0 24 66 12 re f*
.960784 .960784 .862745 rg
n 0 12 132 12 re f*
.960784 .960784 .862745 rg
n 0 0 132 12 re f*
BT 1 0 0 1 0 98 Tm 12 TL /F5 10 Tf 0 0 .501961 rg (\(terminal1\) $) Tj /F3 10 Tf 0 0 0 rg ( ./foo) Tj T* .501961 .501961 .501961 rg (i'm unpatched!) Tj T* (i'm unpatched!) Tj T* (...) Tj T* /F5 10 Tf 0 0 .501961 rg (\(terminal2\) $) Tj /F3 10 Tf 0 0 0 rg ( kpatch_ctl -v patch -p ) Tj /F5 10 Tf 0 .501961 0 rg ($\() Tj /F3 10 Tf 0 0 0 rg (pidof foo) Tj /F5 10 Tf 0 .501961 0 rg (\)) Tj /F3 10 Tf 0 0 0 rg ( ./foo.kpatch) Tj T* .501961 .501961 .501961 rg (...) Tj T* (\(terminal1\)) Tj T* (you patched my tralala) Tj T* (you patched my tralala) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 489.4236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F6 10 Tf 0 0 0 rg (Conclusion) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 471.4236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Congratulations, we are done with the simple patch! It was pretty complicated, wasn't it?) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 429.4236 cm
q
BT 1 0 0 1 0 26 Tm 1.37061 Tw 12 TL /F1 10 Tf 0 0 0 rg (Building any real project following the recipe above is a nightmare since it requires interfering with the) Tj T* 0 Tw 5.140814 Tw (project's build system: changing all the compilation to go through intermediate assembly and) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (kpatch_gensrc) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 399.4236 cm
q
BT 1 0 0 1 0 14 Tm .494987 Tw 12 TL /F1 10 Tf 0 0 0 rg (Luckily, this can be done in a ) Tj /F3 10 Tf 0 0 0 rg (gcc) Tj /F1 10 Tf 0 0 0 rg ( wrapper like ) Tj 0 0 .501961 rg (kpatch_cc) Tj 0 0 0 rg (. It allows for the transparent compilation of the) Tj T* 0 Tw (patches and hides away the details into an additional abstraction layer that will eventually break, be sure.) Tj T* ET
Q
Q
 
endstream
endobj
277 0 obj
<<
/Nums [ 0 278 0 R 1 279 0 R 2 280 0 R 3 281 0 R 4 282 0 R 
  5 283 0 R 6 284 0 R 7 285 0 R 8 286 0 R 9 287 0 R 
  10 288 0 R 11 289 0 R 12 290 0 R 13 291 0 R 14 292 0 R 
  15 293 0 R 16 294 0 R 17 295 0 R 18 296 0 R 19 297 0 R 
  20 298 0 R 21 299 0 R 22 300 0 R ]
>>
endobj
278 0 obj
<<
/S /D /St 1
>>
endobj
279 0 obj
<<
/S /D /St 2
>>
endobj
280 0 obj
<<
/S /D /St 3
>>
endobj
281 0 obj
<<
/S /D /St 4
>>
endobj
282 0 obj
<<
/S /D /St 5
>>
endobj
283 0 obj
<<
/S /D /St 6
>>
endobj
284 0 obj
<<
/S /D /St 7
>>
endobj
285 0 obj
<<
/S /D /St 8
>>
endobj
286 0 obj
<<
/S /D /St 9
>>
endobj
287 0 obj
<<
/S /D /St 10
>>
endobj
288 0 obj
<<
/S /D /St 11
>>
endobj
289 0 obj
<<
/S /D /St 12
>>
endobj
290 0 obj
<<
/S /D /St 13
>>
endobj
291 0 obj
<<
/S /D /St 14
>>
endobj
292 0 obj
<<
/S /D /St 15
>>
endobj
293 0 obj
<<
/S /D /St 16
>>
endobj
294 0 obj
<<
/S /D /St 17
>>
endobj
295 0 obj
<<
/S /D /St 18
>>
endobj
296 0 obj
<<
/S /D /St 19
>>
endobj
297 0 obj
<<
/S /D /St 20
>>
endobj
298 0 obj
<<
/S /D /St 21
>>
endobj
299 0 obj
<<
/S /D /St 22
>>
endobj
300 0 obj
<<
/S /D /St 23
>>
endobj
xref
0 301
0000000000 65535 f 
0000000073 00000 n 
0000000156 00000 n 
0000000263 00000 n 
0000000375 00000 n 
0000000543 00000 n 
0000000737 00000 n 
0000000842 00000 n 
0000001011 00000 n 
0000001180 00000 n 
0000001293 00000 n 
0000001404 00000 n 
0000001574 00000 n 
0000001781 00000 n 
0000002039 00000 n 
0000002243 00000 n 
0000002413 00000 n 
0000002583 00000 n 
0000002753 00000 n 
0000002923 00000 n 
0000003093 00000 n 
0000003263 00000 n 
0000003532 00000 n 
0000003727 00000 n 
0000003897 00000 n 
0000004017 00000 n 
0000004193 00000 n 
0000004388 00000 n 
0000004558 00000 n 
0000004813 00000 n 
0000005008 00000 n 
0000005235 00000 n 
0000005404 00000 n 
0000005573 00000 n 
0000005742 00000 n 
0000005911 00000 n 
0000006080 00000 n 
0000006249 00000 n 
0000006418 00000 n 
0000006587 00000 n 
0000006756 00000 n 
0000006925 00000 n 
0000007094 00000 n 
0000007263 00000 n 
0000007432 00000 n 
0000007602 00000 n 
0000007772 00000 n 
0000007942 00000 n 
0000008112 00000 n 
0000008282 00000 n 
0000008452 00000 n 
0000008622 00000 n 
0000008792 00000 n 
0000008962 00000 n 
0000009132 00000 n 
0000009302 00000 n 
0000009472 00000 n 
0000009642 00000 n 
0000009812 00000 n 
0000009982 00000 n 
0000010152 00000 n 
0000010322 00000 n 
0000010492 00000 n 
0000010662 00000 n 
0000010832 00000 n 
0000011002 00000 n 
0000011172 00000 n 
0000011342 00000 n 
0000011512 00000 n 
0000011682 00000 n 
0000011852 00000 n 
0000012022 00000 n 
0000012192 00000 n 
0000012362 00000 n 
0000012532 00000 n 
0000012702 00000 n 
0000012872 00000 n 
0000013042 00000 n 
0000013212 00000 n 
0000013382 00000 n 
0000013552 00000 n 
0000013722 00000 n 
0000013892 00000 n 
0000014062 00000 n 
0000014232 00000 n 
0000014402 00000 n 
0000014572 00000 n 
0000014742 00000 n 
0000014912 00000 n 
0000015082 00000 n 
0000015252 00000 n 
0000015422 00000 n 
0000015592 00000 n 
0000015762 00000 n 
0000015932 00000 n 
0000016102 00000 n 
0000016272 00000 n 
0000016442 00000 n 
0000016612 00000 n 
0000016782 00000 n 
0000016952 00000 n 
0000017123 00000 n 
0000017294 00000 n 
0000017465 00000 n 
0000017636 00000 n 
0000017807 00000 n 
0000017978 00000 n 
0000018149 00000 n 
0000018320 00000 n 
0000018491 00000 n 
0000018662 00000 n 
0000018833 00000 n 
0000019004 00000 n 
0000019175 00000 n 
0000019346 00000 n 
0000019517 00000 n 
0000019688 00000 n 
0000020544 00000 n 
0000020715 00000 n 
0000020886 00000 n 
0000021057 00000 n 
0000021228 00000 n 
0000021399 00000 n 
0000021570 00000 n 
0000021741 00000 n 
0000021912 00000 n 
0000022083 00000 n 
0000022254 00000 n 
0000022425 00000 n 
0000022596 00000 n 
0000022767 00000 n 
0000022938 00000 n 
0000023109 00000 n 
0000023280 00000 n 
0000023451 00000 n 
0000023622 00000 n 
0000023793 00000 n 
0000023964 00000 n 
0000024135 00000 n 
0000024306 00000 n 
0000024477 00000 n 
0000024648 00000 n 
0000024819 00000 n 
0000024990 00000 n 
0000025161 00000 n 
0000025332 00000 n 
0000025503 00000 n 
0000025674 00000 n 
0000025845 00000 n 
0000026016 00000 n 
0000026187 00000 n 
0000026357 00000 n 
0000026859 00000 n 
0000027030 00000 n 
0000027201 00000 n 
0000027372 00000 n 
0000027543 00000 n 
0000027714 00000 n 
0000027885 00000 n 
0000028056 00000 n 
0000028227 00000 n 
0000028398 00000 n 
0000028569 00000 n 
0000028740 00000 n 
0000029052 00000 n 
0000029223 00000 n 
0000029394 00000 n 
0000029565 00000 n 
0000029736 00000 n 
0000029989 00000 n 
0000030160 00000 n 
0000030389 00000 n 
0000030560 00000 n 
0000030731 00000 n 
0000030902 00000 n 
0000031073 00000 n 
0000031326 00000 n 
0000031497 00000 n 
0000031668 00000 n 
0000031835 00000 n 
0000032006 00000 n 
0000032177 00000 n 
0000032348 00000 n 
0000032617 00000 n 
0000032808 00000 n 
0000033012 00000 n 
0000033249 00000 n 
0000033444 00000 n 
0000033673 00000 n 
0000033880 00000 n 
0000034109 00000 n 
0000034318 00000 n 
0000034527 00000 n 
0000034736 00000 n 
0000034945 00000 n 
0000035154 00000 n 
0000035363 00000 n 
0000035572 00000 n 
0000035781 00000 n 
0000035952 00000 n 
0000036181 00000 n 
0000036291 00000 n 
0000036550 00000 n 
0000036628 00000 n 
0000036781 00000 n 
0000036907 00000 n 
0000037071 00000 n 
0000037197 00000 n 
0000037333 00000 n 
0000037523 00000 n 
0000037641 00000 n 
0000037763 00000 n 
0000037933 00000 n 
0000038097 00000 n 
0000038221 00000 n 
0000038343 00000 n 
0000038526 00000 n 
0000038644 00000 n 
0000038799 00000 n 
0000038969 00000 n 
0000039101 00000 n 
0000039251 00000 n 
0000039392 00000 n 
0000039516 00000 n 
0000039699 00000 n 
0000039863 00000 n 
0000040037 00000 n 
0000040155 00000 n 
0000040298 00000 n 
0000040416 00000 n 
0000040566 00000 n 
0000040692 00000 n 
0000040856 00000 n 
0000040987 00000 n 
0000041157 00000 n 
0000041272 00000 n 
0000041426 00000 n 
0000041578 00000 n 
0000041724 00000 n 
0000041860 00000 n 
0000042041 00000 n 
0000042164 00000 n 
0000042287 00000 n 
0000042431 00000 n 
0000042549 00000 n 
0000042717 00000 n 
0000042873 00000 n 
0000043035 00000 n 
0000043200 00000 n 
0000043338 00000 n 
0000043517 00000 n 
0000043682 00000 n 
0000043842 00000 n 
0000043958 00000 n 
0000044200 00000 n 
0000054960 00000 n 
0000063707 00000 n 
0000071031 00000 n 
0000077089 00000 n 
0000086337 00000 n 
0000094301 00000 n 
0000101875 00000 n 
0000110012 00000 n 
0000117932 00000 n 
0000124722 00000 n 
0000133331 00000 n 
0000141661 00000 n 
0000150602 00000 n 
0000157525 00000 n 
0000165196 00000 n 
0000174730 00000 n 
0000180209 00000 n 
0000192461 00000 n 
0000203803 00000 n 
0000210811 00000 n 
0000219992 00000 n 
0000226593 00000 n 
0000230704 00000 n 
0000230992 00000 n 
0000231027 00000 n 
0000231062 00000 n 
0000231097 00000 n 
0000231132 00000 n 
0000231167 00000 n 
0000231202 00000 n 
0000231237 00000 n 
0000231272 00000 n 
0000231307 00000 n 
0000231343 00000 n 
0000231379 00000 n 
0000231415 00000 n 
0000231451 00000 n 
0000231487 00000 n 
0000231523 00000 n 
0000231559 00000 n 
0000231595 00000 n 
0000231631 00000 n 
0000231667 00000 n 
0000231703 00000 n 
0000231739 00000 n 
0000231775 00000 n 
trailer
<<
/ID 
[<bd347b1ad5ba5f4690c1a8a52c7cfeae><bd347b1ad5ba5f4690c1a8a52c7cfeae>]
% ReportLab generated PDF document -- digest (http://www.reportlab.com)

/Info 201 0 R
/Root 200 0 R
/Size 301
>>
startxref
231811
%%EOF
